/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { TagTemplateControllerList200Response } from '../formant-models';
import { TagTemplateControllerList200ResponseItemsInner } from '../formant-models';
/**
 * TagTemplateApi - axios parameter creator
 * @export
 */
export declare const TagTemplateApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a tag template. Resource: streams Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a tag template by tag template ID. Resource: streams Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all tag templates in your organization. Resource: streams Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new tag template. Resource: streams Authorized roles: administrator
     * @summary Post
     * @param {TagTemplateControllerList200ResponseItemsInner} tagTemplateControllerList200ResponseItemsInner TagTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerPost: (tagTemplateControllerList200ResponseItemsInner: TagTemplateControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TagTemplateApi - functional programming interface
 * @export
 */
export declare const TagTemplateApiFp: (configuration?: Configuration) => {
    /**
     * Delete a tag template. Resource: streams Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a tag template by tag template ID. Resource: streams Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagTemplateControllerList200ResponseItemsInner>>;
    /**
     * List all tag templates in your organization. Resource: streams Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagTemplateControllerList200Response>>;
    /**
     * Create a new tag template. Resource: streams Authorized roles: administrator
     * @summary Post
     * @param {TagTemplateControllerList200ResponseItemsInner} tagTemplateControllerList200ResponseItemsInner TagTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerPost(tagTemplateControllerList200ResponseItemsInner: TagTemplateControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagTemplateControllerList200ResponseItemsInner>>;
};
/**
 * TagTemplateApi - factory interface
 * @export
 */
export declare const TagTemplateApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a tag template. Resource: streams Authorized roles: administrator
     * @summary Delete
     * @param {TagTemplateApiTagTemplateControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerDelete(requestParameters: TagTemplateApiTagTemplateControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a tag template by tag template ID. Resource: streams Authorized roles: viewer
     * @summary Get one
     * @param {TagTemplateApiTagTemplateControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerGetOne(requestParameters: TagTemplateApiTagTemplateControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<TagTemplateControllerList200ResponseItemsInner>;
    /**
     * List all tag templates in your organization. Resource: streams Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerList(options?: RawAxiosRequestConfig): AxiosPromise<TagTemplateControllerList200Response>;
    /**
     * Create a new tag template. Resource: streams Authorized roles: administrator
     * @summary Post
     * @param {TagTemplateApiTagTemplateControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagTemplateControllerPost(requestParameters: TagTemplateApiTagTemplateControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TagTemplateControllerList200ResponseItemsInner>;
};
/**
 * Request parameters for tagTemplateControllerDelete operation in TagTemplateApi.
 * @export
 * @interface TagTemplateApiTagTemplateControllerDeleteRequest
 */
export interface TagTemplateApiTagTemplateControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof TagTemplateApiTagTemplateControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for tagTemplateControllerGetOne operation in TagTemplateApi.
 * @export
 * @interface TagTemplateApiTagTemplateControllerGetOneRequest
 */
export interface TagTemplateApiTagTemplateControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof TagTemplateApiTagTemplateControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for tagTemplateControllerPost operation in TagTemplateApi.
 * @export
 * @interface TagTemplateApiTagTemplateControllerPostRequest
 */
export interface TagTemplateApiTagTemplateControllerPostRequest {
    /**
     * TagTemplate
     * @type {TagTemplateControllerList200ResponseItemsInner}
     * @memberof TagTemplateApiTagTemplateControllerPost
     */
    readonly tagTemplateControllerList200ResponseItemsInner: TagTemplateControllerList200ResponseItemsInner;
}
/**
 * TagTemplateApi - object-oriented interface
 * @export
 * @class TagTemplateApi
 * @extends {BaseAPI}
 */
export declare class TagTemplateApi extends BaseAPI {
    /**
     * Delete a tag template. Resource: streams Authorized roles: administrator
     * @summary Delete
     * @param {TagTemplateApiTagTemplateControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTemplateApi
     */
    tagTemplateControllerDelete(requestParameters: TagTemplateApiTagTemplateControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a tag template by tag template ID. Resource: streams Authorized roles: viewer
     * @summary Get one
     * @param {TagTemplateApiTagTemplateControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTemplateApi
     */
    tagTemplateControllerGetOne(requestParameters: TagTemplateApiTagTemplateControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TagTemplateControllerList200ResponseItemsInner, any>>;
    /**
     * List all tag templates in your organization. Resource: streams Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTemplateApi
     */
    tagTemplateControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TagTemplateControllerList200Response, any>>;
    /**
     * Create a new tag template. Resource: streams Authorized roles: administrator
     * @summary Post
     * @param {TagTemplateApiTagTemplateControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagTemplateApi
     */
    tagTemplateControllerPost(requestParameters: TagTemplateApiTagTemplateControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TagTemplateControllerList200ResponseItemsInner, any>>;
}
