/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { DeviceConfigurationTemplateControllerList200Response } from '../formant-models';
import { DeviceConfigurationTemplateControllerPatchRequest } from '../formant-models';
import { DeviceConfigurationTemplateControllerPostRequest } from '../formant-models';
/**
 * DeviceConfigurationTemplateApi - axios parameter creator
 * @export
 */
export declare const DeviceConfigurationTemplateApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a device configuration template Resource: devices Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a device configuration template Resource: devices Authorized roles: administrator
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List device configuration templates Resource: devices Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a device configuration template Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {DeviceConfigurationTemplateControllerPatchRequest} deviceConfigurationTemplateControllerPatchRequest PartialDeviceConfigurationTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerPatch: (id: string, deviceConfigurationTemplateControllerPatchRequest: DeviceConfigurationTemplateControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a device configuration template Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {DeviceConfigurationTemplateControllerPostRequest} deviceConfigurationTemplateControllerPostRequest DeviceConfigurationTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerPost: (deviceConfigurationTemplateControllerPostRequest: DeviceConfigurationTemplateControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DeviceConfigurationTemplateApi - functional programming interface
 * @export
 */
export declare const DeviceConfigurationTemplateApiFp: (configuration?: Configuration) => {
    /**
     * Delete a device configuration template Resource: devices Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a device configuration template Resource: devices Authorized roles: administrator
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceConfigurationTemplateControllerPostRequest>>;
    /**
     * List device configuration templates Resource: devices Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceConfigurationTemplateControllerList200Response>>;
    /**
     * Update a device configuration template Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {DeviceConfigurationTemplateControllerPatchRequest} deviceConfigurationTemplateControllerPatchRequest PartialDeviceConfigurationTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerPatch(id: string, deviceConfigurationTemplateControllerPatchRequest: DeviceConfigurationTemplateControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceConfigurationTemplateControllerPostRequest>>;
    /**
     * Create a device configuration template Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {DeviceConfigurationTemplateControllerPostRequest} deviceConfigurationTemplateControllerPostRequest DeviceConfigurationTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerPost(deviceConfigurationTemplateControllerPostRequest: DeviceConfigurationTemplateControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceConfigurationTemplateControllerPostRequest>>;
};
/**
 * DeviceConfigurationTemplateApi - factory interface
 * @export
 */
export declare const DeviceConfigurationTemplateApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a device configuration template Resource: devices Authorized roles: administrator
     * @summary Delete
     * @param {DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerDelete(requestParameters: DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a device configuration template Resource: devices Authorized roles: administrator
     * @summary Get one
     * @param {DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerGetOne(requestParameters: DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceConfigurationTemplateControllerPostRequest>;
    /**
     * List device configuration templates Resource: devices Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerList(options?: RawAxiosRequestConfig): AxiosPromise<DeviceConfigurationTemplateControllerList200Response>;
    /**
     * Update a device configuration template Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerPatch(requestParameters: DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceConfigurationTemplateControllerPostRequest>;
    /**
     * Create a device configuration template Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceConfigurationTemplateControllerPost(requestParameters: DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceConfigurationTemplateControllerPostRequest>;
};
/**
 * Request parameters for deviceConfigurationTemplateControllerDelete operation in DeviceConfigurationTemplateApi.
 * @export
 * @interface DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerDeleteRequest
 */
export interface DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for deviceConfigurationTemplateControllerGetOne operation in DeviceConfigurationTemplateApi.
 * @export
 * @interface DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerGetOneRequest
 */
export interface DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for deviceConfigurationTemplateControllerPatch operation in DeviceConfigurationTemplateApi.
 * @export
 * @interface DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPatchRequest
 */
export interface DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPatch
     */
    readonly id: string;
    /**
     * PartialDeviceConfigurationTemplate
     * @type {DeviceConfigurationTemplateControllerPatchRequest}
     * @memberof DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPatch
     */
    readonly deviceConfigurationTemplateControllerPatchRequest: DeviceConfigurationTemplateControllerPatchRequest;
}
/**
 * Request parameters for deviceConfigurationTemplateControllerPost operation in DeviceConfigurationTemplateApi.
 * @export
 * @interface DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPostRequest
 */
export interface DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPostRequest {
    /**
     * DeviceConfigurationTemplate
     * @type {DeviceConfigurationTemplateControllerPostRequest}
     * @memberof DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPost
     */
    readonly deviceConfigurationTemplateControllerPostRequest: DeviceConfigurationTemplateControllerPostRequest;
}
/**
 * DeviceConfigurationTemplateApi - object-oriented interface
 * @export
 * @class DeviceConfigurationTemplateApi
 * @extends {BaseAPI}
 */
export declare class DeviceConfigurationTemplateApi extends BaseAPI {
    /**
     * Delete a device configuration template Resource: devices Authorized roles: administrator
     * @summary Delete
     * @param {DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceConfigurationTemplateApi
     */
    deviceConfigurationTemplateControllerDelete(requestParameters: DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a device configuration template Resource: devices Authorized roles: administrator
     * @summary Get one
     * @param {DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceConfigurationTemplateApi
     */
    deviceConfigurationTemplateControllerGetOne(requestParameters: DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceConfigurationTemplateControllerPostRequest, any>>;
    /**
     * List device configuration templates Resource: devices Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceConfigurationTemplateApi
     */
    deviceConfigurationTemplateControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceConfigurationTemplateControllerList200Response, any>>;
    /**
     * Update a device configuration template Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceConfigurationTemplateApi
     */
    deviceConfigurationTemplateControllerPatch(requestParameters: DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceConfigurationTemplateControllerPostRequest, any>>;
    /**
     * Create a device configuration template Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceConfigurationTemplateApi
     */
    deviceConfigurationTemplateControllerPost(requestParameters: DeviceConfigurationTemplateApiDeviceConfigurationTemplateControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceConfigurationTemplateControllerPostRequest, any>>;
}
