/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { EventTriggerGroupControllerGetAll200Response } from '../formant-models';
import { EventTriggerGroupControllerGetAll200ResponseItemsInner } from '../formant-models';
import { EventTriggerGroupControllerPatchRequest } from '../formant-models';
import { EventTriggerGroupControllerPostRequest } from '../formant-models';
/**
 * EventTriggerGroupApi - axios parameter creator
 * @export
 */
export declare const EventTriggerGroupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List all event trigger groups Resource: events Authorized roles: viewer, device
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerGetAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an event trigger group Resource: events Authorized roles: viewer, device
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update event trigger group Resource: events Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {EventTriggerGroupControllerPatchRequest} eventTriggerGroupControllerPatchRequest PartialEventTriggerGroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerPatch: (id: string, eventTriggerGroupControllerPatchRequest: EventTriggerGroupControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create event trigger group Resource: events Authorized roles: administrator
     * @summary Post
     * @param {EventTriggerGroupControllerPostRequest} eventTriggerGroupControllerPostRequest CreateEventTriggerGroupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerPost: (eventTriggerGroupControllerPostRequest: EventTriggerGroupControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Query event trigger groups Resource: events Authorized roles: viewer, device
     * @summary Query
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerQuery: (body: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventTriggerGroupApi - functional programming interface
 * @export
 */
export declare const EventTriggerGroupApiFp: (configuration?: Configuration) => {
    /**
     * List all event trigger groups Resource: events Authorized roles: viewer, device
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerGroupControllerGetAll200Response>>;
    /**
     * Get an event trigger group Resource: events Authorized roles: viewer, device
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerGroupControllerGetAll200ResponseItemsInner>>;
    /**
     * Update event trigger group Resource: events Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {EventTriggerGroupControllerPatchRequest} eventTriggerGroupControllerPatchRequest PartialEventTriggerGroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerPatch(id: string, eventTriggerGroupControllerPatchRequest: EventTriggerGroupControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerGroupControllerGetAll200ResponseItemsInner>>;
    /**
     * Create event trigger group Resource: events Authorized roles: administrator
     * @summary Post
     * @param {EventTriggerGroupControllerPostRequest} eventTriggerGroupControllerPostRequest CreateEventTriggerGroupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerPost(eventTriggerGroupControllerPostRequest: EventTriggerGroupControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerGroupControllerGetAll200ResponseItemsInner>>;
    /**
     * Query event trigger groups Resource: events Authorized roles: viewer, device
     * @summary Query
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerQuery(body: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerGroupControllerGetAll200Response>>;
};
/**
 * EventTriggerGroupApi - factory interface
 * @export
 */
export declare const EventTriggerGroupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List all event trigger groups Resource: events Authorized roles: viewer, device
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerGetAll(options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerGroupControllerGetAll200Response>;
    /**
     * Get an event trigger group Resource: events Authorized roles: viewer, device
     * @summary Get one
     * @param {EventTriggerGroupApiEventTriggerGroupControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerGetOne(requestParameters: EventTriggerGroupApiEventTriggerGroupControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerGroupControllerGetAll200ResponseItemsInner>;
    /**
     * Update event trigger group Resource: events Authorized roles: administrator
     * @summary Patch
     * @param {EventTriggerGroupApiEventTriggerGroupControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerPatch(requestParameters: EventTriggerGroupApiEventTriggerGroupControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerGroupControllerGetAll200ResponseItemsInner>;
    /**
     * Create event trigger group Resource: events Authorized roles: administrator
     * @summary Post
     * @param {EventTriggerGroupApiEventTriggerGroupControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerPost(requestParameters: EventTriggerGroupApiEventTriggerGroupControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerGroupControllerGetAll200ResponseItemsInner>;
    /**
     * Query event trigger groups Resource: events Authorized roles: viewer, device
     * @summary Query
     * @param {EventTriggerGroupApiEventTriggerGroupControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerGroupControllerQuery(requestParameters: EventTriggerGroupApiEventTriggerGroupControllerQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerGroupControllerGetAll200Response>;
};
/**
 * Request parameters for eventTriggerGroupControllerGetOne operation in EventTriggerGroupApi.
 * @export
 * @interface EventTriggerGroupApiEventTriggerGroupControllerGetOneRequest
 */
export interface EventTriggerGroupApiEventTriggerGroupControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof EventTriggerGroupApiEventTriggerGroupControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for eventTriggerGroupControllerPatch operation in EventTriggerGroupApi.
 * @export
 * @interface EventTriggerGroupApiEventTriggerGroupControllerPatchRequest
 */
export interface EventTriggerGroupApiEventTriggerGroupControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof EventTriggerGroupApiEventTriggerGroupControllerPatch
     */
    readonly id: string;
    /**
     * PartialEventTriggerGroup
     * @type {EventTriggerGroupControllerPatchRequest}
     * @memberof EventTriggerGroupApiEventTriggerGroupControllerPatch
     */
    readonly eventTriggerGroupControllerPatchRequest: EventTriggerGroupControllerPatchRequest;
}
/**
 * Request parameters for eventTriggerGroupControllerPost operation in EventTriggerGroupApi.
 * @export
 * @interface EventTriggerGroupApiEventTriggerGroupControllerPostRequest
 */
export interface EventTriggerGroupApiEventTriggerGroupControllerPostRequest {
    /**
     * CreateEventTriggerGroupRequest
     * @type {EventTriggerGroupControllerPostRequest}
     * @memberof EventTriggerGroupApiEventTriggerGroupControllerPost
     */
    readonly eventTriggerGroupControllerPostRequest: EventTriggerGroupControllerPostRequest;
}
/**
 * Request parameters for eventTriggerGroupControllerQuery operation in EventTriggerGroupApi.
 * @export
 * @interface EventTriggerGroupApiEventTriggerGroupControllerQueryRequest
 */
export interface EventTriggerGroupApiEventTriggerGroupControllerQueryRequest {
    /**
     *
     * @type {any}
     * @memberof EventTriggerGroupApiEventTriggerGroupControllerQuery
     */
    readonly body: any;
}
/**
 * EventTriggerGroupApi - object-oriented interface
 * @export
 * @class EventTriggerGroupApi
 * @extends {BaseAPI}
 */
export declare class EventTriggerGroupApi extends BaseAPI {
    /**
     * List all event trigger groups Resource: events Authorized roles: viewer, device
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerGroupApi
     */
    eventTriggerGroupControllerGetAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerGroupControllerGetAll200Response, any>>;
    /**
     * Get an event trigger group Resource: events Authorized roles: viewer, device
     * @summary Get one
     * @param {EventTriggerGroupApiEventTriggerGroupControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerGroupApi
     */
    eventTriggerGroupControllerGetOne(requestParameters: EventTriggerGroupApiEventTriggerGroupControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerGroupControllerGetAll200ResponseItemsInner, any>>;
    /**
     * Update event trigger group Resource: events Authorized roles: administrator
     * @summary Patch
     * @param {EventTriggerGroupApiEventTriggerGroupControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerGroupApi
     */
    eventTriggerGroupControllerPatch(requestParameters: EventTriggerGroupApiEventTriggerGroupControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerGroupControllerGetAll200ResponseItemsInner, any>>;
    /**
     * Create event trigger group Resource: events Authorized roles: administrator
     * @summary Post
     * @param {EventTriggerGroupApiEventTriggerGroupControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerGroupApi
     */
    eventTriggerGroupControllerPost(requestParameters: EventTriggerGroupApiEventTriggerGroupControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerGroupControllerGetAll200ResponseItemsInner, any>>;
    /**
     * Query event trigger groups Resource: events Authorized roles: viewer, device
     * @summary Query
     * @param {EventTriggerGroupApiEventTriggerGroupControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerGroupApi
     */
    eventTriggerGroupControllerQuery(requestParameters: EventTriggerGroupApiEventTriggerGroupControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerGroupControllerGetAll200Response, any>>;
}
