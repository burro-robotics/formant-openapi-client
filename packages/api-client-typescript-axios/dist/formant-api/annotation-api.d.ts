/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AnnotationControllerPatchRequest } from '../formant-models';
import { AnnotationControllerPostRequest } from '../formant-models';
/**
 * AnnotationApi - axios parameter creator
 * @export
 */
export declare const AnnotationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an annotation. Resource: annotations Authorized roles: operator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an existing annotation by annotation ID. Resource: annotations Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing annotation. Resource: annotations Authorized roles: operator
     * @summary Patch
     * @param {string} id
     * @param {AnnotationControllerPatchRequest} annotationControllerPatchRequest PartialAnnotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerPatch: (id: string, annotationControllerPatchRequest: AnnotationControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new annotation. Resource: annotations Authorized roles: operator
     * @summary Post
     * @param {AnnotationControllerPostRequest} annotationControllerPostRequest Annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerPost: (annotationControllerPostRequest: AnnotationControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AnnotationApi - functional programming interface
 * @export
 */
export declare const AnnotationApiFp: (configuration?: Configuration) => {
    /**
     * Delete an annotation. Resource: annotations Authorized roles: operator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get an existing annotation by annotation ID. Resource: annotations Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationControllerPostRequest>>;
    /**
     * Update an existing annotation. Resource: annotations Authorized roles: operator
     * @summary Patch
     * @param {string} id
     * @param {AnnotationControllerPatchRequest} annotationControllerPatchRequest PartialAnnotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerPatch(id: string, annotationControllerPatchRequest: AnnotationControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationControllerPostRequest>>;
    /**
     * Create a new annotation. Resource: annotations Authorized roles: operator
     * @summary Post
     * @param {AnnotationControllerPostRequest} annotationControllerPostRequest Annotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerPost(annotationControllerPostRequest: AnnotationControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationControllerPostRequest>>;
};
/**
 * AnnotationApi - factory interface
 * @export
 */
export declare const AnnotationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an annotation. Resource: annotations Authorized roles: operator
     * @summary Delete
     * @param {AnnotationApiAnnotationControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerDelete(requestParameters: AnnotationApiAnnotationControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get an existing annotation by annotation ID. Resource: annotations Authorized roles: viewer
     * @summary Get one
     * @param {AnnotationApiAnnotationControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerGetOne(requestParameters: AnnotationApiAnnotationControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationControllerPostRequest>;
    /**
     * Update an existing annotation. Resource: annotations Authorized roles: operator
     * @summary Patch
     * @param {AnnotationApiAnnotationControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerPatch(requestParameters: AnnotationApiAnnotationControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationControllerPostRequest>;
    /**
     * Create a new annotation. Resource: annotations Authorized roles: operator
     * @summary Post
     * @param {AnnotationApiAnnotationControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationControllerPost(requestParameters: AnnotationApiAnnotationControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationControllerPostRequest>;
};
/**
 * Request parameters for annotationControllerDelete operation in AnnotationApi.
 * @export
 * @interface AnnotationApiAnnotationControllerDeleteRequest
 */
export interface AnnotationApiAnnotationControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof AnnotationApiAnnotationControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for annotationControllerGetOne operation in AnnotationApi.
 * @export
 * @interface AnnotationApiAnnotationControllerGetOneRequest
 */
export interface AnnotationApiAnnotationControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof AnnotationApiAnnotationControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for annotationControllerPatch operation in AnnotationApi.
 * @export
 * @interface AnnotationApiAnnotationControllerPatchRequest
 */
export interface AnnotationApiAnnotationControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof AnnotationApiAnnotationControllerPatch
     */
    readonly id: string;
    /**
     * PartialAnnotation
     * @type {AnnotationControllerPatchRequest}
     * @memberof AnnotationApiAnnotationControllerPatch
     */
    readonly annotationControllerPatchRequest: AnnotationControllerPatchRequest;
}
/**
 * Request parameters for annotationControllerPost operation in AnnotationApi.
 * @export
 * @interface AnnotationApiAnnotationControllerPostRequest
 */
export interface AnnotationApiAnnotationControllerPostRequest {
    /**
     * Annotation
     * @type {AnnotationControllerPostRequest}
     * @memberof AnnotationApiAnnotationControllerPost
     */
    readonly annotationControllerPostRequest: AnnotationControllerPostRequest;
}
/**
 * AnnotationApi - object-oriented interface
 * @export
 * @class AnnotationApi
 * @extends {BaseAPI}
 */
export declare class AnnotationApi extends BaseAPI {
    /**
     * Delete an annotation. Resource: annotations Authorized roles: operator
     * @summary Delete
     * @param {AnnotationApiAnnotationControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    annotationControllerDelete(requestParameters: AnnotationApiAnnotationControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get an existing annotation by annotation ID. Resource: annotations Authorized roles: viewer
     * @summary Get one
     * @param {AnnotationApiAnnotationControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    annotationControllerGetOne(requestParameters: AnnotationApiAnnotationControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationControllerPostRequest, any>>;
    /**
     * Update an existing annotation. Resource: annotations Authorized roles: operator
     * @summary Patch
     * @param {AnnotationApiAnnotationControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    annotationControllerPatch(requestParameters: AnnotationApiAnnotationControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationControllerPostRequest, any>>;
    /**
     * Create a new annotation. Resource: annotations Authorized roles: operator
     * @summary Post
     * @param {AnnotationApiAnnotationControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    annotationControllerPost(requestParameters: AnnotationApiAnnotationControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationControllerPostRequest, any>>;
}
