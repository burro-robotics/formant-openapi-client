/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { GroupControllerList200Response } from '../formant-models';
import { GroupControllerList200ResponseItemsInner } from '../formant-models';
import { GroupControllerPatchRequest } from '../formant-models';
/**
 * GroupApi - axios parameter creator
 * @export
 */
export declare const GroupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a group Resource: devices Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a group Resource: devices Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List groups Resource: devices Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a group Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {GroupControllerPatchRequest} groupControllerPatchRequest PartialGroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerPatch: (id: string, groupControllerPatchRequest: GroupControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a group Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {GroupControllerList200ResponseItemsInner} groupControllerList200ResponseItemsInner Group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerPost: (groupControllerList200ResponseItemsInner: GroupControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GroupApi - functional programming interface
 * @export
 */
export declare const GroupApiFp: (configuration?: Configuration) => {
    /**
     * Delete a group Resource: devices Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a group Resource: devices Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupControllerList200ResponseItemsInner>>;
    /**
     * List groups Resource: devices Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupControllerList200Response>>;
    /**
     * Update a group Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {GroupControllerPatchRequest} groupControllerPatchRequest PartialGroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerPatch(id: string, groupControllerPatchRequest: GroupControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupControllerList200ResponseItemsInner>>;
    /**
     * Create a group Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {GroupControllerList200ResponseItemsInner} groupControllerList200ResponseItemsInner Group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerPost(groupControllerList200ResponseItemsInner: GroupControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupControllerList200ResponseItemsInner>>;
};
/**
 * GroupApi - factory interface
 * @export
 */
export declare const GroupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a group Resource: devices Authorized roles: administrator
     * @summary Delete
     * @param {GroupApiGroupControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerDelete(requestParameters: GroupApiGroupControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a group Resource: devices Authorized roles: viewer
     * @summary Get one
     * @param {GroupApiGroupControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerGetOne(requestParameters: GroupApiGroupControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<GroupControllerList200ResponseItemsInner>;
    /**
     * List groups Resource: devices Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerList(options?: RawAxiosRequestConfig): AxiosPromise<GroupControllerList200Response>;
    /**
     * Update a group Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {GroupApiGroupControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerPatch(requestParameters: GroupApiGroupControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<GroupControllerList200ResponseItemsInner>;
    /**
     * Create a group Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {GroupApiGroupControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupControllerPost(requestParameters: GroupApiGroupControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GroupControllerList200ResponseItemsInner>;
};
/**
 * Request parameters for groupControllerDelete operation in GroupApi.
 * @export
 * @interface GroupApiGroupControllerDeleteRequest
 */
export interface GroupApiGroupControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof GroupApiGroupControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for groupControllerGetOne operation in GroupApi.
 * @export
 * @interface GroupApiGroupControllerGetOneRequest
 */
export interface GroupApiGroupControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof GroupApiGroupControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for groupControllerPatch operation in GroupApi.
 * @export
 * @interface GroupApiGroupControllerPatchRequest
 */
export interface GroupApiGroupControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof GroupApiGroupControllerPatch
     */
    readonly id: string;
    /**
     * PartialGroup
     * @type {GroupControllerPatchRequest}
     * @memberof GroupApiGroupControllerPatch
     */
    readonly groupControllerPatchRequest: GroupControllerPatchRequest;
}
/**
 * Request parameters for groupControllerPost operation in GroupApi.
 * @export
 * @interface GroupApiGroupControllerPostRequest
 */
export interface GroupApiGroupControllerPostRequest {
    /**
     * Group
     * @type {GroupControllerList200ResponseItemsInner}
     * @memberof GroupApiGroupControllerPost
     */
    readonly groupControllerList200ResponseItemsInner: GroupControllerList200ResponseItemsInner;
}
/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export declare class GroupApi extends BaseAPI {
    /**
     * Delete a group Resource: devices Authorized roles: administrator
     * @summary Delete
     * @param {GroupApiGroupControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    groupControllerDelete(requestParameters: GroupApiGroupControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a group Resource: devices Authorized roles: viewer
     * @summary Get one
     * @param {GroupApiGroupControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    groupControllerGetOne(requestParameters: GroupApiGroupControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupControllerList200ResponseItemsInner, any>>;
    /**
     * List groups Resource: devices Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    groupControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupControllerList200Response, any>>;
    /**
     * Update a group Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {GroupApiGroupControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    groupControllerPatch(requestParameters: GroupApiGroupControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupControllerList200ResponseItemsInner, any>>;
    /**
     * Create a group Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {GroupApiGroupControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    groupControllerPost(requestParameters: GroupApiGroupControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupControllerList200ResponseItemsInner, any>>;
}
