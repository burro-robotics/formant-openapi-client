/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AdapterControllerList200Response } from '../formant-models';
import { AdapterControllerList200ResponseItemsInner } from '../formant-models';
import { AdapterControllerPatchRequest } from '../formant-models';
/**
 * AdapterApi - axios parameter creator
 * @export
 */
export declare const AdapterApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an adapter. Resource: integrations Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an adapter by adapter ID. Resource: integrations Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all adapters for this Formant organization. Resource: integrations Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing adapter. Resource: integrations Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {AdapterControllerPatchRequest} adapterControllerPatchRequest PartialAdapter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerPatch: (id: string, adapterControllerPatchRequest: AdapterControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new adapter. Resource: integrations Authorized roles: administrator
     * @summary Post
     * @param {AdapterControllerList200ResponseItemsInner} adapterControllerList200ResponseItemsInner Adapter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerPost: (adapterControllerList200ResponseItemsInner: AdapterControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdapterApi - functional programming interface
 * @export
 */
export declare const AdapterApiFp: (configuration?: Configuration) => {
    /**
     * Delete an adapter. Resource: integrations Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get an adapter by adapter ID. Resource: integrations Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdapterControllerList200ResponseItemsInner>>;
    /**
     * List all adapters for this Formant organization. Resource: integrations Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdapterControllerList200Response>>;
    /**
     * Update an existing adapter. Resource: integrations Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {AdapterControllerPatchRequest} adapterControllerPatchRequest PartialAdapter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerPatch(id: string, adapterControllerPatchRequest: AdapterControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdapterControllerList200ResponseItemsInner>>;
    /**
     * Create a new adapter. Resource: integrations Authorized roles: administrator
     * @summary Post
     * @param {AdapterControllerList200ResponseItemsInner} adapterControllerList200ResponseItemsInner Adapter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerPost(adapterControllerList200ResponseItemsInner: AdapterControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdapterControllerList200ResponseItemsInner>>;
};
/**
 * AdapterApi - factory interface
 * @export
 */
export declare const AdapterApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an adapter. Resource: integrations Authorized roles: administrator
     * @summary Delete
     * @param {AdapterApiAdapterControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerDelete(requestParameters: AdapterApiAdapterControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get an adapter by adapter ID. Resource: integrations Authorized roles: viewer
     * @summary Get one
     * @param {AdapterApiAdapterControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerGetOne(requestParameters: AdapterApiAdapterControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdapterControllerList200ResponseItemsInner>;
    /**
     * List all adapters for this Formant organization. Resource: integrations Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerList(options?: RawAxiosRequestConfig): AxiosPromise<AdapterControllerList200Response>;
    /**
     * Update an existing adapter. Resource: integrations Authorized roles: administrator
     * @summary Patch
     * @param {AdapterApiAdapterControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerPatch(requestParameters: AdapterApiAdapterControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdapterControllerList200ResponseItemsInner>;
    /**
     * Create a new adapter. Resource: integrations Authorized roles: administrator
     * @summary Post
     * @param {AdapterApiAdapterControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adapterControllerPost(requestParameters: AdapterApiAdapterControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdapterControllerList200ResponseItemsInner>;
};
/**
 * Request parameters for adapterControllerDelete operation in AdapterApi.
 * @export
 * @interface AdapterApiAdapterControllerDeleteRequest
 */
export interface AdapterApiAdapterControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof AdapterApiAdapterControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for adapterControllerGetOne operation in AdapterApi.
 * @export
 * @interface AdapterApiAdapterControllerGetOneRequest
 */
export interface AdapterApiAdapterControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof AdapterApiAdapterControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for adapterControllerPatch operation in AdapterApi.
 * @export
 * @interface AdapterApiAdapterControllerPatchRequest
 */
export interface AdapterApiAdapterControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof AdapterApiAdapterControllerPatch
     */
    readonly id: string;
    /**
     * PartialAdapter
     * @type {AdapterControllerPatchRequest}
     * @memberof AdapterApiAdapterControllerPatch
     */
    readonly adapterControllerPatchRequest: AdapterControllerPatchRequest;
}
/**
 * Request parameters for adapterControllerPost operation in AdapterApi.
 * @export
 * @interface AdapterApiAdapterControllerPostRequest
 */
export interface AdapterApiAdapterControllerPostRequest {
    /**
     * Adapter
     * @type {AdapterControllerList200ResponseItemsInner}
     * @memberof AdapterApiAdapterControllerPost
     */
    readonly adapterControllerList200ResponseItemsInner: AdapterControllerList200ResponseItemsInner;
}
/**
 * AdapterApi - object-oriented interface
 * @export
 * @class AdapterApi
 * @extends {BaseAPI}
 */
export declare class AdapterApi extends BaseAPI {
    /**
     * Delete an adapter. Resource: integrations Authorized roles: administrator
     * @summary Delete
     * @param {AdapterApiAdapterControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdapterApi
     */
    adapterControllerDelete(requestParameters: AdapterApiAdapterControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get an adapter by adapter ID. Resource: integrations Authorized roles: viewer
     * @summary Get one
     * @param {AdapterApiAdapterControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdapterApi
     */
    adapterControllerGetOne(requestParameters: AdapterApiAdapterControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AdapterControllerList200ResponseItemsInner, any>>;
    /**
     * List all adapters for this Formant organization. Resource: integrations Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdapterApi
     */
    adapterControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AdapterControllerList200Response, any>>;
    /**
     * Update an existing adapter. Resource: integrations Authorized roles: administrator
     * @summary Patch
     * @param {AdapterApiAdapterControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdapterApi
     */
    adapterControllerPatch(requestParameters: AdapterApiAdapterControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AdapterControllerList200ResponseItemsInner, any>>;
    /**
     * Create a new adapter. Resource: integrations Authorized roles: administrator
     * @summary Post
     * @param {AdapterApiAdapterControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdapterApi
     */
    adapterControllerPost(requestParameters: AdapterApiAdapterControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AdapterControllerList200ResponseItemsInner, any>>;
}
