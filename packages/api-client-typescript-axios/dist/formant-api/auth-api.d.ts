/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AuthControllerChangePasswordRequest } from '../formant-models';
import { AuthControllerCheckSso200Response } from '../formant-models';
import { AuthControllerCheckSsoRequest } from '../formant-models';
import { AuthControllerConfirmForgotPasswordRequest } from '../formant-models';
import { AuthControllerCreateServiceAccount201Response } from '../formant-models';
import { AuthControllerCreateServiceAccountRequest } from '../formant-models';
import { AuthControllerDeviceCredentials200Response } from '../formant-models';
import { AuthControllerForgotPasswordRequest } from '../formant-models';
import { AuthControllerGetFeatures200Response } from '../formant-models';
import { AuthControllerLogin200Response } from '../formant-models';
import { AuthControllerLoginEmbed200Response } from '../formant-models';
import { AuthControllerLoginEmbedRequest } from '../formant-models';
import { AuthControllerLoginGoogleRequest } from '../formant-models';
import { AuthControllerLoginRequest } from '../formant-models';
import { AuthControllerLoginSsoRequest } from '../formant-models';
import { AuthControllerRefreshRequest } from '../formant-models';
import { AuthControllerResendConfirmationCodeRequest } from '../formant-models';
import { AuthControllerResendInvitationRequest } from '../formant-models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Change the password of your Formant account.
     * @summary Change password
     * @param {AuthControllerChangePasswordRequest} authControllerChangePasswordRequest ChangePasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerChangePassword: (authControllerChangePasswordRequest: AuthControllerChangePasswordRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Initiate an SSO login flow to fetch SSO configuration information.
     * @summary Check sso
     * @param {AuthControllerCheckSsoRequest} authControllerCheckSsoRequest CheckSsoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCheckSso: (authControllerCheckSsoRequest: AuthControllerCheckSsoRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Complete the \'forgot password?\' workflow with the confirmation code received in an email.
     * @summary Confirm forgot password
     * @param {AuthControllerConfirmForgotPasswordRequest} authControllerConfirmForgotPasswordRequest ConfirmForgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerConfirmForgotPassword: (authControllerConfirmForgotPasswordRequest: AuthControllerConfirmForgotPasswordRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new service account. Resource: users Authorized roles: administrator
     * @summary Create service account
     * @param {AuthControllerCreateServiceAccountRequest} authControllerCreateServiceAccountRequest CreateServiceAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCreateServiceAccount: (authControllerCreateServiceAccountRequest: AuthControllerCreateServiceAccountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Device Credentials Resource: devices Authorized roles: device
     * @summary Device credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerDeviceCredentials: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Initiate the \'forgot password?\' workflow.
     * @summary Forgot password
     * @param {AuthControllerForgotPasswordRequest} authControllerForgotPasswordRequest ForgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerForgotPassword: (authControllerForgotPasswordRequest: AuthControllerForgotPasswordRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get enabled features Resource: devices Authorized roles: viewer, device
     * @summary Get features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetFeatures: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Log into your Formant organization.
     * @summary Login
     * @param {AuthControllerLoginRequest} authControllerLoginRequest LoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin: (authControllerLoginRequest: AuthControllerLoginRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generate an auth token with limited access based on provided tag set. For use in customer portals.
     * @summary Login embed
     * @param {AuthControllerLoginEmbedRequest} authControllerLoginEmbedRequest LoginEmbedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginEmbed: (authControllerLoginEmbedRequest: AuthControllerLoginEmbedRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Log in with external token.
     * @summary Login external
     * @param {AuthControllerLoginSsoRequest} authControllerLoginSsoRequest ExternalLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginExternal: (authControllerLoginSsoRequest: AuthControllerLoginSsoRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Log in with a Google token.
     * @summary Login google
     * @param {AuthControllerLoginGoogleRequest} authControllerLoginGoogleRequest GoogleLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginGoogle: (authControllerLoginGoogleRequest: AuthControllerLoginGoogleRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Log in with an SSO token.
     * @summary Login sso
     * @param {AuthControllerLoginSsoRequest} authControllerLoginSsoRequest ExternalLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginSso: (authControllerLoginSsoRequest: AuthControllerLoginSsoRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Refresh
     * @summary Refresh
     * @param {AuthControllerRefreshRequest} authControllerRefreshRequest RefreshRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh: (authControllerRefreshRequest: AuthControllerRefreshRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Resend the confirmation code to join a Formant organization.
     * @summary Resend confirmation code
     * @param {AuthControllerResendConfirmationCodeRequest} authControllerResendConfirmationCodeRequest ResendConfirmationCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResendConfirmationCode: (authControllerResendConfirmationCodeRequest: AuthControllerResendConfirmationCodeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Resend the invitation to your Formant organization.
     * @summary Resend invitation
     * @param {AuthControllerResendInvitationRequest} authControllerResendInvitationRequest ResendInvitationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResendInvitation: (authControllerResendInvitationRequest: AuthControllerResendInvitationRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     * Change the password of your Formant account.
     * @summary Change password
     * @param {AuthControllerChangePasswordRequest} authControllerChangePasswordRequest ChangePasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerChangePassword(authControllerChangePasswordRequest: AuthControllerChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Initiate an SSO login flow to fetch SSO configuration information.
     * @summary Check sso
     * @param {AuthControllerCheckSsoRequest} authControllerCheckSsoRequest CheckSsoRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCheckSso(authControllerCheckSsoRequest: AuthControllerCheckSsoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerCheckSso200Response>>;
    /**
     * Complete the \'forgot password?\' workflow with the confirmation code received in an email.
     * @summary Confirm forgot password
     * @param {AuthControllerConfirmForgotPasswordRequest} authControllerConfirmForgotPasswordRequest ConfirmForgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerConfirmForgotPassword(authControllerConfirmForgotPasswordRequest: AuthControllerConfirmForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a new service account. Resource: users Authorized roles: administrator
     * @summary Create service account
     * @param {AuthControllerCreateServiceAccountRequest} authControllerCreateServiceAccountRequest CreateServiceAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCreateServiceAccount(authControllerCreateServiceAccountRequest: AuthControllerCreateServiceAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerCreateServiceAccount201Response>>;
    /**
     * Device Credentials Resource: devices Authorized roles: device
     * @summary Device credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerDeviceCredentials(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerDeviceCredentials200Response>>;
    /**
     * Initiate the \'forgot password?\' workflow.
     * @summary Forgot password
     * @param {AuthControllerForgotPasswordRequest} authControllerForgotPasswordRequest ForgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerForgotPassword(authControllerForgotPasswordRequest: AuthControllerForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get enabled features Resource: devices Authorized roles: viewer, device
     * @summary Get features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetFeatures(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerGetFeatures200Response>>;
    /**
     * Log into your Formant organization.
     * @summary Login
     * @param {AuthControllerLoginRequest} authControllerLoginRequest LoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin(authControllerLoginRequest: AuthControllerLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerLogin200Response>>;
    /**
     * Generate an auth token with limited access based on provided tag set. For use in customer portals.
     * @summary Login embed
     * @param {AuthControllerLoginEmbedRequest} authControllerLoginEmbedRequest LoginEmbedRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginEmbed(authControllerLoginEmbedRequest: AuthControllerLoginEmbedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerLoginEmbed200Response>>;
    /**
     * Log in with external token.
     * @summary Login external
     * @param {AuthControllerLoginSsoRequest} authControllerLoginSsoRequest ExternalLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginExternal(authControllerLoginSsoRequest: AuthControllerLoginSsoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerLogin200Response>>;
    /**
     * Log in with a Google token.
     * @summary Login google
     * @param {AuthControllerLoginGoogleRequest} authControllerLoginGoogleRequest GoogleLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginGoogle(authControllerLoginGoogleRequest: AuthControllerLoginGoogleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerLogin200Response>>;
    /**
     * Log in with an SSO token.
     * @summary Login sso
     * @param {AuthControllerLoginSsoRequest} authControllerLoginSsoRequest ExternalLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginSso(authControllerLoginSsoRequest: AuthControllerLoginSsoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerLogin200Response>>;
    /**
     * Refresh
     * @summary Refresh
     * @param {AuthControllerRefreshRequest} authControllerRefreshRequest RefreshRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh(authControllerRefreshRequest: AuthControllerRefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerLogin200Response>>;
    /**
     * Resend the confirmation code to join a Formant organization.
     * @summary Resend confirmation code
     * @param {AuthControllerResendConfirmationCodeRequest} authControllerResendConfirmationCodeRequest ResendConfirmationCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResendConfirmationCode(authControllerResendConfirmationCodeRequest: AuthControllerResendConfirmationCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Resend the invitation to your Formant organization.
     * @summary Resend invitation
     * @param {AuthControllerResendInvitationRequest} authControllerResendInvitationRequest ResendInvitationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResendInvitation(authControllerResendInvitationRequest: AuthControllerResendInvitationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Change the password of your Formant account.
     * @summary Change password
     * @param {AuthApiAuthControllerChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerChangePassword(requestParameters: AuthApiAuthControllerChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Initiate an SSO login flow to fetch SSO configuration information.
     * @summary Check sso
     * @param {AuthApiAuthControllerCheckSsoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCheckSso(requestParameters: AuthApiAuthControllerCheckSsoRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerCheckSso200Response>;
    /**
     * Complete the \'forgot password?\' workflow with the confirmation code received in an email.
     * @summary Confirm forgot password
     * @param {AuthApiAuthControllerConfirmForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerConfirmForgotPassword(requestParameters: AuthApiAuthControllerConfirmForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Create a new service account. Resource: users Authorized roles: administrator
     * @summary Create service account
     * @param {AuthApiAuthControllerCreateServiceAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCreateServiceAccount(requestParameters: AuthApiAuthControllerCreateServiceAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerCreateServiceAccount201Response>;
    /**
     * Device Credentials Resource: devices Authorized roles: device
     * @summary Device credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerDeviceCredentials(options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerDeviceCredentials200Response>;
    /**
     * Initiate the \'forgot password?\' workflow.
     * @summary Forgot password
     * @param {AuthApiAuthControllerForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerForgotPassword(requestParameters: AuthApiAuthControllerForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get enabled features Resource: devices Authorized roles: viewer, device
     * @summary Get features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetFeatures(options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerGetFeatures200Response>;
    /**
     * Log into your Formant organization.
     * @summary Login
     * @param {AuthApiAuthControllerLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin(requestParameters: AuthApiAuthControllerLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerLogin200Response>;
    /**
     * Generate an auth token with limited access based on provided tag set. For use in customer portals.
     * @summary Login embed
     * @param {AuthApiAuthControllerLoginEmbedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginEmbed(requestParameters: AuthApiAuthControllerLoginEmbedRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerLoginEmbed200Response>;
    /**
     * Log in with external token.
     * @summary Login external
     * @param {AuthApiAuthControllerLoginExternalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginExternal(requestParameters: AuthApiAuthControllerLoginExternalRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerLogin200Response>;
    /**
     * Log in with a Google token.
     * @summary Login google
     * @param {AuthApiAuthControllerLoginGoogleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginGoogle(requestParameters: AuthApiAuthControllerLoginGoogleRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerLogin200Response>;
    /**
     * Log in with an SSO token.
     * @summary Login sso
     * @param {AuthApiAuthControllerLoginSsoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginSso(requestParameters: AuthApiAuthControllerLoginSsoRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerLogin200Response>;
    /**
     * Refresh
     * @summary Refresh
     * @param {AuthApiAuthControllerRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh(requestParameters: AuthApiAuthControllerRefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerLogin200Response>;
    /**
     * Resend the confirmation code to join a Formant organization.
     * @summary Resend confirmation code
     * @param {AuthApiAuthControllerResendConfirmationCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResendConfirmationCode(requestParameters: AuthApiAuthControllerResendConfirmationCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Resend the invitation to your Formant organization.
     * @summary Resend invitation
     * @param {AuthApiAuthControllerResendInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResendInvitation(requestParameters: AuthApiAuthControllerResendInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for authControllerChangePassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerChangePasswordRequest
 */
export interface AuthApiAuthControllerChangePasswordRequest {
    /**
     * ChangePasswordRequest
     * @type {AuthControllerChangePasswordRequest}
     * @memberof AuthApiAuthControllerChangePassword
     */
    readonly authControllerChangePasswordRequest: AuthControllerChangePasswordRequest;
}
/**
 * Request parameters for authControllerCheckSso operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerCheckSsoRequest
 */
export interface AuthApiAuthControllerCheckSsoRequest {
    /**
     * CheckSsoRequest
     * @type {AuthControllerCheckSsoRequest}
     * @memberof AuthApiAuthControllerCheckSso
     */
    readonly authControllerCheckSsoRequest: AuthControllerCheckSsoRequest;
}
/**
 * Request parameters for authControllerConfirmForgotPassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerConfirmForgotPasswordRequest
 */
export interface AuthApiAuthControllerConfirmForgotPasswordRequest {
    /**
     * ConfirmForgotPasswordRequest
     * @type {AuthControllerConfirmForgotPasswordRequest}
     * @memberof AuthApiAuthControllerConfirmForgotPassword
     */
    readonly authControllerConfirmForgotPasswordRequest: AuthControllerConfirmForgotPasswordRequest;
}
/**
 * Request parameters for authControllerCreateServiceAccount operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerCreateServiceAccountRequest
 */
export interface AuthApiAuthControllerCreateServiceAccountRequest {
    /**
     * CreateServiceAccountRequest
     * @type {AuthControllerCreateServiceAccountRequest}
     * @memberof AuthApiAuthControllerCreateServiceAccount
     */
    readonly authControllerCreateServiceAccountRequest: AuthControllerCreateServiceAccountRequest;
}
/**
 * Request parameters for authControllerForgotPassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerForgotPasswordRequest
 */
export interface AuthApiAuthControllerForgotPasswordRequest {
    /**
     * ForgotPasswordRequest
     * @type {AuthControllerForgotPasswordRequest}
     * @memberof AuthApiAuthControllerForgotPassword
     */
    readonly authControllerForgotPasswordRequest: AuthControllerForgotPasswordRequest;
}
/**
 * Request parameters for authControllerLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerLoginRequest
 */
export interface AuthApiAuthControllerLoginRequest {
    /**
     * LoginRequest
     * @type {AuthControllerLoginRequest}
     * @memberof AuthApiAuthControllerLogin
     */
    readonly authControllerLoginRequest: AuthControllerLoginRequest;
}
/**
 * Request parameters for authControllerLoginEmbed operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerLoginEmbedRequest
 */
export interface AuthApiAuthControllerLoginEmbedRequest {
    /**
     * LoginEmbedRequest
     * @type {AuthControllerLoginEmbedRequest}
     * @memberof AuthApiAuthControllerLoginEmbed
     */
    readonly authControllerLoginEmbedRequest: AuthControllerLoginEmbedRequest;
}
/**
 * Request parameters for authControllerLoginExternal operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerLoginExternalRequest
 */
export interface AuthApiAuthControllerLoginExternalRequest {
    /**
     * ExternalLoginRequest
     * @type {AuthControllerLoginSsoRequest}
     * @memberof AuthApiAuthControllerLoginExternal
     */
    readonly authControllerLoginSsoRequest: AuthControllerLoginSsoRequest;
}
/**
 * Request parameters for authControllerLoginGoogle operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerLoginGoogleRequest
 */
export interface AuthApiAuthControllerLoginGoogleRequest {
    /**
     * GoogleLoginRequest
     * @type {AuthControllerLoginGoogleRequest}
     * @memberof AuthApiAuthControllerLoginGoogle
     */
    readonly authControllerLoginGoogleRequest: AuthControllerLoginGoogleRequest;
}
/**
 * Request parameters for authControllerLoginSso operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerLoginSsoRequest
 */
export interface AuthApiAuthControllerLoginSsoRequest {
    /**
     * ExternalLoginRequest
     * @type {AuthControllerLoginSsoRequest}
     * @memberof AuthApiAuthControllerLoginSso
     */
    readonly authControllerLoginSsoRequest: AuthControllerLoginSsoRequest;
}
/**
 * Request parameters for authControllerRefresh operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerRefreshRequest
 */
export interface AuthApiAuthControllerRefreshRequest {
    /**
     * RefreshRequest
     * @type {AuthControllerRefreshRequest}
     * @memberof AuthApiAuthControllerRefresh
     */
    readonly authControllerRefreshRequest: AuthControllerRefreshRequest;
}
/**
 * Request parameters for authControllerResendConfirmationCode operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerResendConfirmationCodeRequest
 */
export interface AuthApiAuthControllerResendConfirmationCodeRequest {
    /**
     * ResendConfirmationCodeRequest
     * @type {AuthControllerResendConfirmationCodeRequest}
     * @memberof AuthApiAuthControllerResendConfirmationCode
     */
    readonly authControllerResendConfirmationCodeRequest: AuthControllerResendConfirmationCodeRequest;
}
/**
 * Request parameters for authControllerResendInvitation operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerResendInvitationRequest
 */
export interface AuthApiAuthControllerResendInvitationRequest {
    /**
     * ResendInvitationRequest
     * @type {AuthControllerResendInvitationRequest}
     * @memberof AuthApiAuthControllerResendInvitation
     */
    readonly authControllerResendInvitationRequest: AuthControllerResendInvitationRequest;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     * Change the password of your Formant account.
     * @summary Change password
     * @param {AuthApiAuthControllerChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerChangePassword(requestParameters: AuthApiAuthControllerChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Initiate an SSO login flow to fetch SSO configuration information.
     * @summary Check sso
     * @param {AuthApiAuthControllerCheckSsoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerCheckSso(requestParameters: AuthApiAuthControllerCheckSsoRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerCheckSso200Response, any>>;
    /**
     * Complete the \'forgot password?\' workflow with the confirmation code received in an email.
     * @summary Confirm forgot password
     * @param {AuthApiAuthControllerConfirmForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerConfirmForgotPassword(requestParameters: AuthApiAuthControllerConfirmForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a new service account. Resource: users Authorized roles: administrator
     * @summary Create service account
     * @param {AuthApiAuthControllerCreateServiceAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerCreateServiceAccount(requestParameters: AuthApiAuthControllerCreateServiceAccountRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerCreateServiceAccount201Response, any>>;
    /**
     * Device Credentials Resource: devices Authorized roles: device
     * @summary Device credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerDeviceCredentials(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerDeviceCredentials200Response, any>>;
    /**
     * Initiate the \'forgot password?\' workflow.
     * @summary Forgot password
     * @param {AuthApiAuthControllerForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerForgotPassword(requestParameters: AuthApiAuthControllerForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get enabled features Resource: devices Authorized roles: viewer, device
     * @summary Get features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGetFeatures(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerGetFeatures200Response, any>>;
    /**
     * Log into your Formant organization.
     * @summary Login
     * @param {AuthApiAuthControllerLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLogin(requestParameters: AuthApiAuthControllerLoginRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerLogin200Response, any>>;
    /**
     * Generate an auth token with limited access based on provided tag set. For use in customer portals.
     * @summary Login embed
     * @param {AuthApiAuthControllerLoginEmbedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLoginEmbed(requestParameters: AuthApiAuthControllerLoginEmbedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerLoginEmbed200Response, any>>;
    /**
     * Log in with external token.
     * @summary Login external
     * @param {AuthApiAuthControllerLoginExternalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLoginExternal(requestParameters: AuthApiAuthControllerLoginExternalRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerLogin200Response, any>>;
    /**
     * Log in with a Google token.
     * @summary Login google
     * @param {AuthApiAuthControllerLoginGoogleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLoginGoogle(requestParameters: AuthApiAuthControllerLoginGoogleRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerLogin200Response, any>>;
    /**
     * Log in with an SSO token.
     * @summary Login sso
     * @param {AuthApiAuthControllerLoginSsoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLoginSso(requestParameters: AuthApiAuthControllerLoginSsoRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerLogin200Response, any>>;
    /**
     * Refresh
     * @summary Refresh
     * @param {AuthApiAuthControllerRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerRefresh(requestParameters: AuthApiAuthControllerRefreshRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerLogin200Response, any>>;
    /**
     * Resend the confirmation code to join a Formant organization.
     * @summary Resend confirmation code
     * @param {AuthApiAuthControllerResendConfirmationCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerResendConfirmationCode(requestParameters: AuthApiAuthControllerResendConfirmationCodeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Resend the invitation to your Formant organization.
     * @summary Resend invitation
     * @param {AuthApiAuthControllerResendInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerResendInvitation(requestParameters: AuthApiAuthControllerResendInvitationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
