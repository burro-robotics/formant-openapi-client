/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { DeviceControllerFilterRequest } from '../formant-models';
import { DeviceDetailsControllerGetAll200Response } from '../formant-models';
import { DeviceDetailsControllerGetAll200ResponseItemsInner } from '../formant-models';
/**
 * DeviceDetailsApi - axios parameter creator
 * @export
 */
export declare const DeviceDetailsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get device details by querying devices. Resource: devices Authorized roles: viewer
     * @summary Get all
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceDetailsControllerGetAll: (deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get device details by device ID. Resource: devices Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceDetailsControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DeviceDetailsApi - functional programming interface
 * @export
 */
export declare const DeviceDetailsApiFp: (configuration?: Configuration) => {
    /**
     * Get device details by querying devices. Resource: devices Authorized roles: viewer
     * @summary Get all
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceDetailsControllerGetAll(deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDetailsControllerGetAll200Response>>;
    /**
     * Get device details by device ID. Resource: devices Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceDetailsControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDetailsControllerGetAll200ResponseItemsInner>>;
};
/**
 * DeviceDetailsApi - factory interface
 * @export
 */
export declare const DeviceDetailsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get device details by querying devices. Resource: devices Authorized roles: viewer
     * @summary Get all
     * @param {DeviceDetailsApiDeviceDetailsControllerGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceDetailsControllerGetAll(requestParameters?: DeviceDetailsApiDeviceDetailsControllerGetAllRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceDetailsControllerGetAll200Response>;
    /**
     * Get device details by device ID. Resource: devices Authorized roles: viewer
     * @summary Get one
     * @param {DeviceDetailsApiDeviceDetailsControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceDetailsControllerGetOne(requestParameters: DeviceDetailsApiDeviceDetailsControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceDetailsControllerGetAll200ResponseItemsInner>;
};
/**
 * Request parameters for deviceDetailsControllerGetAll operation in DeviceDetailsApi.
 * @export
 * @interface DeviceDetailsApiDeviceDetailsControllerGetAllRequest
 */
export interface DeviceDetailsApiDeviceDetailsControllerGetAllRequest {
    /**
     * DeviceQuery
     * @type {DeviceControllerFilterRequest}
     * @memberof DeviceDetailsApiDeviceDetailsControllerGetAll
     */
    readonly deviceControllerFilterRequest?: DeviceControllerFilterRequest;
}
/**
 * Request parameters for deviceDetailsControllerGetOne operation in DeviceDetailsApi.
 * @export
 * @interface DeviceDetailsApiDeviceDetailsControllerGetOneRequest
 */
export interface DeviceDetailsApiDeviceDetailsControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceDetailsApiDeviceDetailsControllerGetOne
     */
    readonly id: string;
}
/**
 * DeviceDetailsApi - object-oriented interface
 * @export
 * @class DeviceDetailsApi
 * @extends {BaseAPI}
 */
export declare class DeviceDetailsApi extends BaseAPI {
    /**
     * Get device details by querying devices. Resource: devices Authorized roles: viewer
     * @summary Get all
     * @param {DeviceDetailsApiDeviceDetailsControllerGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceDetailsApi
     */
    deviceDetailsControllerGetAll(requestParameters?: DeviceDetailsApiDeviceDetailsControllerGetAllRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceDetailsControllerGetAll200Response, any>>;
    /**
     * Get device details by device ID. Resource: devices Authorized roles: viewer
     * @summary Get one
     * @param {DeviceDetailsApiDeviceDetailsControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceDetailsApi
     */
    deviceDetailsControllerGetOne(requestParameters: DeviceDetailsApiDeviceDetailsControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceDetailsControllerGetAll200ResponseItemsInner, any>>;
}
