"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceApi = exports.DeviceApiFactory = exports.DeviceApiFp = exports.DeviceApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * DeviceApi - axios parameter creator
 * @export
 */
var DeviceApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Count devices Resource: devices Authorized roles: viewer
         * @summary Count
         * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCount: function (deviceControllerFilterRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/devices/count";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceControllerFilterRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Disable a device. Resource: devices Authorized roles: administrator
         * @summary Disable
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerDisable: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerDisable', 'id', id);
                            localVarPath = "/devices/{id}/disable"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Query devices by name and/or tags Resource: devices Authorized roles: viewer
         * @summary Filter
         * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerFilter: function (deviceControllerFilterRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/devices/filter";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceControllerFilterRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Generate a device provisioning token. Resource: devices Authorized roles: administrator
         * @summary Generate device provisioning token
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGenerateDeviceProvisioningToken: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerGenerateDeviceProvisioningToken', 'id', id);
                            localVarPath = "/devices/{id}/provisioning-token"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List device commands Resource: commands Authorized roles: device
         * @summary Get commands
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetCommands: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerGetCommands', 'id', id);
                            localVarPath = "/devices/{id}/commands"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a device configuration Resource: devices Authorized roles: viewer
         * @summary Get configuration
         * @param {string} id
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetConfiguration: function (id, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerGetConfiguration', 'id', id);
                            // verify required parameter 'version' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerGetConfiguration', 'version', version);
                            localVarPath = "/devices/{id}/configurations/{version}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("version", "}"), encodeURIComponent(String(version)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get GeoIP for device Resource: devices Authorized roles: device
         * @summary Get geo ip
         * @param {string} id
         * @param {string} [xForwardedFor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetGeoIp: function (id, xForwardedFor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerGetGeoIp', 'id', id);
                            localVarPath = "/devices/{id}/geoip"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            if (xForwardedFor != null) {
                                localVarHeaderParameter['x-forwarded-for'] = String(xForwardedFor);
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a device by device ID. Resource: devices Authorized roles: viewer, device
         * @summary Get one
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetOne: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerGetOne', 'id', id);
                            localVarPath = "/devices/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get tags across all devices Resource: devices Authorized roles: viewer
         * @summary Get tags
         * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetTags: function (deviceControllerFilterRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/devices/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceControllerFilterRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for agent version updates Resource: devices Authorized roles: device
         * @summary Get updated agent version
         * @param {string} id
         * @param {string} [reportedAgentVersion]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetUpdatedAgentVersion: function (id, reportedAgentVersion, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerGetUpdatedAgentVersion', 'id', id);
                            localVarPath = "/devices/{id}/updated-agent-version"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            if (reportedAgentVersion !== undefined) {
                                localVarQueryParameter['reportedAgentVersion'] = reportedAgentVersion;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for updated device configuration Resource: devices Authorized roles: device
         * @summary Get updated configuration
         * @param {string} id
         * @param {string} [appVersion]
         * @param {number} [reportedConfigurationVersion]
         * @param {number} [agentWallClockTimestamp]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetUpdatedConfiguration: function (id, appVersion, reportedConfigurationVersion, agentWallClockTimestamp, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerGetUpdatedConfiguration', 'id', id);
                            localVarPath = "/devices/{id}/updated-configuration"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            if (reportedConfigurationVersion !== undefined) {
                                localVarQueryParameter['reportedConfigurationVersion'] = reportedConfigurationVersion;
                            }
                            if (agentWallClockTimestamp !== undefined) {
                                localVarQueryParameter['agentWallClockTimestamp'] = agentWallClockTimestamp;
                            }
                            if (appVersion != null) {
                                localVarHeaderParameter['app-version'] = String(appVersion);
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List device views Resource: views Authorized roles: device
         * @summary Get views
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetViews: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerGetViews', 'id', id);
                            localVarPath = "/devices/{id}/views"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update an existing device. Resource: devices Authorized roles: administrator, device
         * @summary Patch
         * @param {string} id
         * @param {DeviceControllerPatchRequest} deviceControllerPatchRequest PartialDevice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPatch: function (id, deviceControllerPatchRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerPatch', 'id', id);
                            // verify required parameter 'deviceControllerPatchRequest' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerPatch', 'deviceControllerPatchRequest', deviceControllerPatchRequest);
                            localVarPath = "/devices/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceControllerPatchRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a new device. Resource: devices Authorized roles: administrator
         * @summary Post
         * @param {DeviceControllerPostRequest} deviceControllerPostRequest Device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPost: function (deviceControllerPostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceControllerPostRequest' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerPost', 'deviceControllerPostRequest', deviceControllerPostRequest);
                            localVarPath = "/devices";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceControllerPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a device configuration Resource: devices Authorized roles: administrator
         * @summary Post configuration
         * @param {string} id
         * @param {DeviceControllerPutConfigurationRequest | null} deviceControllerPutConfigurationRequest DeviceConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPostConfiguration: function (id, deviceControllerPutConfigurationRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerPostConfiguration', 'id', id);
                            // verify required parameter 'deviceControllerPutConfigurationRequest' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerPostConfiguration', 'deviceControllerPutConfigurationRequest', deviceControllerPutConfigurationRequest);
                            localVarPath = "/devices/{id}/configurations"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceControllerPutConfigurationRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Provision an existing device.
         * @summary Provision device
         * @param {DeviceControllerProvisionDeviceRequest} deviceControllerProvisionDeviceRequest DeviceProvisioningRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerProvisionDevice: function (deviceControllerProvisionDeviceRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'deviceControllerProvisionDeviceRequest' is not null or undefined
                    (0, common_1.assertParamExists)('deviceControllerProvisionDevice', 'deviceControllerProvisionDeviceRequest', deviceControllerProvisionDeviceRequest);
                    localVarPath = "/devices/provision";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceControllerProvisionDeviceRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Update a device\'s configuration. Resource: devices Authorized roles: administrator
         * @summary Put configuration
         * @param {string} id
         * @param {DeviceControllerPutConfigurationRequest | null} deviceControllerPutConfigurationRequest DeviceConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPutConfiguration: function (id, deviceControllerPutConfigurationRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerPutConfiguration', 'id', id);
                            // verify required parameter 'deviceControllerPutConfigurationRequest' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerPutConfiguration', 'deviceControllerPutConfigurationRequest', deviceControllerPutConfigurationRequest);
                            localVarPath = "/devices/{id}/configuration"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceControllerPutConfigurationRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Query devices by name and/or tags Resource: devices Authorized roles: viewer
         * @summary Query
         * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerQuery: function (deviceControllerFilterRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/devices/query";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceControllerFilterRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Unprovision a device by device ID. Resource: devices Authorized roles: administrator
         * @summary Unprovision device
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerUnprovisionDevice: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerUnprovisionDevice', 'id', id);
                            localVarPath = "/devices/{id}/unprovision"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Validate a device stream configuration Resource: devices Authorized roles: administrator
         * @summary Validate stream configuration
         * @param {DeviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner} deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner DeviceStreamConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerValidateStreamConfiguration: function (deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner' is not null or undefined
                            (0, common_1.assertParamExists)('deviceControllerValidateStreamConfiguration', 'deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner', deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner);
                            localVarPath = "/devices/validate-stream-configuration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DeviceApiAxiosParamCreator = DeviceApiAxiosParamCreator;
/**
 * DeviceApi - functional programming interface
 * @export
 */
var DeviceApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DeviceApiAxiosParamCreator)(configuration);
    return {
        /**
         * Count devices Resource: devices Authorized roles: viewer
         * @summary Count
         * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCount: function (deviceControllerFilterRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerCount(deviceControllerFilterRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerCount']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Disable a device. Resource: devices Authorized roles: administrator
         * @summary Disable
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerDisable: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerDisable(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerDisable']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Query devices by name and/or tags Resource: devices Authorized roles: viewer
         * @summary Filter
         * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerFilter: function (deviceControllerFilterRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerFilter(deviceControllerFilterRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerFilter']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Generate a device provisioning token. Resource: devices Authorized roles: administrator
         * @summary Generate device provisioning token
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGenerateDeviceProvisioningToken: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerGenerateDeviceProvisioningToken(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerGenerateDeviceProvisioningToken']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List device commands Resource: commands Authorized roles: device
         * @summary Get commands
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetCommands: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerGetCommands(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerGetCommands']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a device configuration Resource: devices Authorized roles: viewer
         * @summary Get configuration
         * @param {string} id
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetConfiguration: function (id, version, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerGetConfiguration(id, version, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerGetConfiguration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get GeoIP for device Resource: devices Authorized roles: device
         * @summary Get geo ip
         * @param {string} id
         * @param {string} [xForwardedFor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetGeoIp: function (id, xForwardedFor, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerGetGeoIp(id, xForwardedFor, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerGetGeoIp']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a device by device ID. Resource: devices Authorized roles: viewer, device
         * @summary Get one
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetOne: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerGetOne(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerGetOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get tags across all devices Resource: devices Authorized roles: viewer
         * @summary Get tags
         * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetTags: function (deviceControllerFilterRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerGetTags(deviceControllerFilterRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerGetTags']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for agent version updates Resource: devices Authorized roles: device
         * @summary Get updated agent version
         * @param {string} id
         * @param {string} [reportedAgentVersion]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetUpdatedAgentVersion: function (id, reportedAgentVersion, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerGetUpdatedAgentVersion(id, reportedAgentVersion, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerGetUpdatedAgentVersion']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for updated device configuration Resource: devices Authorized roles: device
         * @summary Get updated configuration
         * @param {string} id
         * @param {string} [appVersion]
         * @param {number} [reportedConfigurationVersion]
         * @param {number} [agentWallClockTimestamp]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetUpdatedConfiguration: function (id, appVersion, reportedConfigurationVersion, agentWallClockTimestamp, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerGetUpdatedConfiguration(id, appVersion, reportedConfigurationVersion, agentWallClockTimestamp, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerGetUpdatedConfiguration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List device views Resource: views Authorized roles: device
         * @summary Get views
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetViews: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerGetViews(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerGetViews']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update an existing device. Resource: devices Authorized roles: administrator, device
         * @summary Patch
         * @param {string} id
         * @param {DeviceControllerPatchRequest} deviceControllerPatchRequest PartialDevice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPatch: function (id, deviceControllerPatchRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerPatch(id, deviceControllerPatchRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerPatch']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a new device. Resource: devices Authorized roles: administrator
         * @summary Post
         * @param {DeviceControllerPostRequest} deviceControllerPostRequest Device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPost: function (deviceControllerPostRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerPost(deviceControllerPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a device configuration Resource: devices Authorized roles: administrator
         * @summary Post configuration
         * @param {string} id
         * @param {DeviceControllerPutConfigurationRequest | null} deviceControllerPutConfigurationRequest DeviceConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPostConfiguration: function (id, deviceControllerPutConfigurationRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerPostConfiguration(id, deviceControllerPutConfigurationRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerPostConfiguration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Provision an existing device.
         * @summary Provision device
         * @param {DeviceControllerProvisionDeviceRequest} deviceControllerProvisionDeviceRequest DeviceProvisioningRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerProvisionDevice: function (deviceControllerProvisionDeviceRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerProvisionDevice(deviceControllerProvisionDeviceRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerProvisionDevice']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a device\'s configuration. Resource: devices Authorized roles: administrator
         * @summary Put configuration
         * @param {string} id
         * @param {DeviceControllerPutConfigurationRequest | null} deviceControllerPutConfigurationRequest DeviceConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPutConfiguration: function (id, deviceControllerPutConfigurationRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerPutConfiguration(id, deviceControllerPutConfigurationRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerPutConfiguration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Query devices by name and/or tags Resource: devices Authorized roles: viewer
         * @summary Query
         * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerQuery: function (deviceControllerFilterRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerQuery(deviceControllerFilterRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerQuery']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Unprovision a device by device ID. Resource: devices Authorized roles: administrator
         * @summary Unprovision device
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerUnprovisionDevice: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerUnprovisionDevice(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerUnprovisionDevice']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Validate a device stream configuration Resource: devices Authorized roles: administrator
         * @summary Validate stream configuration
         * @param {DeviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner} deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner DeviceStreamConfiguration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerValidateStreamConfiguration: function (deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceControllerValidateStreamConfiguration(deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceApi.deviceControllerValidateStreamConfiguration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DeviceApiFp = DeviceApiFp;
/**
 * DeviceApi - factory interface
 * @export
 */
var DeviceApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DeviceApiFp)(configuration);
    return {
        /**
         * Count devices Resource: devices Authorized roles: viewer
         * @summary Count
         * @param {DeviceApiDeviceControllerCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerCount: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.deviceControllerCount(requestParameters.deviceControllerFilterRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Disable a device. Resource: devices Authorized roles: administrator
         * @summary Disable
         * @param {DeviceApiDeviceControllerDisableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerDisable: function (requestParameters, options) {
            return localVarFp.deviceControllerDisable(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query devices by name and/or tags Resource: devices Authorized roles: viewer
         * @summary Filter
         * @param {DeviceApiDeviceControllerFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerFilter: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.deviceControllerFilter(requestParameters.deviceControllerFilterRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Generate a device provisioning token. Resource: devices Authorized roles: administrator
         * @summary Generate device provisioning token
         * @param {DeviceApiDeviceControllerGenerateDeviceProvisioningTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGenerateDeviceProvisioningToken: function (requestParameters, options) {
            return localVarFp.deviceControllerGenerateDeviceProvisioningToken(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List device commands Resource: commands Authorized roles: device
         * @summary Get commands
         * @param {DeviceApiDeviceControllerGetCommandsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetCommands: function (requestParameters, options) {
            return localVarFp.deviceControllerGetCommands(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a device configuration Resource: devices Authorized roles: viewer
         * @summary Get configuration
         * @param {DeviceApiDeviceControllerGetConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetConfiguration: function (requestParameters, options) {
            return localVarFp.deviceControllerGetConfiguration(requestParameters.id, requestParameters.version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get GeoIP for device Resource: devices Authorized roles: device
         * @summary Get geo ip
         * @param {DeviceApiDeviceControllerGetGeoIpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetGeoIp: function (requestParameters, options) {
            return localVarFp.deviceControllerGetGeoIp(requestParameters.id, requestParameters.xForwardedFor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a device by device ID. Resource: devices Authorized roles: viewer, device
         * @summary Get one
         * @param {DeviceApiDeviceControllerGetOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetOne: function (requestParameters, options) {
            return localVarFp.deviceControllerGetOne(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get tags across all devices Resource: devices Authorized roles: viewer
         * @summary Get tags
         * @param {DeviceApiDeviceControllerGetTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetTags: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.deviceControllerGetTags(requestParameters.deviceControllerFilterRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for agent version updates Resource: devices Authorized roles: device
         * @summary Get updated agent version
         * @param {DeviceApiDeviceControllerGetUpdatedAgentVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetUpdatedAgentVersion: function (requestParameters, options) {
            return localVarFp.deviceControllerGetUpdatedAgentVersion(requestParameters.id, requestParameters.reportedAgentVersion, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for updated device configuration Resource: devices Authorized roles: device
         * @summary Get updated configuration
         * @param {DeviceApiDeviceControllerGetUpdatedConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetUpdatedConfiguration: function (requestParameters, options) {
            return localVarFp.deviceControllerGetUpdatedConfiguration(requestParameters.id, requestParameters.appVersion, requestParameters.reportedConfigurationVersion, requestParameters.agentWallClockTimestamp, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List device views Resource: views Authorized roles: device
         * @summary Get views
         * @param {DeviceApiDeviceControllerGetViewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerGetViews: function (requestParameters, options) {
            return localVarFp.deviceControllerGetViews(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update an existing device. Resource: devices Authorized roles: administrator, device
         * @summary Patch
         * @param {DeviceApiDeviceControllerPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPatch: function (requestParameters, options) {
            return localVarFp.deviceControllerPatch(requestParameters.id, requestParameters.deviceControllerPatchRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a new device. Resource: devices Authorized roles: administrator
         * @summary Post
         * @param {DeviceApiDeviceControllerPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPost: function (requestParameters, options) {
            return localVarFp.deviceControllerPost(requestParameters.deviceControllerPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a device configuration Resource: devices Authorized roles: administrator
         * @summary Post configuration
         * @param {DeviceApiDeviceControllerPostConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPostConfiguration: function (requestParameters, options) {
            return localVarFp.deviceControllerPostConfiguration(requestParameters.id, requestParameters.deviceControllerPutConfigurationRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Provision an existing device.
         * @summary Provision device
         * @param {DeviceApiDeviceControllerProvisionDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerProvisionDevice: function (requestParameters, options) {
            return localVarFp.deviceControllerProvisionDevice(requestParameters.deviceControllerProvisionDeviceRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a device\'s configuration. Resource: devices Authorized roles: administrator
         * @summary Put configuration
         * @param {DeviceApiDeviceControllerPutConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerPutConfiguration: function (requestParameters, options) {
            return localVarFp.deviceControllerPutConfiguration(requestParameters.id, requestParameters.deviceControllerPutConfigurationRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query devices by name and/or tags Resource: devices Authorized roles: viewer
         * @summary Query
         * @param {DeviceApiDeviceControllerQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerQuery: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.deviceControllerQuery(requestParameters.deviceControllerFilterRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Unprovision a device by device ID. Resource: devices Authorized roles: administrator
         * @summary Unprovision device
         * @param {DeviceApiDeviceControllerUnprovisionDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerUnprovisionDevice: function (requestParameters, options) {
            return localVarFp.deviceControllerUnprovisionDevice(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Validate a device stream configuration Resource: devices Authorized roles: administrator
         * @summary Validate stream configuration
         * @param {DeviceApiDeviceControllerValidateStreamConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceControllerValidateStreamConfiguration: function (requestParameters, options) {
            return localVarFp.deviceControllerValidateStreamConfiguration(requestParameters.deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DeviceApiFactory = DeviceApiFactory;
/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
var DeviceApi = /** @class */ (function (_super) {
    __extends(DeviceApi, _super);
    function DeviceApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Count devices Resource: devices Authorized roles: viewer
     * @summary Count
     * @param {DeviceApiDeviceControllerCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerCount = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerCount(requestParameters.deviceControllerFilterRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Disable a device. Resource: devices Authorized roles: administrator
     * @summary Disable
     * @param {DeviceApiDeviceControllerDisableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerDisable = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerDisable(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Filter
     * @param {DeviceApiDeviceControllerFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerFilter = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerFilter(requestParameters.deviceControllerFilterRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Generate a device provisioning token. Resource: devices Authorized roles: administrator
     * @summary Generate device provisioning token
     * @param {DeviceApiDeviceControllerGenerateDeviceProvisioningTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerGenerateDeviceProvisioningToken = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerGenerateDeviceProvisioningToken(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List device commands Resource: commands Authorized roles: device
     * @summary Get commands
     * @param {DeviceApiDeviceControllerGetCommandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerGetCommands = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerGetCommands(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a device configuration Resource: devices Authorized roles: viewer
     * @summary Get configuration
     * @param {DeviceApiDeviceControllerGetConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerGetConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerGetConfiguration(requestParameters.id, requestParameters.version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get GeoIP for device Resource: devices Authorized roles: device
     * @summary Get geo ip
     * @param {DeviceApiDeviceControllerGetGeoIpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerGetGeoIp = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerGetGeoIp(requestParameters.id, requestParameters.xForwardedFor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a device by device ID. Resource: devices Authorized roles: viewer, device
     * @summary Get one
     * @param {DeviceApiDeviceControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerGetOne = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerGetOne(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get tags across all devices Resource: devices Authorized roles: viewer
     * @summary Get tags
     * @param {DeviceApiDeviceControllerGetTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerGetTags = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerGetTags(requestParameters.deviceControllerFilterRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for agent version updates Resource: devices Authorized roles: device
     * @summary Get updated agent version
     * @param {DeviceApiDeviceControllerGetUpdatedAgentVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerGetUpdatedAgentVersion = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerGetUpdatedAgentVersion(requestParameters.id, requestParameters.reportedAgentVersion, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for updated device configuration Resource: devices Authorized roles: device
     * @summary Get updated configuration
     * @param {DeviceApiDeviceControllerGetUpdatedConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerGetUpdatedConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerGetUpdatedConfiguration(requestParameters.id, requestParameters.appVersion, requestParameters.reportedConfigurationVersion, requestParameters.agentWallClockTimestamp, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List device views Resource: views Authorized roles: device
     * @summary Get views
     * @param {DeviceApiDeviceControllerGetViewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerGetViews = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerGetViews(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update an existing device. Resource: devices Authorized roles: administrator, device
     * @summary Patch
     * @param {DeviceApiDeviceControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerPatch = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerPatch(requestParameters.id, requestParameters.deviceControllerPatchRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a new device. Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {DeviceApiDeviceControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerPost = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerPost(requestParameters.deviceControllerPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a device configuration Resource: devices Authorized roles: administrator
     * @summary Post configuration
     * @param {DeviceApiDeviceControllerPostConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerPostConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerPostConfiguration(requestParameters.id, requestParameters.deviceControllerPutConfigurationRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Provision an existing device.
     * @summary Provision device
     * @param {DeviceApiDeviceControllerProvisionDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerProvisionDevice = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerProvisionDevice(requestParameters.deviceControllerProvisionDeviceRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a device\'s configuration. Resource: devices Authorized roles: administrator
     * @summary Put configuration
     * @param {DeviceApiDeviceControllerPutConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerPutConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerPutConfiguration(requestParameters.id, requestParameters.deviceControllerPutConfigurationRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Query
     * @param {DeviceApiDeviceControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerQuery = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerQuery(requestParameters.deviceControllerFilterRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Unprovision a device by device ID. Resource: devices Authorized roles: administrator
     * @summary Unprovision device
     * @param {DeviceApiDeviceControllerUnprovisionDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerUnprovisionDevice = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerUnprovisionDevice(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Validate a device stream configuration Resource: devices Authorized roles: administrator
     * @summary Validate stream configuration
     * @param {DeviceApiDeviceControllerValidateStreamConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceControllerValidateStreamConfiguration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.DeviceApiFp)(this.configuration).deviceControllerValidateStreamConfiguration(requestParameters.deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DeviceApi;
}(base_1.BaseAPI));
exports.DeviceApi = DeviceApi;
