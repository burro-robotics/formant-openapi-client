/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { DeviceControllerGetViews200Response } from '../formant-models';
import { DeviceControllerGetViews200ResponseItemsInner } from '../formant-models';
import { ViewControllerPatchRequest } from '../formant-models';
import { ViewControllerReorderRequest } from '../formant-models';
/**
 * ViewApi - axios parameter creator
 * @export
 */
export declare const ViewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a view Resource: views Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all device layouts Resource: views Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerGetAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a device layout Resource: views Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a device layout Resource: views Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {ViewControllerPatchRequest} viewControllerPatchRequest PartialView
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerPatch: (id: string, viewControllerPatchRequest: ViewControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a view Resource: views Authorized roles: administrator
     * @summary Post
     * @param {DeviceControllerGetViews200ResponseItemsInner} deviceControllerGetViews200ResponseItemsInner View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerPost: (deviceControllerGetViews200ResponseItemsInner: DeviceControllerGetViews200ResponseItemsInner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Reorder multiple views Resource: views Authorized roles: administrator
     * @summary Reorder
     * @param {ViewControllerReorderRequest} viewControllerReorderRequest ReorderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerReorder: (viewControllerReorderRequest: ViewControllerReorderRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ViewApi - functional programming interface
 * @export
 */
export declare const ViewApiFp: (configuration?: Configuration) => {
    /**
     * Delete a view Resource: views Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List all device layouts Resource: views Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetViews200Response>>;
    /**
     * Get a device layout Resource: views Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetViews200ResponseItemsInner>>;
    /**
     * Update a device layout Resource: views Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {ViewControllerPatchRequest} viewControllerPatchRequest PartialView
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerPatch(id: string, viewControllerPatchRequest: ViewControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetViews200ResponseItemsInner>>;
    /**
     * Create a view Resource: views Authorized roles: administrator
     * @summary Post
     * @param {DeviceControllerGetViews200ResponseItemsInner} deviceControllerGetViews200ResponseItemsInner View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerPost(deviceControllerGetViews200ResponseItemsInner: DeviceControllerGetViews200ResponseItemsInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetViews200ResponseItemsInner>>;
    /**
     * Reorder multiple views Resource: views Authorized roles: administrator
     * @summary Reorder
     * @param {ViewControllerReorderRequest} viewControllerReorderRequest ReorderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerReorder(viewControllerReorderRequest: ViewControllerReorderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ViewApi - factory interface
 * @export
 */
export declare const ViewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a view Resource: views Authorized roles: administrator
     * @summary Delete
     * @param {ViewApiViewControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerDelete(requestParameters: ViewApiViewControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * List all device layouts Resource: views Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerGetAll(options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetViews200Response>;
    /**
     * Get a device layout Resource: views Authorized roles: viewer
     * @summary Get one
     * @param {ViewApiViewControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerGetOne(requestParameters: ViewApiViewControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetViews200ResponseItemsInner>;
    /**
     * Update a device layout Resource: views Authorized roles: administrator
     * @summary Patch
     * @param {ViewApiViewControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerPatch(requestParameters: ViewApiViewControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetViews200ResponseItemsInner>;
    /**
     * Create a view Resource: views Authorized roles: administrator
     * @summary Post
     * @param {ViewApiViewControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerPost(requestParameters: ViewApiViewControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetViews200ResponseItemsInner>;
    /**
     * Reorder multiple views Resource: views Authorized roles: administrator
     * @summary Reorder
     * @param {ViewApiViewControllerReorderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewControllerReorder(requestParameters: ViewApiViewControllerReorderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for viewControllerDelete operation in ViewApi.
 * @export
 * @interface ViewApiViewControllerDeleteRequest
 */
export interface ViewApiViewControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof ViewApiViewControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for viewControllerGetOne operation in ViewApi.
 * @export
 * @interface ViewApiViewControllerGetOneRequest
 */
export interface ViewApiViewControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof ViewApiViewControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for viewControllerPatch operation in ViewApi.
 * @export
 * @interface ViewApiViewControllerPatchRequest
 */
export interface ViewApiViewControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof ViewApiViewControllerPatch
     */
    readonly id: string;
    /**
     * PartialView
     * @type {ViewControllerPatchRequest}
     * @memberof ViewApiViewControllerPatch
     */
    readonly viewControllerPatchRequest: ViewControllerPatchRequest;
}
/**
 * Request parameters for viewControllerPost operation in ViewApi.
 * @export
 * @interface ViewApiViewControllerPostRequest
 */
export interface ViewApiViewControllerPostRequest {
    /**
     * View
     * @type {DeviceControllerGetViews200ResponseItemsInner}
     * @memberof ViewApiViewControllerPost
     */
    readonly deviceControllerGetViews200ResponseItemsInner: DeviceControllerGetViews200ResponseItemsInner;
}
/**
 * Request parameters for viewControllerReorder operation in ViewApi.
 * @export
 * @interface ViewApiViewControllerReorderRequest
 */
export interface ViewApiViewControllerReorderRequest {
    /**
     * ReorderRequest
     * @type {ViewControllerReorderRequest}
     * @memberof ViewApiViewControllerReorder
     */
    readonly viewControllerReorderRequest: ViewControllerReorderRequest;
}
/**
 * ViewApi - object-oriented interface
 * @export
 * @class ViewApi
 * @extends {BaseAPI}
 */
export declare class ViewApi extends BaseAPI {
    /**
     * Delete a view Resource: views Authorized roles: administrator
     * @summary Delete
     * @param {ViewApiViewControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    viewControllerDelete(requestParameters: ViewApiViewControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List all device layouts Resource: views Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    viewControllerGetAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetViews200Response, any>>;
    /**
     * Get a device layout Resource: views Authorized roles: viewer
     * @summary Get one
     * @param {ViewApiViewControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    viewControllerGetOne(requestParameters: ViewApiViewControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetViews200ResponseItemsInner, any>>;
    /**
     * Update a device layout Resource: views Authorized roles: administrator
     * @summary Patch
     * @param {ViewApiViewControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    viewControllerPatch(requestParameters: ViewApiViewControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetViews200ResponseItemsInner, any>>;
    /**
     * Create a view Resource: views Authorized roles: administrator
     * @summary Post
     * @param {ViewApiViewControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    viewControllerPost(requestParameters: ViewApiViewControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetViews200ResponseItemsInner, any>>;
    /**
     * Reorder multiple views Resource: views Authorized roles: administrator
     * @summary Reorder
     * @param {ViewApiViewControllerReorderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApi
     */
    viewControllerReorder(requestParameters: ViewApiViewControllerReorderRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
