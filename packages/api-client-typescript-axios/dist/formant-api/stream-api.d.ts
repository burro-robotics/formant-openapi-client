/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { StreamControllerList200Response } from '../formant-models';
import { StreamControllerList200ResponseItemsInner } from '../formant-models';
import { StreamControllerPatchRequest } from '../formant-models';
/**
 * StreamApi - axios parameter creator
 * @export
 */
export declare const StreamApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a stream Resource: streams Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a stream Resource: streams Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List streams Resource: streams Authorized roles: viewer
     * @summary List
     * @param {boolean} [active]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerList: (active?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a stream Resource: streams Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {StreamControllerPatchRequest} streamControllerPatchRequest PartialStream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerPatch: (id: string, streamControllerPatchRequest: StreamControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a stream Resource: streams Authorized roles: administrator
     * @summary Post
     * @param {StreamControllerList200ResponseItemsInner} streamControllerList200ResponseItemsInner Stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerPost: (streamControllerList200ResponseItemsInner: StreamControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StreamApi - functional programming interface
 * @export
 */
export declare const StreamApiFp: (configuration?: Configuration) => {
    /**
     * Delete a stream Resource: streams Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a stream Resource: streams Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamControllerList200ResponseItemsInner>>;
    /**
     * List streams Resource: streams Authorized roles: viewer
     * @summary List
     * @param {boolean} [active]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerList(active?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamControllerList200Response>>;
    /**
     * Update a stream Resource: streams Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {StreamControllerPatchRequest} streamControllerPatchRequest PartialStream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerPatch(id: string, streamControllerPatchRequest: StreamControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamControllerList200ResponseItemsInner>>;
    /**
     * Create a stream Resource: streams Authorized roles: administrator
     * @summary Post
     * @param {StreamControllerList200ResponseItemsInner} streamControllerList200ResponseItemsInner Stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerPost(streamControllerList200ResponseItemsInner: StreamControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamControllerList200ResponseItemsInner>>;
};
/**
 * StreamApi - factory interface
 * @export
 */
export declare const StreamApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a stream Resource: streams Authorized roles: administrator
     * @summary Delete
     * @param {StreamApiStreamControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerDelete(requestParameters: StreamApiStreamControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a stream Resource: streams Authorized roles: viewer
     * @summary Get one
     * @param {StreamApiStreamControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerGetOne(requestParameters: StreamApiStreamControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<StreamControllerList200ResponseItemsInner>;
    /**
     * List streams Resource: streams Authorized roles: viewer
     * @summary List
     * @param {StreamApiStreamControllerListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerList(requestParameters?: StreamApiStreamControllerListRequest, options?: RawAxiosRequestConfig): AxiosPromise<StreamControllerList200Response>;
    /**
     * Update a stream Resource: streams Authorized roles: administrator
     * @summary Patch
     * @param {StreamApiStreamControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerPatch(requestParameters: StreamApiStreamControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<StreamControllerList200ResponseItemsInner>;
    /**
     * Create a stream Resource: streams Authorized roles: administrator
     * @summary Post
     * @param {StreamApiStreamControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    streamControllerPost(requestParameters: StreamApiStreamControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<StreamControllerList200ResponseItemsInner>;
};
/**
 * Request parameters for streamControllerDelete operation in StreamApi.
 * @export
 * @interface StreamApiStreamControllerDeleteRequest
 */
export interface StreamApiStreamControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof StreamApiStreamControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for streamControllerGetOne operation in StreamApi.
 * @export
 * @interface StreamApiStreamControllerGetOneRequest
 */
export interface StreamApiStreamControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof StreamApiStreamControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for streamControllerList operation in StreamApi.
 * @export
 * @interface StreamApiStreamControllerListRequest
 */
export interface StreamApiStreamControllerListRequest {
    /**
     *
     * @type {boolean}
     * @memberof StreamApiStreamControllerList
     */
    readonly active?: boolean;
}
/**
 * Request parameters for streamControllerPatch operation in StreamApi.
 * @export
 * @interface StreamApiStreamControllerPatchRequest
 */
export interface StreamApiStreamControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof StreamApiStreamControllerPatch
     */
    readonly id: string;
    /**
     * PartialStream
     * @type {StreamControllerPatchRequest}
     * @memberof StreamApiStreamControllerPatch
     */
    readonly streamControllerPatchRequest: StreamControllerPatchRequest;
}
/**
 * Request parameters for streamControllerPost operation in StreamApi.
 * @export
 * @interface StreamApiStreamControllerPostRequest
 */
export interface StreamApiStreamControllerPostRequest {
    /**
     * Stream
     * @type {StreamControllerList200ResponseItemsInner}
     * @memberof StreamApiStreamControllerPost
     */
    readonly streamControllerList200ResponseItemsInner: StreamControllerList200ResponseItemsInner;
}
/**
 * StreamApi - object-oriented interface
 * @export
 * @class StreamApi
 * @extends {BaseAPI}
 */
export declare class StreamApi extends BaseAPI {
    /**
     * Delete a stream Resource: streams Authorized roles: administrator
     * @summary Delete
     * @param {StreamApiStreamControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamApi
     */
    streamControllerDelete(requestParameters: StreamApiStreamControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a stream Resource: streams Authorized roles: viewer
     * @summary Get one
     * @param {StreamApiStreamControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamApi
     */
    streamControllerGetOne(requestParameters: StreamApiStreamControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StreamControllerList200ResponseItemsInner, any>>;
    /**
     * List streams Resource: streams Authorized roles: viewer
     * @summary List
     * @param {StreamApiStreamControllerListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamApi
     */
    streamControllerList(requestParameters?: StreamApiStreamControllerListRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StreamControllerList200Response, any>>;
    /**
     * Update a stream Resource: streams Authorized roles: administrator
     * @summary Patch
     * @param {StreamApiStreamControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamApi
     */
    streamControllerPatch(requestParameters: StreamApiStreamControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StreamControllerList200ResponseItemsInner, any>>;
    /**
     * Create a stream Resource: streams Authorized roles: administrator
     * @summary Post
     * @param {StreamApiStreamControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamApi
     */
    streamControllerPost(requestParameters: StreamApiStreamControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StreamControllerList200ResponseItemsInner, any>>;
}
