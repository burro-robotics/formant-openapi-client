/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CommandTemplateControllerList200Response } from '../formant-models';
import { DeviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner } from '../formant-models';
import { DeviceControllerFilter200Response } from '../formant-models';
import { DeviceControllerFilterRequest } from '../formant-models';
import { DeviceControllerGenerateDeviceProvisioningToken200Response } from '../formant-models';
import { DeviceControllerGetGeoIp200Response } from '../formant-models';
import { DeviceControllerGetTags200Response } from '../formant-models';
import { DeviceControllerGetUpdatedAgentVersion200Response } from '../formant-models';
import { DeviceControllerGetUpdatedConfiguration200Response } from '../formant-models';
import { DeviceControllerGetViews200Response } from '../formant-models';
import { DeviceControllerPatchRequest } from '../formant-models';
import { DeviceControllerPostRequest } from '../formant-models';
import { DeviceControllerProvisionDeviceRequest } from '../formant-models';
import { DeviceControllerPutConfigurationRequest } from '../formant-models';
/**
 * DeviceApi - axios parameter creator
 * @export
 */
export declare const DeviceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Count devices Resource: devices Authorized roles: viewer
     * @summary Count
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerCount: (deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Disable a device. Resource: devices Authorized roles: administrator
     * @summary Disable
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerDisable: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Filter
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerFilter: (deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generate a device provisioning token. Resource: devices Authorized roles: administrator
     * @summary Generate device provisioning token
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGenerateDeviceProvisioningToken: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List device commands Resource: commands Authorized roles: device
     * @summary Get commands
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetCommands: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a device configuration Resource: devices Authorized roles: viewer
     * @summary Get configuration
     * @param {string} id
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetConfiguration: (id: string, version: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get GeoIP for device Resource: devices Authorized roles: device
     * @summary Get geo ip
     * @param {string} id
     * @param {string} [xForwardedFor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetGeoIp: (id: string, xForwardedFor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a device by device ID. Resource: devices Authorized roles: viewer, device
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get tags across all devices Resource: devices Authorized roles: viewer
     * @summary Get tags
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetTags: (deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for agent version updates Resource: devices Authorized roles: device
     * @summary Get updated agent version
     * @param {string} id
     * @param {string} [reportedAgentVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetUpdatedAgentVersion: (id: string, reportedAgentVersion?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for updated device configuration Resource: devices Authorized roles: device
     * @summary Get updated configuration
     * @param {string} id
     * @param {string} [appVersion]
     * @param {number} [reportedConfigurationVersion]
     * @param {number} [agentWallClockTimestamp]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetUpdatedConfiguration: (id: string, appVersion?: string, reportedConfigurationVersion?: number, agentWallClockTimestamp?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List device views Resource: views Authorized roles: device
     * @summary Get views
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetViews: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing device. Resource: devices Authorized roles: administrator, device
     * @summary Patch
     * @param {string} id
     * @param {DeviceControllerPatchRequest} deviceControllerPatchRequest PartialDevice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPatch: (id: string, deviceControllerPatchRequest: DeviceControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new device. Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {DeviceControllerPostRequest} deviceControllerPostRequest Device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPost: (deviceControllerPostRequest: DeviceControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a device configuration Resource: devices Authorized roles: administrator
     * @summary Post configuration
     * @param {string} id
     * @param {DeviceControllerPutConfigurationRequest | null} deviceControllerPutConfigurationRequest DeviceConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPostConfiguration: (id: string, deviceControllerPutConfigurationRequest: DeviceControllerPutConfigurationRequest | null, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Provision an existing device.
     * @summary Provision device
     * @param {DeviceControllerProvisionDeviceRequest} deviceControllerProvisionDeviceRequest DeviceProvisioningRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerProvisionDevice: (deviceControllerProvisionDeviceRequest: DeviceControllerProvisionDeviceRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a device\'s configuration. Resource: devices Authorized roles: administrator
     * @summary Put configuration
     * @param {string} id
     * @param {DeviceControllerPutConfigurationRequest | null} deviceControllerPutConfigurationRequest DeviceConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPutConfiguration: (id: string, deviceControllerPutConfigurationRequest: DeviceControllerPutConfigurationRequest | null, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Query
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerQuery: (deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unprovision a device by device ID. Resource: devices Authorized roles: administrator
     * @summary Unprovision device
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerUnprovisionDevice: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validate a device stream configuration Resource: devices Authorized roles: administrator
     * @summary Validate stream configuration
     * @param {DeviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner} deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner DeviceStreamConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerValidateStreamConfiguration: (deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner: DeviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DeviceApi - functional programming interface
 * @export
 */
export declare const DeviceApiFp: (configuration?: Configuration) => {
    /**
     * Count devices Resource: devices Authorized roles: viewer
     * @summary Count
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerCount(deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Disable a device. Resource: devices Authorized roles: administrator
     * @summary Disable
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerDisable(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Filter
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerFilter(deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerFilter200Response>>;
    /**
     * Generate a device provisioning token. Resource: devices Authorized roles: administrator
     * @summary Generate device provisioning token
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGenerateDeviceProvisioningToken(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGenerateDeviceProvisioningToken200Response>>;
    /**
     * List device commands Resource: commands Authorized roles: device
     * @summary Get commands
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetCommands(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandTemplateControllerList200Response>>;
    /**
     * Get a device configuration Resource: devices Authorized roles: viewer
     * @summary Get configuration
     * @param {string} id
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetConfiguration(id: string, version: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerPutConfigurationRequest>>;
    /**
     * Get GeoIP for device Resource: devices Authorized roles: device
     * @summary Get geo ip
     * @param {string} id
     * @param {string} [xForwardedFor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetGeoIp(id: string, xForwardedFor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetGeoIp200Response>>;
    /**
     * Get a device by device ID. Resource: devices Authorized roles: viewer, device
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerPostRequest>>;
    /**
     * Get tags across all devices Resource: devices Authorized roles: viewer
     * @summary Get tags
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetTags(deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetTags200Response>>;
    /**
     * Check for agent version updates Resource: devices Authorized roles: device
     * @summary Get updated agent version
     * @param {string} id
     * @param {string} [reportedAgentVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetUpdatedAgentVersion(id: string, reportedAgentVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetUpdatedAgentVersion200Response>>;
    /**
     * Check for updated device configuration Resource: devices Authorized roles: device
     * @summary Get updated configuration
     * @param {string} id
     * @param {string} [appVersion]
     * @param {number} [reportedConfigurationVersion]
     * @param {number} [agentWallClockTimestamp]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetUpdatedConfiguration(id: string, appVersion?: string, reportedConfigurationVersion?: number, agentWallClockTimestamp?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetUpdatedConfiguration200Response>>;
    /**
     * List device views Resource: views Authorized roles: device
     * @summary Get views
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetViews(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetViews200Response>>;
    /**
     * Update an existing device. Resource: devices Authorized roles: administrator, device
     * @summary Patch
     * @param {string} id
     * @param {DeviceControllerPatchRequest} deviceControllerPatchRequest PartialDevice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPatch(id: string, deviceControllerPatchRequest: DeviceControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerPostRequest>>;
    /**
     * Create a new device. Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {DeviceControllerPostRequest} deviceControllerPostRequest Device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPost(deviceControllerPostRequest: DeviceControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerPostRequest>>;
    /**
     * Create a device configuration Resource: devices Authorized roles: administrator
     * @summary Post configuration
     * @param {string} id
     * @param {DeviceControllerPutConfigurationRequest | null} deviceControllerPutConfigurationRequest DeviceConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPostConfiguration(id: string, deviceControllerPutConfigurationRequest: DeviceControllerPutConfigurationRequest | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerPutConfigurationRequest>>;
    /**
     * Provision an existing device.
     * @summary Provision device
     * @param {DeviceControllerProvisionDeviceRequest} deviceControllerProvisionDeviceRequest DeviceProvisioningRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerProvisionDevice(deviceControllerProvisionDeviceRequest: DeviceControllerProvisionDeviceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerPostRequest>>;
    /**
     * Update a device\'s configuration. Resource: devices Authorized roles: administrator
     * @summary Put configuration
     * @param {string} id
     * @param {DeviceControllerPutConfigurationRequest | null} deviceControllerPutConfigurationRequest DeviceConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPutConfiguration(id: string, deviceControllerPutConfigurationRequest: DeviceControllerPutConfigurationRequest | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerPutConfigurationRequest>>;
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Query
     * @param {DeviceControllerFilterRequest} [deviceControllerFilterRequest] DeviceQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerQuery(deviceControllerFilterRequest?: DeviceControllerFilterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerFilter200Response>>;
    /**
     * Unprovision a device by device ID. Resource: devices Authorized roles: administrator
     * @summary Unprovision device
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerUnprovisionDevice(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Validate a device stream configuration Resource: devices Authorized roles: administrator
     * @summary Validate stream configuration
     * @param {DeviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner} deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner DeviceStreamConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerValidateStreamConfiguration(deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner: DeviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * DeviceApi - factory interface
 * @export
 */
export declare const DeviceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Count devices Resource: devices Authorized roles: viewer
     * @summary Count
     * @param {DeviceApiDeviceControllerCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerCount(requestParameters?: DeviceApiDeviceControllerCountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Disable a device. Resource: devices Authorized roles: administrator
     * @summary Disable
     * @param {DeviceApiDeviceControllerDisableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerDisable(requestParameters: DeviceApiDeviceControllerDisableRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Filter
     * @param {DeviceApiDeviceControllerFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerFilter(requestParameters?: DeviceApiDeviceControllerFilterRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerFilter200Response>;
    /**
     * Generate a device provisioning token. Resource: devices Authorized roles: administrator
     * @summary Generate device provisioning token
     * @param {DeviceApiDeviceControllerGenerateDeviceProvisioningTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGenerateDeviceProvisioningToken(requestParameters: DeviceApiDeviceControllerGenerateDeviceProvisioningTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGenerateDeviceProvisioningToken200Response>;
    /**
     * List device commands Resource: commands Authorized roles: device
     * @summary Get commands
     * @param {DeviceApiDeviceControllerGetCommandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetCommands(requestParameters: DeviceApiDeviceControllerGetCommandsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommandTemplateControllerList200Response>;
    /**
     * Get a device configuration Resource: devices Authorized roles: viewer
     * @summary Get configuration
     * @param {DeviceApiDeviceControllerGetConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetConfiguration(requestParameters: DeviceApiDeviceControllerGetConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerPutConfigurationRequest>;
    /**
     * Get GeoIP for device Resource: devices Authorized roles: device
     * @summary Get geo ip
     * @param {DeviceApiDeviceControllerGetGeoIpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetGeoIp(requestParameters: DeviceApiDeviceControllerGetGeoIpRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetGeoIp200Response>;
    /**
     * Get a device by device ID. Resource: devices Authorized roles: viewer, device
     * @summary Get one
     * @param {DeviceApiDeviceControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetOne(requestParameters: DeviceApiDeviceControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerPostRequest>;
    /**
     * Get tags across all devices Resource: devices Authorized roles: viewer
     * @summary Get tags
     * @param {DeviceApiDeviceControllerGetTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetTags(requestParameters?: DeviceApiDeviceControllerGetTagsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetTags200Response>;
    /**
     * Check for agent version updates Resource: devices Authorized roles: device
     * @summary Get updated agent version
     * @param {DeviceApiDeviceControllerGetUpdatedAgentVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetUpdatedAgentVersion(requestParameters: DeviceApiDeviceControllerGetUpdatedAgentVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetUpdatedAgentVersion200Response>;
    /**
     * Check for updated device configuration Resource: devices Authorized roles: device
     * @summary Get updated configuration
     * @param {DeviceApiDeviceControllerGetUpdatedConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetUpdatedConfiguration(requestParameters: DeviceApiDeviceControllerGetUpdatedConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetUpdatedConfiguration200Response>;
    /**
     * List device views Resource: views Authorized roles: device
     * @summary Get views
     * @param {DeviceApiDeviceControllerGetViewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerGetViews(requestParameters: DeviceApiDeviceControllerGetViewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetViews200Response>;
    /**
     * Update an existing device. Resource: devices Authorized roles: administrator, device
     * @summary Patch
     * @param {DeviceApiDeviceControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPatch(requestParameters: DeviceApiDeviceControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerPostRequest>;
    /**
     * Create a new device. Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {DeviceApiDeviceControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPost(requestParameters: DeviceApiDeviceControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerPostRequest>;
    /**
     * Create a device configuration Resource: devices Authorized roles: administrator
     * @summary Post configuration
     * @param {DeviceApiDeviceControllerPostConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPostConfiguration(requestParameters: DeviceApiDeviceControllerPostConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerPutConfigurationRequest>;
    /**
     * Provision an existing device.
     * @summary Provision device
     * @param {DeviceApiDeviceControllerProvisionDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerProvisionDevice(requestParameters: DeviceApiDeviceControllerProvisionDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerPostRequest>;
    /**
     * Update a device\'s configuration. Resource: devices Authorized roles: administrator
     * @summary Put configuration
     * @param {DeviceApiDeviceControllerPutConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerPutConfiguration(requestParameters: DeviceApiDeviceControllerPutConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerPutConfigurationRequest>;
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Query
     * @param {DeviceApiDeviceControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerQuery(requestParameters?: DeviceApiDeviceControllerQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerFilter200Response>;
    /**
     * Unprovision a device by device ID. Resource: devices Authorized roles: administrator
     * @summary Unprovision device
     * @param {DeviceApiDeviceControllerUnprovisionDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerUnprovisionDevice(requestParameters: DeviceApiDeviceControllerUnprovisionDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Validate a device stream configuration Resource: devices Authorized roles: administrator
     * @summary Validate stream configuration
     * @param {DeviceApiDeviceControllerValidateStreamConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceControllerValidateStreamConfiguration(requestParameters: DeviceApiDeviceControllerValidateStreamConfigurationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for deviceControllerCount operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerCountRequest
 */
export interface DeviceApiDeviceControllerCountRequest {
    /**
     * DeviceQuery
     * @type {DeviceControllerFilterRequest}
     * @memberof DeviceApiDeviceControllerCount
     */
    readonly deviceControllerFilterRequest?: DeviceControllerFilterRequest;
}
/**
 * Request parameters for deviceControllerDisable operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerDisableRequest
 */
export interface DeviceApiDeviceControllerDisableRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerDisable
     */
    readonly id: string;
}
/**
 * Request parameters for deviceControllerFilter operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerFilterRequest
 */
export interface DeviceApiDeviceControllerFilterRequest {
    /**
     * DeviceQuery
     * @type {DeviceControllerFilterRequest}
     * @memberof DeviceApiDeviceControllerFilter
     */
    readonly deviceControllerFilterRequest?: DeviceControllerFilterRequest;
}
/**
 * Request parameters for deviceControllerGenerateDeviceProvisioningToken operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerGenerateDeviceProvisioningTokenRequest
 */
export interface DeviceApiDeviceControllerGenerateDeviceProvisioningTokenRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGenerateDeviceProvisioningToken
     */
    readonly id: string;
}
/**
 * Request parameters for deviceControllerGetCommands operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerGetCommandsRequest
 */
export interface DeviceApiDeviceControllerGetCommandsRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetCommands
     */
    readonly id: string;
}
/**
 * Request parameters for deviceControllerGetConfiguration operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerGetConfigurationRequest
 */
export interface DeviceApiDeviceControllerGetConfigurationRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetConfiguration
     */
    readonly id: string;
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetConfiguration
     */
    readonly version: string;
}
/**
 * Request parameters for deviceControllerGetGeoIp operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerGetGeoIpRequest
 */
export interface DeviceApiDeviceControllerGetGeoIpRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetGeoIp
     */
    readonly id: string;
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetGeoIp
     */
    readonly xForwardedFor?: string;
}
/**
 * Request parameters for deviceControllerGetOne operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerGetOneRequest
 */
export interface DeviceApiDeviceControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for deviceControllerGetTags operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerGetTagsRequest
 */
export interface DeviceApiDeviceControllerGetTagsRequest {
    /**
     * DeviceQuery
     * @type {DeviceControllerFilterRequest}
     * @memberof DeviceApiDeviceControllerGetTags
     */
    readonly deviceControllerFilterRequest?: DeviceControllerFilterRequest;
}
/**
 * Request parameters for deviceControllerGetUpdatedAgentVersion operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerGetUpdatedAgentVersionRequest
 */
export interface DeviceApiDeviceControllerGetUpdatedAgentVersionRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetUpdatedAgentVersion
     */
    readonly id: string;
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetUpdatedAgentVersion
     */
    readonly reportedAgentVersion?: string;
}
/**
 * Request parameters for deviceControllerGetUpdatedConfiguration operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerGetUpdatedConfigurationRequest
 */
export interface DeviceApiDeviceControllerGetUpdatedConfigurationRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetUpdatedConfiguration
     */
    readonly id: string;
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetUpdatedConfiguration
     */
    readonly appVersion?: string;
    /**
     *
     * @type {number}
     * @memberof DeviceApiDeviceControllerGetUpdatedConfiguration
     */
    readonly reportedConfigurationVersion?: number;
    /**
     *
     * @type {number}
     * @memberof DeviceApiDeviceControllerGetUpdatedConfiguration
     */
    readonly agentWallClockTimestamp?: number;
}
/**
 * Request parameters for deviceControllerGetViews operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerGetViewsRequest
 */
export interface DeviceApiDeviceControllerGetViewsRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerGetViews
     */
    readonly id: string;
}
/**
 * Request parameters for deviceControllerPatch operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerPatchRequest
 */
export interface DeviceApiDeviceControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerPatch
     */
    readonly id: string;
    /**
     * PartialDevice
     * @type {DeviceControllerPatchRequest}
     * @memberof DeviceApiDeviceControllerPatch
     */
    readonly deviceControllerPatchRequest: DeviceControllerPatchRequest;
}
/**
 * Request parameters for deviceControllerPost operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerPostRequest
 */
export interface DeviceApiDeviceControllerPostRequest {
    /**
     * Device
     * @type {DeviceControllerPostRequest}
     * @memberof DeviceApiDeviceControllerPost
     */
    readonly deviceControllerPostRequest: DeviceControllerPostRequest;
}
/**
 * Request parameters for deviceControllerPostConfiguration operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerPostConfigurationRequest
 */
export interface DeviceApiDeviceControllerPostConfigurationRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerPostConfiguration
     */
    readonly id: string;
    /**
     * DeviceConfiguration
     * @type {DeviceControllerPutConfigurationRequest}
     * @memberof DeviceApiDeviceControllerPostConfiguration
     */
    readonly deviceControllerPutConfigurationRequest: DeviceControllerPutConfigurationRequest | null;
}
/**
 * Request parameters for deviceControllerProvisionDevice operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerProvisionDeviceRequest
 */
export interface DeviceApiDeviceControllerProvisionDeviceRequest {
    /**
     * DeviceProvisioningRequest
     * @type {DeviceControllerProvisionDeviceRequest}
     * @memberof DeviceApiDeviceControllerProvisionDevice
     */
    readonly deviceControllerProvisionDeviceRequest: DeviceControllerProvisionDeviceRequest;
}
/**
 * Request parameters for deviceControllerPutConfiguration operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerPutConfigurationRequest
 */
export interface DeviceApiDeviceControllerPutConfigurationRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerPutConfiguration
     */
    readonly id: string;
    /**
     * DeviceConfiguration
     * @type {DeviceControllerPutConfigurationRequest}
     * @memberof DeviceApiDeviceControllerPutConfiguration
     */
    readonly deviceControllerPutConfigurationRequest: DeviceControllerPutConfigurationRequest | null;
}
/**
 * Request parameters for deviceControllerQuery operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerQueryRequest
 */
export interface DeviceApiDeviceControllerQueryRequest {
    /**
     * DeviceQuery
     * @type {DeviceControllerFilterRequest}
     * @memberof DeviceApiDeviceControllerQuery
     */
    readonly deviceControllerFilterRequest?: DeviceControllerFilterRequest;
}
/**
 * Request parameters for deviceControllerUnprovisionDevice operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerUnprovisionDeviceRequest
 */
export interface DeviceApiDeviceControllerUnprovisionDeviceRequest {
    /**
     *
     * @type {string}
     * @memberof DeviceApiDeviceControllerUnprovisionDevice
     */
    readonly id: string;
}
/**
 * Request parameters for deviceControllerValidateStreamConfiguration operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceControllerValidateStreamConfigurationRequest
 */
export interface DeviceApiDeviceControllerValidateStreamConfigurationRequest {
    /**
     * DeviceStreamConfiguration
     * @type {DeviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner}
     * @memberof DeviceApiDeviceControllerValidateStreamConfiguration
     */
    readonly deviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner: DeviceConfigurationTemplateControllerPostRequestDocumentTelemetryStreamsInner;
}
/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
export declare class DeviceApi extends BaseAPI {
    /**
     * Count devices Resource: devices Authorized roles: viewer
     * @summary Count
     * @param {DeviceApiDeviceControllerCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerCount(requestParameters?: DeviceApiDeviceControllerCountRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Disable a device. Resource: devices Authorized roles: administrator
     * @summary Disable
     * @param {DeviceApiDeviceControllerDisableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerDisable(requestParameters: DeviceApiDeviceControllerDisableRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Filter
     * @param {DeviceApiDeviceControllerFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerFilter(requestParameters?: DeviceApiDeviceControllerFilterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerFilter200Response, any>>;
    /**
     * Generate a device provisioning token. Resource: devices Authorized roles: administrator
     * @summary Generate device provisioning token
     * @param {DeviceApiDeviceControllerGenerateDeviceProvisioningTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerGenerateDeviceProvisioningToken(requestParameters: DeviceApiDeviceControllerGenerateDeviceProvisioningTokenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGenerateDeviceProvisioningToken200Response, any>>;
    /**
     * List device commands Resource: commands Authorized roles: device
     * @summary Get commands
     * @param {DeviceApiDeviceControllerGetCommandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerGetCommands(requestParameters: DeviceApiDeviceControllerGetCommandsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommandTemplateControllerList200Response, any>>;
    /**
     * Get a device configuration Resource: devices Authorized roles: viewer
     * @summary Get configuration
     * @param {DeviceApiDeviceControllerGetConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerGetConfiguration(requestParameters: DeviceApiDeviceControllerGetConfigurationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerPutConfigurationRequest, any>>;
    /**
     * Get GeoIP for device Resource: devices Authorized roles: device
     * @summary Get geo ip
     * @param {DeviceApiDeviceControllerGetGeoIpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerGetGeoIp(requestParameters: DeviceApiDeviceControllerGetGeoIpRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetGeoIp200Response, any>>;
    /**
     * Get a device by device ID. Resource: devices Authorized roles: viewer, device
     * @summary Get one
     * @param {DeviceApiDeviceControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerGetOne(requestParameters: DeviceApiDeviceControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerPostRequest, any>>;
    /**
     * Get tags across all devices Resource: devices Authorized roles: viewer
     * @summary Get tags
     * @param {DeviceApiDeviceControllerGetTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerGetTags(requestParameters?: DeviceApiDeviceControllerGetTagsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetTags200Response, any>>;
    /**
     * Check for agent version updates Resource: devices Authorized roles: device
     * @summary Get updated agent version
     * @param {DeviceApiDeviceControllerGetUpdatedAgentVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerGetUpdatedAgentVersion(requestParameters: DeviceApiDeviceControllerGetUpdatedAgentVersionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetUpdatedAgentVersion200Response, any>>;
    /**
     * Check for updated device configuration Resource: devices Authorized roles: device
     * @summary Get updated configuration
     * @param {DeviceApiDeviceControllerGetUpdatedConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerGetUpdatedConfiguration(requestParameters: DeviceApiDeviceControllerGetUpdatedConfigurationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetUpdatedConfiguration200Response, any>>;
    /**
     * List device views Resource: views Authorized roles: device
     * @summary Get views
     * @param {DeviceApiDeviceControllerGetViewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerGetViews(requestParameters: DeviceApiDeviceControllerGetViewsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetViews200Response, any>>;
    /**
     * Update an existing device. Resource: devices Authorized roles: administrator, device
     * @summary Patch
     * @param {DeviceApiDeviceControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerPatch(requestParameters: DeviceApiDeviceControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerPostRequest, any>>;
    /**
     * Create a new device. Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {DeviceApiDeviceControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerPost(requestParameters: DeviceApiDeviceControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerPostRequest, any>>;
    /**
     * Create a device configuration Resource: devices Authorized roles: administrator
     * @summary Post configuration
     * @param {DeviceApiDeviceControllerPostConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerPostConfiguration(requestParameters: DeviceApiDeviceControllerPostConfigurationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerPutConfigurationRequest, any>>;
    /**
     * Provision an existing device.
     * @summary Provision device
     * @param {DeviceApiDeviceControllerProvisionDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerProvisionDevice(requestParameters: DeviceApiDeviceControllerProvisionDeviceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerPostRequest, any>>;
    /**
     * Update a device\'s configuration. Resource: devices Authorized roles: administrator
     * @summary Put configuration
     * @param {DeviceApiDeviceControllerPutConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerPutConfiguration(requestParameters: DeviceApiDeviceControllerPutConfigurationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerPutConfigurationRequest, any>>;
    /**
     * Query devices by name and/or tags Resource: devices Authorized roles: viewer
     * @summary Query
     * @param {DeviceApiDeviceControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerQuery(requestParameters?: DeviceApiDeviceControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerFilter200Response, any>>;
    /**
     * Unprovision a device by device ID. Resource: devices Authorized roles: administrator
     * @summary Unprovision device
     * @param {DeviceApiDeviceControllerUnprovisionDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerUnprovisionDevice(requestParameters: DeviceApiDeviceControllerUnprovisionDeviceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Validate a device stream configuration Resource: devices Authorized roles: administrator
     * @summary Validate stream configuration
     * @param {DeviceApiDeviceControllerValidateStreamConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceControllerValidateStreamConfiguration(requestParameters: DeviceApiDeviceControllerValidateStreamConfigurationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
