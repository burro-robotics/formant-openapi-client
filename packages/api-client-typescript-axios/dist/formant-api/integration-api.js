"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationApi = exports.IntegrationApiFactory = exports.IntegrationApiFp = exports.IntegrationApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * IntegrationApi - axios parameter creator
 * @export
 */
var IntegrationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create an HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Create http integration
         * @param {IntegrationControllerGetHTTPIntegrations200ResponseInner} integrationControllerGetHTTPIntegrations200ResponseInner HttpIntegration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerCreateHTTPIntegration: function (integrationControllerGetHTTPIntegrations200ResponseInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'integrationControllerGetHTTPIntegrations200ResponseInner' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerCreateHTTPIntegration', 'integrationControllerGetHTTPIntegrations200ResponseInner', integrationControllerGetHTTPIntegrations200ResponseInner);
                            localVarPath = "/integrations/http/";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(integrationControllerGetHTTPIntegrations200ResponseInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a Node Graph integration Resource: integrations Authorized roles: administrator
         * @summary Create node graph integration
         * @param {IntegrationControllerGetNodeGraphIntegrations200ResponseInner} integrationControllerGetNodeGraphIntegrations200ResponseInner NodeGraphIntegration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerCreateNodeGraphIntegration: function (integrationControllerGetNodeGraphIntegrations200ResponseInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'integrationControllerGetNodeGraphIntegrations200ResponseInner' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerCreateNodeGraphIntegration', 'integrationControllerGetNodeGraphIntegrations200ResponseInner', integrationControllerGetNodeGraphIntegrations200ResponseInner);
                            localVarPath = "/integrations/nodes/";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(integrationControllerGetNodeGraphIntegrations200ResponseInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Delete http integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerDeleteHTTPIntegration: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerDeleteHTTPIntegration', 'id', id);
                            localVarPath = "/integrations/http/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete Node Graph integration Resource: integrations Authorized roles: administrator
         * @summary Delete node graph integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerDeleteNodeGraphIntegration: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerDeleteNodeGraphIntegration', 'id', id);
                            localVarPath = "/integrations/nodes/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Execute GET HTTP integration Resource: streams Authorized roles: viewer
         * @summary Execute get http integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerExecuteGetHTTPIntegration: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerExecuteGetHTTPIntegration', 'id', id);
                            localVarPath = "/integrations/http/execute/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Execute POST HTTP integration Resource: streams Authorized roles: viewer
         * @summary Execute http integration
         * @param {string} id
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerExecuteHTTPIntegration: function (id, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerExecuteHTTPIntegration', 'id', id);
                            // verify required parameter 'body' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerExecuteHTTPIntegration', 'body', body);
                            localVarPath = "/integrations/http/execute/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Execute Node Graph integration Resource: streams Authorized roles: viewer
         * @summary Execute node graph integration
         * @param {string} id
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerExecuteNodeGraphIntegration: function (id, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerExecuteNodeGraphIntegration', 'id', id);
                            // verify required parameter 'body' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerExecuteNodeGraphIntegration', 'body', body);
                            localVarPath = "/integrations/nodes/execute/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Get http integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetHTTPIntegration: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerGetHTTPIntegration', 'id', id);
                            localVarPath = "/integrations/http/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get HTTP integrations Resource: integrations Authorized roles: administrator
         * @summary Get http integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetHTTPIntegrations: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/integrations/http/";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get Node Graph integration Resource: integrations Authorized roles: viewer
         * @summary Get node graph integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetNodeGraphIntegration: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerGetNodeGraphIntegration', 'id', id);
                            localVarPath = "/integrations/nodes/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get Node Graph integrations Resource: integrations Authorized roles: administrator
         * @summary Get node graph integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetNodeGraphIntegrations: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/integrations/nodes/";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a Google integration Resource: integrations Authorized roles: administrator
         * @summary Google
         * @param {IntegrationControllerGoogleRequest} integrationControllerGoogleRequest GoogleAuthRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGoogle: function (integrationControllerGoogleRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'integrationControllerGoogleRequest' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerGoogle', 'integrationControllerGoogleRequest', integrationControllerGoogleRequest);
                            localVarPath = "/integrations/google/auth";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(integrationControllerGoogleRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a Slack integration Resource: integrations Authorized roles: administrator
         * @summary Slack
         * @param {IntegrationControllerSlackRequest} integrationControllerSlackRequest SlackAuthRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerSlack: function (integrationControllerSlackRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'integrationControllerSlackRequest' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerSlack', 'integrationControllerSlackRequest', integrationControllerSlackRequest);
                            localVarPath = "/integrations/slack/auth";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(integrationControllerSlackRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Update http integration
         * @param {string} id
         * @param {IntegrationControllerUpdateHTTPIntegrationRequest} integrationControllerUpdateHTTPIntegrationRequest PartialHttpIntegration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerUpdateHTTPIntegration: function (id, integrationControllerUpdateHTTPIntegrationRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerUpdateHTTPIntegration', 'id', id);
                            // verify required parameter 'integrationControllerUpdateHTTPIntegrationRequest' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerUpdateHTTPIntegration', 'integrationControllerUpdateHTTPIntegrationRequest', integrationControllerUpdateHTTPIntegrationRequest);
                            localVarPath = "/integrations/http/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(integrationControllerUpdateHTTPIntegrationRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update Node Graph integration Resource: integrations Authorized roles: administrator
         * @summary Update node graph integration
         * @param {string} id
         * @param {IntegrationControllerUpdateNodeGraphIntegrationRequest} integrationControllerUpdateNodeGraphIntegrationRequest PartialNodeGraphIntegration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerUpdateNodeGraphIntegration: function (id, integrationControllerUpdateNodeGraphIntegrationRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerUpdateNodeGraphIntegration', 'id', id);
                            // verify required parameter 'integrationControllerUpdateNodeGraphIntegrationRequest' is not null or undefined
                            (0, common_1.assertParamExists)('integrationControllerUpdateNodeGraphIntegration', 'integrationControllerUpdateNodeGraphIntegrationRequest', integrationControllerUpdateNodeGraphIntegrationRequest);
                            localVarPath = "/integrations/nodes/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(integrationControllerUpdateNodeGraphIntegrationRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IntegrationApiAxiosParamCreator = IntegrationApiAxiosParamCreator;
/**
 * IntegrationApi - functional programming interface
 * @export
 */
var IntegrationApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IntegrationApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create an HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Create http integration
         * @param {IntegrationControllerGetHTTPIntegrations200ResponseInner} integrationControllerGetHTTPIntegrations200ResponseInner HttpIntegration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerCreateHTTPIntegration: function (integrationControllerGetHTTPIntegrations200ResponseInner, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerCreateHTTPIntegration(integrationControllerGetHTTPIntegrations200ResponseInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerCreateHTTPIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a Node Graph integration Resource: integrations Authorized roles: administrator
         * @summary Create node graph integration
         * @param {IntegrationControllerGetNodeGraphIntegrations200ResponseInner} integrationControllerGetNodeGraphIntegrations200ResponseInner NodeGraphIntegration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerCreateNodeGraphIntegration: function (integrationControllerGetNodeGraphIntegrations200ResponseInner, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerCreateNodeGraphIntegration(integrationControllerGetNodeGraphIntegrations200ResponseInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerCreateNodeGraphIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Delete http integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerDeleteHTTPIntegration: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerDeleteHTTPIntegration(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerDeleteHTTPIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete Node Graph integration Resource: integrations Authorized roles: administrator
         * @summary Delete node graph integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerDeleteNodeGraphIntegration: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerDeleteNodeGraphIntegration(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerDeleteNodeGraphIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Execute GET HTTP integration Resource: streams Authorized roles: viewer
         * @summary Execute get http integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerExecuteGetHTTPIntegration: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerExecuteGetHTTPIntegration(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerExecuteGetHTTPIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Execute POST HTTP integration Resource: streams Authorized roles: viewer
         * @summary Execute http integration
         * @param {string} id
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerExecuteHTTPIntegration: function (id, body, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerExecuteHTTPIntegration(id, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerExecuteHTTPIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Execute Node Graph integration Resource: streams Authorized roles: viewer
         * @summary Execute node graph integration
         * @param {string} id
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerExecuteNodeGraphIntegration: function (id, body, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerExecuteNodeGraphIntegration(id, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerExecuteNodeGraphIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Get http integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetHTTPIntegration: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerGetHTTPIntegration(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerGetHTTPIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get HTTP integrations Resource: integrations Authorized roles: administrator
         * @summary Get http integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetHTTPIntegrations: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerGetHTTPIntegrations(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerGetHTTPIntegrations']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get Node Graph integration Resource: integrations Authorized roles: viewer
         * @summary Get node graph integration
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetNodeGraphIntegration: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerGetNodeGraphIntegration(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerGetNodeGraphIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get Node Graph integrations Resource: integrations Authorized roles: administrator
         * @summary Get node graph integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetNodeGraphIntegrations: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerGetNodeGraphIntegrations(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerGetNodeGraphIntegrations']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a Google integration Resource: integrations Authorized roles: administrator
         * @summary Google
         * @param {IntegrationControllerGoogleRequest} integrationControllerGoogleRequest GoogleAuthRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGoogle: function (integrationControllerGoogleRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerGoogle(integrationControllerGoogleRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerGoogle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a Slack integration Resource: integrations Authorized roles: administrator
         * @summary Slack
         * @param {IntegrationControllerSlackRequest} integrationControllerSlackRequest SlackAuthRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerSlack: function (integrationControllerSlackRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerSlack(integrationControllerSlackRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerSlack']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Update http integration
         * @param {string} id
         * @param {IntegrationControllerUpdateHTTPIntegrationRequest} integrationControllerUpdateHTTPIntegrationRequest PartialHttpIntegration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerUpdateHTTPIntegration: function (id, integrationControllerUpdateHTTPIntegrationRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerUpdateHTTPIntegration(id, integrationControllerUpdateHTTPIntegrationRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerUpdateHTTPIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update Node Graph integration Resource: integrations Authorized roles: administrator
         * @summary Update node graph integration
         * @param {string} id
         * @param {IntegrationControllerUpdateNodeGraphIntegrationRequest} integrationControllerUpdateNodeGraphIntegrationRequest PartialNodeGraphIntegration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerUpdateNodeGraphIntegration: function (id, integrationControllerUpdateNodeGraphIntegrationRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.integrationControllerUpdateNodeGraphIntegration(id, integrationControllerUpdateNodeGraphIntegrationRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IntegrationApi.integrationControllerUpdateNodeGraphIntegration']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.IntegrationApiFp = IntegrationApiFp;
/**
 * IntegrationApi - factory interface
 * @export
 */
var IntegrationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IntegrationApiFp)(configuration);
    return {
        /**
         * Create an HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Create http integration
         * @param {IntegrationApiIntegrationControllerCreateHTTPIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerCreateHTTPIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerCreateHTTPIntegration(requestParameters.integrationControllerGetHTTPIntegrations200ResponseInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a Node Graph integration Resource: integrations Authorized roles: administrator
         * @summary Create node graph integration
         * @param {IntegrationApiIntegrationControllerCreateNodeGraphIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerCreateNodeGraphIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerCreateNodeGraphIntegration(requestParameters.integrationControllerGetNodeGraphIntegrations200ResponseInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Delete http integration
         * @param {IntegrationApiIntegrationControllerDeleteHTTPIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerDeleteHTTPIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerDeleteHTTPIntegration(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete Node Graph integration Resource: integrations Authorized roles: administrator
         * @summary Delete node graph integration
         * @param {IntegrationApiIntegrationControllerDeleteNodeGraphIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerDeleteNodeGraphIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerDeleteNodeGraphIntegration(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Execute GET HTTP integration Resource: streams Authorized roles: viewer
         * @summary Execute get http integration
         * @param {IntegrationApiIntegrationControllerExecuteGetHTTPIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerExecuteGetHTTPIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerExecuteGetHTTPIntegration(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Execute POST HTTP integration Resource: streams Authorized roles: viewer
         * @summary Execute http integration
         * @param {IntegrationApiIntegrationControllerExecuteHTTPIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerExecuteHTTPIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerExecuteHTTPIntegration(requestParameters.id, requestParameters.body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Execute Node Graph integration Resource: streams Authorized roles: viewer
         * @summary Execute node graph integration
         * @param {IntegrationApiIntegrationControllerExecuteNodeGraphIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerExecuteNodeGraphIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerExecuteNodeGraphIntegration(requestParameters.id, requestParameters.body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Get http integration
         * @param {IntegrationApiIntegrationControllerGetHTTPIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetHTTPIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerGetHTTPIntegration(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get HTTP integrations Resource: integrations Authorized roles: administrator
         * @summary Get http integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetHTTPIntegrations: function (options) {
            return localVarFp.integrationControllerGetHTTPIntegrations(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get Node Graph integration Resource: integrations Authorized roles: viewer
         * @summary Get node graph integration
         * @param {IntegrationApiIntegrationControllerGetNodeGraphIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetNodeGraphIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerGetNodeGraphIntegration(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get Node Graph integrations Resource: integrations Authorized roles: administrator
         * @summary Get node graph integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGetNodeGraphIntegrations: function (options) {
            return localVarFp.integrationControllerGetNodeGraphIntegrations(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a Google integration Resource: integrations Authorized roles: administrator
         * @summary Google
         * @param {IntegrationApiIntegrationControllerGoogleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerGoogle: function (requestParameters, options) {
            return localVarFp.integrationControllerGoogle(requestParameters.integrationControllerGoogleRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a Slack integration Resource: integrations Authorized roles: administrator
         * @summary Slack
         * @param {IntegrationApiIntegrationControllerSlackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerSlack: function (requestParameters, options) {
            return localVarFp.integrationControllerSlack(requestParameters.integrationControllerSlackRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update HTTP integration Resource: integrations Authorized roles: administrator
         * @summary Update http integration
         * @param {IntegrationApiIntegrationControllerUpdateHTTPIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerUpdateHTTPIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerUpdateHTTPIntegration(requestParameters.id, requestParameters.integrationControllerUpdateHTTPIntegrationRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update Node Graph integration Resource: integrations Authorized roles: administrator
         * @summary Update node graph integration
         * @param {IntegrationApiIntegrationControllerUpdateNodeGraphIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrationControllerUpdateNodeGraphIntegration: function (requestParameters, options) {
            return localVarFp.integrationControllerUpdateNodeGraphIntegration(requestParameters.id, requestParameters.integrationControllerUpdateNodeGraphIntegrationRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IntegrationApiFactory = IntegrationApiFactory;
/**
 * IntegrationApi - object-oriented interface
 * @export
 * @class IntegrationApi
 * @extends {BaseAPI}
 */
var IntegrationApi = /** @class */ (function (_super) {
    __extends(IntegrationApi, _super);
    function IntegrationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create an HTTP integration Resource: integrations Authorized roles: administrator
     * @summary Create http integration
     * @param {IntegrationApiIntegrationControllerCreateHTTPIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerCreateHTTPIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerCreateHTTPIntegration(requestParameters.integrationControllerGetHTTPIntegrations200ResponseInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a Node Graph integration Resource: integrations Authorized roles: administrator
     * @summary Create node graph integration
     * @param {IntegrationApiIntegrationControllerCreateNodeGraphIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerCreateNodeGraphIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerCreateNodeGraphIntegration(requestParameters.integrationControllerGetNodeGraphIntegrations200ResponseInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete HTTP integration Resource: integrations Authorized roles: administrator
     * @summary Delete http integration
     * @param {IntegrationApiIntegrationControllerDeleteHTTPIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerDeleteHTTPIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerDeleteHTTPIntegration(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete Node Graph integration Resource: integrations Authorized roles: administrator
     * @summary Delete node graph integration
     * @param {IntegrationApiIntegrationControllerDeleteNodeGraphIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerDeleteNodeGraphIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerDeleteNodeGraphIntegration(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Execute GET HTTP integration Resource: streams Authorized roles: viewer
     * @summary Execute get http integration
     * @param {IntegrationApiIntegrationControllerExecuteGetHTTPIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerExecuteGetHTTPIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerExecuteGetHTTPIntegration(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Execute POST HTTP integration Resource: streams Authorized roles: viewer
     * @summary Execute http integration
     * @param {IntegrationApiIntegrationControllerExecuteHTTPIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerExecuteHTTPIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerExecuteHTTPIntegration(requestParameters.id, requestParameters.body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Execute Node Graph integration Resource: streams Authorized roles: viewer
     * @summary Execute node graph integration
     * @param {IntegrationApiIntegrationControllerExecuteNodeGraphIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerExecuteNodeGraphIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerExecuteNodeGraphIntegration(requestParameters.id, requestParameters.body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get HTTP integration Resource: integrations Authorized roles: administrator
     * @summary Get http integration
     * @param {IntegrationApiIntegrationControllerGetHTTPIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerGetHTTPIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerGetHTTPIntegration(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get HTTP integrations Resource: integrations Authorized roles: administrator
     * @summary Get http integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerGetHTTPIntegrations = function (options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerGetHTTPIntegrations(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get Node Graph integration Resource: integrations Authorized roles: viewer
     * @summary Get node graph integration
     * @param {IntegrationApiIntegrationControllerGetNodeGraphIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerGetNodeGraphIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerGetNodeGraphIntegration(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get Node Graph integrations Resource: integrations Authorized roles: administrator
     * @summary Get node graph integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerGetNodeGraphIntegrations = function (options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerGetNodeGraphIntegrations(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a Google integration Resource: integrations Authorized roles: administrator
     * @summary Google
     * @param {IntegrationApiIntegrationControllerGoogleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerGoogle = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerGoogle(requestParameters.integrationControllerGoogleRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a Slack integration Resource: integrations Authorized roles: administrator
     * @summary Slack
     * @param {IntegrationApiIntegrationControllerSlackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerSlack = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerSlack(requestParameters.integrationControllerSlackRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update HTTP integration Resource: integrations Authorized roles: administrator
     * @summary Update http integration
     * @param {IntegrationApiIntegrationControllerUpdateHTTPIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerUpdateHTTPIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerUpdateHTTPIntegration(requestParameters.id, requestParameters.integrationControllerUpdateHTTPIntegrationRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update Node Graph integration Resource: integrations Authorized roles: administrator
     * @summary Update node graph integration
     * @param {IntegrationApiIntegrationControllerUpdateNodeGraphIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApi
     */
    IntegrationApi.prototype.integrationControllerUpdateNodeGraphIntegration = function (requestParameters, options) {
        var _this = this;
        return (0, exports.IntegrationApiFp)(this.configuration).integrationControllerUpdateNodeGraphIntegration(requestParameters.id, requestParameters.integrationControllerUpdateNodeGraphIntegrationRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IntegrationApi;
}(base_1.BaseAPI));
exports.IntegrationApi = IntegrationApi;
