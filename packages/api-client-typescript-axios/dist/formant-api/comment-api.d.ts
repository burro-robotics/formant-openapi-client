/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CommentControllerPatchRequest } from '../formant-models';
import { CommentControllerPostRequest } from '../formant-models';
/**
 * CommentApi - axios parameter creator
 * @export
 */
export declare const CommentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a comment Resource: comments Authorized roles: operator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a comment Resource: comments Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a comment Resource: comments Authorized roles: operator
     * @summary Patch
     * @param {string} id
     * @param {CommentControllerPatchRequest} commentControllerPatchRequest PartialComment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerPatch: (id: string, commentControllerPatchRequest: CommentControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a comment Resource: comments Authorized roles: operator
     * @summary Post
     * @param {CommentControllerPostRequest} commentControllerPostRequest Comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerPost: (commentControllerPostRequest: CommentControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CommentApi - functional programming interface
 * @export
 */
export declare const CommentApiFp: (configuration?: Configuration) => {
    /**
     * Delete a comment Resource: comments Authorized roles: operator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a comment Resource: comments Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentControllerPostRequest>>;
    /**
     * Update a comment Resource: comments Authorized roles: operator
     * @summary Patch
     * @param {string} id
     * @param {CommentControllerPatchRequest} commentControllerPatchRequest PartialComment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerPatch(id: string, commentControllerPatchRequest: CommentControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentControllerPostRequest>>;
    /**
     * Create a comment Resource: comments Authorized roles: operator
     * @summary Post
     * @param {CommentControllerPostRequest} commentControllerPostRequest Comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerPost(commentControllerPostRequest: CommentControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentControllerPostRequest>>;
};
/**
 * CommentApi - factory interface
 * @export
 */
export declare const CommentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a comment Resource: comments Authorized roles: operator
     * @summary Delete
     * @param {CommentApiCommentControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerDelete(requestParameters: CommentApiCommentControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a comment Resource: comments Authorized roles: viewer
     * @summary Get one
     * @param {CommentApiCommentControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerGetOne(requestParameters: CommentApiCommentControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentControllerPostRequest>;
    /**
     * Update a comment Resource: comments Authorized roles: operator
     * @summary Patch
     * @param {CommentApiCommentControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerPatch(requestParameters: CommentApiCommentControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentControllerPostRequest>;
    /**
     * Create a comment Resource: comments Authorized roles: operator
     * @summary Post
     * @param {CommentApiCommentControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentControllerPost(requestParameters: CommentApiCommentControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentControllerPostRequest>;
};
/**
 * Request parameters for commentControllerDelete operation in CommentApi.
 * @export
 * @interface CommentApiCommentControllerDeleteRequest
 */
export interface CommentApiCommentControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof CommentApiCommentControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for commentControllerGetOne operation in CommentApi.
 * @export
 * @interface CommentApiCommentControllerGetOneRequest
 */
export interface CommentApiCommentControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof CommentApiCommentControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for commentControllerPatch operation in CommentApi.
 * @export
 * @interface CommentApiCommentControllerPatchRequest
 */
export interface CommentApiCommentControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof CommentApiCommentControllerPatch
     */
    readonly id: string;
    /**
     * PartialComment
     * @type {CommentControllerPatchRequest}
     * @memberof CommentApiCommentControllerPatch
     */
    readonly commentControllerPatchRequest: CommentControllerPatchRequest;
}
/**
 * Request parameters for commentControllerPost operation in CommentApi.
 * @export
 * @interface CommentApiCommentControllerPostRequest
 */
export interface CommentApiCommentControllerPostRequest {
    /**
     * Comment
     * @type {CommentControllerPostRequest}
     * @memberof CommentApiCommentControllerPost
     */
    readonly commentControllerPostRequest: CommentControllerPostRequest;
}
/**
 * CommentApi - object-oriented interface
 * @export
 * @class CommentApi
 * @extends {BaseAPI}
 */
export declare class CommentApi extends BaseAPI {
    /**
     * Delete a comment Resource: comments Authorized roles: operator
     * @summary Delete
     * @param {CommentApiCommentControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    commentControllerDelete(requestParameters: CommentApiCommentControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a comment Resource: comments Authorized roles: viewer
     * @summary Get one
     * @param {CommentApiCommentControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    commentControllerGetOne(requestParameters: CommentApiCommentControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommentControllerPostRequest, any>>;
    /**
     * Update a comment Resource: comments Authorized roles: operator
     * @summary Patch
     * @param {CommentApiCommentControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    commentControllerPatch(requestParameters: CommentApiCommentControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommentControllerPostRequest, any>>;
    /**
     * Create a comment Resource: comments Authorized roles: operator
     * @summary Post
     * @param {CommentApiCommentControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    commentControllerPost(requestParameters: CommentApiCommentControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommentControllerPostRequest, any>>;
}
