/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AccountControllerList200Response } from '../formant-models';
import { AccountControllerPatchRequest } from '../formant-models';
import { AccountControllerPostRequest } from '../formant-models';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export declare const AccountApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an account. Resource: organization Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get account tree. Resource: organization Authorized roles: viewer
     * @summary Get account tree
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerGetAccountTree: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get child accounts. Resource: organization Authorized roles: viewer
     * @summary Get children
     * @param {string} id
     * @param {boolean} [onlyIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerGetChildren: (id: string, onlyIds?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an existing account by account ID. Resource: organization Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all accounts in this Formant organization. Resource: organization Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing account. Resource: organization Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {AccountControllerPatchRequest} accountControllerPatchRequest PartialAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPatch: (id: string, accountControllerPatchRequest: AccountControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new account. Resource: organization Authorized roles: administrator
     * @summary Post
     * @param {AccountControllerPostRequest} accountControllerPostRequest Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPost: (accountControllerPostRequest: AccountControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountApi - functional programming interface
 * @export
 */
export declare const AccountApiFp: (configuration?: Configuration) => {
    /**
     * Delete an account. Resource: organization Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get account tree. Resource: organization Authorized roles: viewer
     * @summary Get account tree
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerGetAccountTree(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerPostRequest>>;
    /**
     * Get child accounts. Resource: organization Authorized roles: viewer
     * @summary Get children
     * @param {string} id
     * @param {boolean} [onlyIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerGetChildren(id: string, onlyIds?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerList200Response>>;
    /**
     * Get an existing account by account ID. Resource: organization Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerPostRequest>>;
    /**
     * List all accounts in this Formant organization. Resource: organization Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerList200Response>>;
    /**
     * Update an existing account. Resource: organization Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {AccountControllerPatchRequest} accountControllerPatchRequest PartialAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPatch(id: string, accountControllerPatchRequest: AccountControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerPostRequest>>;
    /**
     * Create a new account. Resource: organization Authorized roles: administrator
     * @summary Post
     * @param {AccountControllerPostRequest} accountControllerPostRequest Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPost(accountControllerPostRequest: AccountControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerPostRequest>>;
};
/**
 * AccountApi - factory interface
 * @export
 */
export declare const AccountApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an account. Resource: organization Authorized roles: administrator
     * @summary Delete
     * @param {AccountApiAccountControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerDelete(requestParameters: AccountApiAccountControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get account tree. Resource: organization Authorized roles: viewer
     * @summary Get account tree
     * @param {AccountApiAccountControllerGetAccountTreeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerGetAccountTree(requestParameters: AccountApiAccountControllerGetAccountTreeRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerPostRequest>;
    /**
     * Get child accounts. Resource: organization Authorized roles: viewer
     * @summary Get children
     * @param {AccountApiAccountControllerGetChildrenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerGetChildren(requestParameters: AccountApiAccountControllerGetChildrenRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerList200Response>;
    /**
     * Get an existing account by account ID. Resource: organization Authorized roles: viewer
     * @summary Get one
     * @param {AccountApiAccountControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerGetOne(requestParameters: AccountApiAccountControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerPostRequest>;
    /**
     * List all accounts in this Formant organization. Resource: organization Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerList(options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerList200Response>;
    /**
     * Update an existing account. Resource: organization Authorized roles: administrator
     * @summary Patch
     * @param {AccountApiAccountControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPatch(requestParameters: AccountApiAccountControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerPostRequest>;
    /**
     * Create a new account. Resource: organization Authorized roles: administrator
     * @summary Post
     * @param {AccountApiAccountControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPost(requestParameters: AccountApiAccountControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerPostRequest>;
};
/**
 * Request parameters for accountControllerDelete operation in AccountApi.
 * @export
 * @interface AccountApiAccountControllerDeleteRequest
 */
export interface AccountApiAccountControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiAccountControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for accountControllerGetAccountTree operation in AccountApi.
 * @export
 * @interface AccountApiAccountControllerGetAccountTreeRequest
 */
export interface AccountApiAccountControllerGetAccountTreeRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiAccountControllerGetAccountTree
     */
    readonly id: string;
}
/**
 * Request parameters for accountControllerGetChildren operation in AccountApi.
 * @export
 * @interface AccountApiAccountControllerGetChildrenRequest
 */
export interface AccountApiAccountControllerGetChildrenRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiAccountControllerGetChildren
     */
    readonly id: string;
    /**
     *
     * @type {boolean}
     * @memberof AccountApiAccountControllerGetChildren
     */
    readonly onlyIds?: boolean;
}
/**
 * Request parameters for accountControllerGetOne operation in AccountApi.
 * @export
 * @interface AccountApiAccountControllerGetOneRequest
 */
export interface AccountApiAccountControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiAccountControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for accountControllerPatch operation in AccountApi.
 * @export
 * @interface AccountApiAccountControllerPatchRequest
 */
export interface AccountApiAccountControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof AccountApiAccountControllerPatch
     */
    readonly id: string;
    /**
     * PartialAccount
     * @type {AccountControllerPatchRequest}
     * @memberof AccountApiAccountControllerPatch
     */
    readonly accountControllerPatchRequest: AccountControllerPatchRequest;
}
/**
 * Request parameters for accountControllerPost operation in AccountApi.
 * @export
 * @interface AccountApiAccountControllerPostRequest
 */
export interface AccountApiAccountControllerPostRequest {
    /**
     * Account
     * @type {AccountControllerPostRequest}
     * @memberof AccountApiAccountControllerPost
     */
    readonly accountControllerPostRequest: AccountControllerPostRequest;
}
/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export declare class AccountApi extends BaseAPI {
    /**
     * Delete an account. Resource: organization Authorized roles: administrator
     * @summary Delete
     * @param {AccountApiAccountControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountControllerDelete(requestParameters: AccountApiAccountControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get account tree. Resource: organization Authorized roles: viewer
     * @summary Get account tree
     * @param {AccountApiAccountControllerGetAccountTreeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountControllerGetAccountTree(requestParameters: AccountApiAccountControllerGetAccountTreeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountControllerPostRequest, any>>;
    /**
     * Get child accounts. Resource: organization Authorized roles: viewer
     * @summary Get children
     * @param {AccountApiAccountControllerGetChildrenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountControllerGetChildren(requestParameters: AccountApiAccountControllerGetChildrenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountControllerList200Response, any>>;
    /**
     * Get an existing account by account ID. Resource: organization Authorized roles: viewer
     * @summary Get one
     * @param {AccountApiAccountControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountControllerGetOne(requestParameters: AccountApiAccountControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountControllerPostRequest, any>>;
    /**
     * List all accounts in this Formant organization. Resource: organization Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountControllerList200Response, any>>;
    /**
     * Update an existing account. Resource: organization Authorized roles: administrator
     * @summary Patch
     * @param {AccountApiAccountControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountControllerPatch(requestParameters: AccountApiAccountControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountControllerPostRequest, any>>;
    /**
     * Create a new account. Resource: organization Authorized roles: administrator
     * @summary Post
     * @param {AccountApiAccountControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountControllerPost(requestParameters: AccountApiAccountControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountControllerPostRequest, any>>;
}
