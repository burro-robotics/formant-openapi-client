/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CommandControllerPatchRequest } from '../formant-models';
import { CommandControllerPostRequest } from '../formant-models';
import { CommandControllerQuery200Response } from '../formant-models';
import { CommandControllerQueryRequest } from '../formant-models';
/**
 * CommandApi - axios parameter creator
 * @export
 */
export declare const CommandApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get an existing command instance. Resource: commands Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing command instance. Resource: commands Authorized roles: operator
     * @summary Patch
     * @param {string} id
     * @param {CommandControllerPatchRequest} commandControllerPatchRequest PartialCommand
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerPatch: (id: string, commandControllerPatchRequest: CommandControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new command instance. Resource: commands Authorized roles: operator
     * @summary Post
     * @param {CommandControllerPostRequest} commandControllerPostRequest Command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerPost: (commandControllerPostRequest: CommandControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Query undelivered commands by device ID. Resource: commands Authorized roles: viewer
     * @summary Query
     * @param {CommandControllerQueryRequest} commandControllerQueryRequest CommandQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerQuery: (commandControllerQueryRequest: CommandControllerQueryRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CommandApi - functional programming interface
 * @export
 */
export declare const CommandApiFp: (configuration?: Configuration) => {
    /**
     * Get an existing command instance. Resource: commands Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandControllerPostRequest>>;
    /**
     * Update an existing command instance. Resource: commands Authorized roles: operator
     * @summary Patch
     * @param {string} id
     * @param {CommandControllerPatchRequest} commandControllerPatchRequest PartialCommand
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerPatch(id: string, commandControllerPatchRequest: CommandControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandControllerPostRequest>>;
    /**
     * Create a new command instance. Resource: commands Authorized roles: operator
     * @summary Post
     * @param {CommandControllerPostRequest} commandControllerPostRequest Command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerPost(commandControllerPostRequest: CommandControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandControllerPostRequest>>;
    /**
     * Query undelivered commands by device ID. Resource: commands Authorized roles: viewer
     * @summary Query
     * @param {CommandControllerQueryRequest} commandControllerQueryRequest CommandQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerQuery(commandControllerQueryRequest: CommandControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandControllerQuery200Response>>;
};
/**
 * CommandApi - factory interface
 * @export
 */
export declare const CommandApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get an existing command instance. Resource: commands Authorized roles: viewer
     * @summary Get one
     * @param {CommandApiCommandControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerGetOne(requestParameters: CommandApiCommandControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommandControllerPostRequest>;
    /**
     * Update an existing command instance. Resource: commands Authorized roles: operator
     * @summary Patch
     * @param {CommandApiCommandControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerPatch(requestParameters: CommandApiCommandControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommandControllerPostRequest>;
    /**
     * Create a new command instance. Resource: commands Authorized roles: operator
     * @summary Post
     * @param {CommandApiCommandControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerPost(requestParameters: CommandApiCommandControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommandControllerPostRequest>;
    /**
     * Query undelivered commands by device ID. Resource: commands Authorized roles: viewer
     * @summary Query
     * @param {CommandApiCommandControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerQuery(requestParameters: CommandApiCommandControllerQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommandControllerQuery200Response>;
};
/**
 * Request parameters for commandControllerGetOne operation in CommandApi.
 * @export
 * @interface CommandApiCommandControllerGetOneRequest
 */
export interface CommandApiCommandControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof CommandApiCommandControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for commandControllerPatch operation in CommandApi.
 * @export
 * @interface CommandApiCommandControllerPatchRequest
 */
export interface CommandApiCommandControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof CommandApiCommandControllerPatch
     */
    readonly id: string;
    /**
     * PartialCommand
     * @type {CommandControllerPatchRequest}
     * @memberof CommandApiCommandControllerPatch
     */
    readonly commandControllerPatchRequest: CommandControllerPatchRequest;
}
/**
 * Request parameters for commandControllerPost operation in CommandApi.
 * @export
 * @interface CommandApiCommandControllerPostRequest
 */
export interface CommandApiCommandControllerPostRequest {
    /**
     * Command
     * @type {CommandControllerPostRequest}
     * @memberof CommandApiCommandControllerPost
     */
    readonly commandControllerPostRequest: CommandControllerPostRequest;
}
/**
 * Request parameters for commandControllerQuery operation in CommandApi.
 * @export
 * @interface CommandApiCommandControllerQueryRequest
 */
export interface CommandApiCommandControllerQueryRequest {
    /**
     * CommandQuery
     * @type {CommandControllerQueryRequest}
     * @memberof CommandApiCommandControllerQuery
     */
    readonly commandControllerQueryRequest: CommandControllerQueryRequest;
}
/**
 * CommandApi - object-oriented interface
 * @export
 * @class CommandApi
 * @extends {BaseAPI}
 */
export declare class CommandApi extends BaseAPI {
    /**
     * Get an existing command instance. Resource: commands Authorized roles: viewer
     * @summary Get one
     * @param {CommandApiCommandControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandApi
     */
    commandControllerGetOne(requestParameters: CommandApiCommandControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommandControllerPostRequest, any>>;
    /**
     * Update an existing command instance. Resource: commands Authorized roles: operator
     * @summary Patch
     * @param {CommandApiCommandControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandApi
     */
    commandControllerPatch(requestParameters: CommandApiCommandControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommandControllerPostRequest, any>>;
    /**
     * Create a new command instance. Resource: commands Authorized roles: operator
     * @summary Post
     * @param {CommandApiCommandControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandApi
     */
    commandControllerPost(requestParameters: CommandApiCommandControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommandControllerPostRequest, any>>;
    /**
     * Query undelivered commands by device ID. Resource: commands Authorized roles: viewer
     * @summary Query
     * @param {CommandApiCommandControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandApi
     */
    commandControllerQuery(requestParameters: CommandApiCommandControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommandControllerQuery200Response, any>>;
}
