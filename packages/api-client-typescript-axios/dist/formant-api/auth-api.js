"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * AuthApi - axios parameter creator
 * @export
 */
var AuthApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Change the password of your Formant account.
         * @summary Change password
         * @param {AuthControllerChangePasswordRequest} authControllerChangePasswordRequest ChangePasswordRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerChangePassword: function (authControllerChangePasswordRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerChangePasswordRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerChangePassword', 'authControllerChangePasswordRequest', authControllerChangePasswordRequest);
                    localVarPath = "/auth/change-password";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerChangePasswordRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Initiate an SSO login flow to fetch SSO configuration information.
         * @summary Check sso
         * @param {AuthControllerCheckSsoRequest} authControllerCheckSsoRequest CheckSsoRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckSso: function (authControllerCheckSsoRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerCheckSsoRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerCheckSso', 'authControllerCheckSsoRequest', authControllerCheckSsoRequest);
                    localVarPath = "/auth/check-sso";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerCheckSsoRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Complete the \'forgot password?\' workflow with the confirmation code received in an email.
         * @summary Confirm forgot password
         * @param {AuthControllerConfirmForgotPasswordRequest} authControllerConfirmForgotPasswordRequest ConfirmForgotPasswordRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerConfirmForgotPassword: function (authControllerConfirmForgotPasswordRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerConfirmForgotPasswordRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerConfirmForgotPassword', 'authControllerConfirmForgotPasswordRequest', authControllerConfirmForgotPasswordRequest);
                    localVarPath = "/auth/confirm-forgot-password";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerConfirmForgotPasswordRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Create a new service account. Resource: users Authorized roles: administrator
         * @summary Create service account
         * @param {AuthControllerCreateServiceAccountRequest} authControllerCreateServiceAccountRequest CreateServiceAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCreateServiceAccount: function (authControllerCreateServiceAccountRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'authControllerCreateServiceAccountRequest' is not null or undefined
                            (0, common_1.assertParamExists)('authControllerCreateServiceAccount', 'authControllerCreateServiceAccountRequest', authControllerCreateServiceAccountRequest);
                            localVarPath = "/auth/service-account";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerCreateServiceAccountRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Device Credentials Resource: devices Authorized roles: device
         * @summary Device credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDeviceCredentials: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/auth/device-credentials";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Initiate the \'forgot password?\' workflow.
         * @summary Forgot password
         * @param {AuthControllerForgotPasswordRequest} authControllerForgotPasswordRequest ForgotPasswordRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword: function (authControllerForgotPasswordRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerForgotPasswordRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerForgotPassword', 'authControllerForgotPasswordRequest', authControllerForgotPasswordRequest);
                    localVarPath = "/auth/forgot-password";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerForgotPasswordRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get enabled features Resource: devices Authorized roles: viewer, device
         * @summary Get features
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetFeatures: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/auth/features";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Log into your Formant organization.
         * @summary Login
         * @param {AuthControllerLoginRequest} authControllerLoginRequest LoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: function (authControllerLoginRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerLoginRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerLogin', 'authControllerLoginRequest', authControllerLoginRequest);
                    localVarPath = "/auth/login";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerLoginRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Generate an auth token with limited access based on provided tag set. For use in customer portals.
         * @summary Login embed
         * @param {AuthControllerLoginEmbedRequest} authControllerLoginEmbedRequest LoginEmbedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginEmbed: function (authControllerLoginEmbedRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerLoginEmbedRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerLoginEmbed', 'authControllerLoginEmbedRequest', authControllerLoginEmbedRequest);
                    localVarPath = "/auth/login-embed";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerLoginEmbedRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Log in with external token.
         * @summary Login external
         * @param {AuthControllerLoginSsoRequest} authControllerLoginSsoRequest ExternalLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginExternal: function (authControllerLoginSsoRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerLoginSsoRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerLoginExternal', 'authControllerLoginSsoRequest', authControllerLoginSsoRequest);
                    localVarPath = "/auth/login-external";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerLoginSsoRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Log in with a Google token.
         * @summary Login google
         * @param {AuthControllerLoginGoogleRequest} authControllerLoginGoogleRequest GoogleLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginGoogle: function (authControllerLoginGoogleRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerLoginGoogleRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerLoginGoogle', 'authControllerLoginGoogleRequest', authControllerLoginGoogleRequest);
                    localVarPath = "/auth/login-google";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerLoginGoogleRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Log in with an SSO token.
         * @summary Login sso
         * @param {AuthControllerLoginSsoRequest} authControllerLoginSsoRequest ExternalLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginSso: function (authControllerLoginSsoRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerLoginSsoRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerLoginSso', 'authControllerLoginSsoRequest', authControllerLoginSsoRequest);
                    localVarPath = "/auth/login-sso";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerLoginSsoRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Refresh
         * @summary Refresh
         * @param {AuthControllerRefreshRequest} authControllerRefreshRequest RefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (authControllerRefreshRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerRefreshRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerRefresh', 'authControllerRefreshRequest', authControllerRefreshRequest);
                    localVarPath = "/auth/refresh";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerRefreshRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Resend the confirmation code to join a Formant organization.
         * @summary Resend confirmation code
         * @param {AuthControllerResendConfirmationCodeRequest} authControllerResendConfirmationCodeRequest ResendConfirmationCodeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendConfirmationCode: function (authControllerResendConfirmationCodeRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerResendConfirmationCodeRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerResendConfirmationCode', 'authControllerResendConfirmationCodeRequest', authControllerResendConfirmationCodeRequest);
                    localVarPath = "/auth/resend-confirmation-code";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerResendConfirmationCodeRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Resend the invitation to your Formant organization.
         * @summary Resend invitation
         * @param {AuthControllerResendInvitationRequest} authControllerResendInvitationRequest ResendInvitationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendInvitation: function (authControllerResendInvitationRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authControllerResendInvitationRequest' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerResendInvitation', 'authControllerResendInvitationRequest', authControllerResendInvitationRequest);
                    localVarPath = "/auth/resend-invitation";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authControllerResendInvitationRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
var AuthApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         * Change the password of your Formant account.
         * @summary Change password
         * @param {AuthControllerChangePasswordRequest} authControllerChangePasswordRequest ChangePasswordRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerChangePassword: function (authControllerChangePasswordRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerChangePassword(authControllerChangePasswordRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerChangePassword']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Initiate an SSO login flow to fetch SSO configuration information.
         * @summary Check sso
         * @param {AuthControllerCheckSsoRequest} authControllerCheckSsoRequest CheckSsoRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckSso: function (authControllerCheckSsoRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerCheckSso(authControllerCheckSsoRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerCheckSso']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Complete the \'forgot password?\' workflow with the confirmation code received in an email.
         * @summary Confirm forgot password
         * @param {AuthControllerConfirmForgotPasswordRequest} authControllerConfirmForgotPasswordRequest ConfirmForgotPasswordRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerConfirmForgotPassword: function (authControllerConfirmForgotPasswordRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerConfirmForgotPassword(authControllerConfirmForgotPasswordRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerConfirmForgotPassword']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a new service account. Resource: users Authorized roles: administrator
         * @summary Create service account
         * @param {AuthControllerCreateServiceAccountRequest} authControllerCreateServiceAccountRequest CreateServiceAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCreateServiceAccount: function (authControllerCreateServiceAccountRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerCreateServiceAccount(authControllerCreateServiceAccountRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerCreateServiceAccount']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Device Credentials Resource: devices Authorized roles: device
         * @summary Device credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDeviceCredentials: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerDeviceCredentials(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerDeviceCredentials']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Initiate the \'forgot password?\' workflow.
         * @summary Forgot password
         * @param {AuthControllerForgotPasswordRequest} authControllerForgotPasswordRequest ForgotPasswordRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword: function (authControllerForgotPasswordRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerForgotPassword(authControllerForgotPasswordRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerForgotPassword']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get enabled features Resource: devices Authorized roles: viewer, device
         * @summary Get features
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetFeatures: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGetFeatures(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGetFeatures']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Log into your Formant organization.
         * @summary Login
         * @param {AuthControllerLoginRequest} authControllerLoginRequest LoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: function (authControllerLoginRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerLogin(authControllerLoginRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerLogin']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Generate an auth token with limited access based on provided tag set. For use in customer portals.
         * @summary Login embed
         * @param {AuthControllerLoginEmbedRequest} authControllerLoginEmbedRequest LoginEmbedRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginEmbed: function (authControllerLoginEmbedRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerLoginEmbed(authControllerLoginEmbedRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerLoginEmbed']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Log in with external token.
         * @summary Login external
         * @param {AuthControllerLoginSsoRequest} authControllerLoginSsoRequest ExternalLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginExternal: function (authControllerLoginSsoRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerLoginExternal(authControllerLoginSsoRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerLoginExternal']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Log in with a Google token.
         * @summary Login google
         * @param {AuthControllerLoginGoogleRequest} authControllerLoginGoogleRequest GoogleLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginGoogle: function (authControllerLoginGoogleRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerLoginGoogle(authControllerLoginGoogleRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerLoginGoogle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Log in with an SSO token.
         * @summary Login sso
         * @param {AuthControllerLoginSsoRequest} authControllerLoginSsoRequest ExternalLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginSso: function (authControllerLoginSsoRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerLoginSso(authControllerLoginSsoRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerLoginSso']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Refresh
         * @summary Refresh
         * @param {AuthControllerRefreshRequest} authControllerRefreshRequest RefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (authControllerRefreshRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerRefresh(authControllerRefreshRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerRefresh']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Resend the confirmation code to join a Formant organization.
         * @summary Resend confirmation code
         * @param {AuthControllerResendConfirmationCodeRequest} authControllerResendConfirmationCodeRequest ResendConfirmationCodeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendConfirmationCode: function (authControllerResendConfirmationCodeRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerResendConfirmationCode(authControllerResendConfirmationCodeRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerResendConfirmationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Resend the invitation to your Formant organization.
         * @summary Resend invitation
         * @param {AuthControllerResendInvitationRequest} authControllerResendInvitationRequest ResendInvitationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendInvitation: function (authControllerResendInvitationRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerResendInvitation(authControllerResendInvitationRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerResendInvitation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
var AuthApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         * Change the password of your Formant account.
         * @summary Change password
         * @param {AuthApiAuthControllerChangePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerChangePassword: function (requestParameters, options) {
            return localVarFp.authControllerChangePassword(requestParameters.authControllerChangePasswordRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Initiate an SSO login flow to fetch SSO configuration information.
         * @summary Check sso
         * @param {AuthApiAuthControllerCheckSsoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckSso: function (requestParameters, options) {
            return localVarFp.authControllerCheckSso(requestParameters.authControllerCheckSsoRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Complete the \'forgot password?\' workflow with the confirmation code received in an email.
         * @summary Confirm forgot password
         * @param {AuthApiAuthControllerConfirmForgotPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerConfirmForgotPassword: function (requestParameters, options) {
            return localVarFp.authControllerConfirmForgotPassword(requestParameters.authControllerConfirmForgotPasswordRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a new service account. Resource: users Authorized roles: administrator
         * @summary Create service account
         * @param {AuthApiAuthControllerCreateServiceAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCreateServiceAccount: function (requestParameters, options) {
            return localVarFp.authControllerCreateServiceAccount(requestParameters.authControllerCreateServiceAccountRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Device Credentials Resource: devices Authorized roles: device
         * @summary Device credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDeviceCredentials: function (options) {
            return localVarFp.authControllerDeviceCredentials(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Initiate the \'forgot password?\' workflow.
         * @summary Forgot password
         * @param {AuthApiAuthControllerForgotPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword: function (requestParameters, options) {
            return localVarFp.authControllerForgotPassword(requestParameters.authControllerForgotPasswordRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get enabled features Resource: devices Authorized roles: viewer, device
         * @summary Get features
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetFeatures: function (options) {
            return localVarFp.authControllerGetFeatures(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Log into your Formant organization.
         * @summary Login
         * @param {AuthApiAuthControllerLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: function (requestParameters, options) {
            return localVarFp.authControllerLogin(requestParameters.authControllerLoginRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Generate an auth token with limited access based on provided tag set. For use in customer portals.
         * @summary Login embed
         * @param {AuthApiAuthControllerLoginEmbedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginEmbed: function (requestParameters, options) {
            return localVarFp.authControllerLoginEmbed(requestParameters.authControllerLoginEmbedRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Log in with external token.
         * @summary Login external
         * @param {AuthApiAuthControllerLoginExternalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginExternal: function (requestParameters, options) {
            return localVarFp.authControllerLoginExternal(requestParameters.authControllerLoginSsoRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Log in with a Google token.
         * @summary Login google
         * @param {AuthApiAuthControllerLoginGoogleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginGoogle: function (requestParameters, options) {
            return localVarFp.authControllerLoginGoogle(requestParameters.authControllerLoginGoogleRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Log in with an SSO token.
         * @summary Login sso
         * @param {AuthApiAuthControllerLoginSsoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginSso: function (requestParameters, options) {
            return localVarFp.authControllerLoginSso(requestParameters.authControllerLoginSsoRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Refresh
         * @summary Refresh
         * @param {AuthApiAuthControllerRefreshRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (requestParameters, options) {
            return localVarFp.authControllerRefresh(requestParameters.authControllerRefreshRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Resend the confirmation code to join a Formant organization.
         * @summary Resend confirmation code
         * @param {AuthApiAuthControllerResendConfirmationCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendConfirmationCode: function (requestParameters, options) {
            return localVarFp.authControllerResendConfirmationCode(requestParameters.authControllerResendConfirmationCodeRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Resend the invitation to your Formant organization.
         * @summary Resend invitation
         * @param {AuthApiAuthControllerResendInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendInvitation: function (requestParameters, options) {
            return localVarFp.authControllerResendInvitation(requestParameters.authControllerResendInvitationRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Change the password of your Formant account.
     * @summary Change password
     * @param {AuthApiAuthControllerChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerChangePassword = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerChangePassword(requestParameters.authControllerChangePasswordRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Initiate an SSO login flow to fetch SSO configuration information.
     * @summary Check sso
     * @param {AuthApiAuthControllerCheckSsoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerCheckSso = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerCheckSso(requestParameters.authControllerCheckSsoRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Complete the \'forgot password?\' workflow with the confirmation code received in an email.
     * @summary Confirm forgot password
     * @param {AuthApiAuthControllerConfirmForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerConfirmForgotPassword = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerConfirmForgotPassword(requestParameters.authControllerConfirmForgotPasswordRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a new service account. Resource: users Authorized roles: administrator
     * @summary Create service account
     * @param {AuthApiAuthControllerCreateServiceAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerCreateServiceAccount = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerCreateServiceAccount(requestParameters.authControllerCreateServiceAccountRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Device Credentials Resource: devices Authorized roles: device
     * @summary Device credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerDeviceCredentials = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerDeviceCredentials(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Initiate the \'forgot password?\' workflow.
     * @summary Forgot password
     * @param {AuthApiAuthControllerForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerForgotPassword = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerForgotPassword(requestParameters.authControllerForgotPasswordRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get enabled features Resource: devices Authorized roles: viewer, device
     * @summary Get features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerGetFeatures = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerGetFeatures(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Log into your Formant organization.
     * @summary Login
     * @param {AuthApiAuthControllerLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerLogin = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerLogin(requestParameters.authControllerLoginRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Generate an auth token with limited access based on provided tag set. For use in customer portals.
     * @summary Login embed
     * @param {AuthApiAuthControllerLoginEmbedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerLoginEmbed = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerLoginEmbed(requestParameters.authControllerLoginEmbedRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Log in with external token.
     * @summary Login external
     * @param {AuthApiAuthControllerLoginExternalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerLoginExternal = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerLoginExternal(requestParameters.authControllerLoginSsoRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Log in with a Google token.
     * @summary Login google
     * @param {AuthApiAuthControllerLoginGoogleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerLoginGoogle = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerLoginGoogle(requestParameters.authControllerLoginGoogleRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Log in with an SSO token.
     * @summary Login sso
     * @param {AuthApiAuthControllerLoginSsoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerLoginSso = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerLoginSso(requestParameters.authControllerLoginSsoRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Refresh
     * @summary Refresh
     * @param {AuthApiAuthControllerRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerRefresh = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerRefresh(requestParameters.authControllerRefreshRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Resend the confirmation code to join a Formant organization.
     * @summary Resend confirmation code
     * @param {AuthApiAuthControllerResendConfirmationCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerResendConfirmationCode = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerResendConfirmationCode(requestParameters.authControllerResendConfirmationCodeRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Resend the invitation to your Formant organization.
     * @summary Resend invitation
     * @param {AuthApiAuthControllerResendInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerResendInvitation = function (requestParameters, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerResendInvitation(requestParameters.authControllerResendInvitationRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthApi;
}(base_1.BaseAPI));
exports.AuthApi = AuthApi;
