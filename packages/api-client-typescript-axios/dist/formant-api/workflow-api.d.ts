/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { DeviceControllerGetViews200Response } from '../formant-models';
import { WorkflowControllerPatchNodeRequest } from '../formant-models';
import { WorkflowControllerPatchRequest } from '../formant-models';
import { WorkflowControllerPostNodeRequest } from '../formant-models';
import { WorkflowControllerPostRequest } from '../formant-models';
/**
 * WorkflowApi - axios parameter creator
 * @export
 */
export declare const WorkflowApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a workflow Resource: commands Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a group node Resource: commands Authorized roles: administrator
     * @summary Delete node
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerDeleteNode: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute arbitrary workflow
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerExecuteArbitraryWorkflow: (body: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute workflow
     * @param {string} id
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerExecuteWorkflow: (id: string, body: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all workflows Resource: commands Authorized roles: administrator
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all group nodes Resource: commands Authorized roles: administrator
     * @summary Get all nodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetAllNodes: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a workflow history Resource: commands Authorized roles: administrator
     * @summary Get execution history
     * @param {string} id
     * @param {any} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetExecutionHistory: (id: string, offset?: any, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a workflow Resource: commands Authorized roles: administrator
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a group node Resource: commands Authorized roles: administrator
     * @summary Get one node
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetOneNode: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a workflow Resource: commands Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {WorkflowControllerPatchRequest} workflowControllerPatchRequest PartialWorkflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPatch: (id: string, workflowControllerPatchRequest: WorkflowControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a group node Resource: commands Authorized roles: administrator
     * @summary Patch node
     * @param {string} id
     * @param {WorkflowControllerPatchNodeRequest} workflowControllerPatchNodeRequest PartialWorkflowGroupNode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPatchNode: (id: string, workflowControllerPatchNodeRequest: WorkflowControllerPatchNodeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a workflow Resource: commands Authorized roles: administrator
     * @summary Post
     * @param {WorkflowControllerPostRequest} workflowControllerPostRequest Workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPost: (workflowControllerPostRequest: WorkflowControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a group node Resource: commands Authorized roles: administrator
     * @summary Post node
     * @param {WorkflowControllerPostNodeRequest} workflowControllerPostNodeRequest WorkflowGroupNode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPostNode: (workflowControllerPostNodeRequest: WorkflowControllerPostNodeRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkflowApi - functional programming interface
 * @export
 */
export declare const WorkflowApiFp: (configuration?: Configuration) => {
    /**
     * Delete a workflow Resource: commands Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a group node Resource: commands Authorized roles: administrator
     * @summary Delete node
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerDeleteNode(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute arbitrary workflow
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerExecuteArbitraryWorkflow(body: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowControllerPostRequest>>;
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute workflow
     * @param {string} id
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerExecuteWorkflow(id: string, body: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowControllerPostRequest>>;
    /**
     * List all workflows Resource: commands Authorized roles: administrator
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetViews200Response>>;
    /**
     * List all group nodes Resource: commands Authorized roles: administrator
     * @summary Get all nodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetAllNodes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetViews200Response>>;
    /**
     * Get a workflow history Resource: commands Authorized roles: administrator
     * @summary Get execution history
     * @param {string} id
     * @param {any} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetExecutionHistory(id: string, offset?: any, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowControllerPostRequest>>;
    /**
     * Get a workflow Resource: commands Authorized roles: administrator
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowControllerPostRequest>>;
    /**
     * Get a group node Resource: commands Authorized roles: administrator
     * @summary Get one node
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetOneNode(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowControllerPostNodeRequest>>;
    /**
     * Update a workflow Resource: commands Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {WorkflowControllerPatchRequest} workflowControllerPatchRequest PartialWorkflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPatch(id: string, workflowControllerPatchRequest: WorkflowControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowControllerPostRequest>>;
    /**
     * Update a group node Resource: commands Authorized roles: administrator
     * @summary Patch node
     * @param {string} id
     * @param {WorkflowControllerPatchNodeRequest} workflowControllerPatchNodeRequest PartialWorkflowGroupNode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPatchNode(id: string, workflowControllerPatchNodeRequest: WorkflowControllerPatchNodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowControllerPostNodeRequest>>;
    /**
     * Create a workflow Resource: commands Authorized roles: administrator
     * @summary Post
     * @param {WorkflowControllerPostRequest} workflowControllerPostRequest Workflow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPost(workflowControllerPostRequest: WorkflowControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowControllerPostRequest>>;
    /**
     * Create a group node Resource: commands Authorized roles: administrator
     * @summary Post node
     * @param {WorkflowControllerPostNodeRequest} workflowControllerPostNodeRequest WorkflowGroupNode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPostNode(workflowControllerPostNodeRequest: WorkflowControllerPostNodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowControllerPostNodeRequest>>;
};
/**
 * WorkflowApi - factory interface
 * @export
 */
export declare const WorkflowApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a workflow Resource: commands Authorized roles: administrator
     * @summary Delete
     * @param {WorkflowApiWorkflowControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerDelete(requestParameters: WorkflowApiWorkflowControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a group node Resource: commands Authorized roles: administrator
     * @summary Delete node
     * @param {WorkflowApiWorkflowControllerDeleteNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerDeleteNode(requestParameters: WorkflowApiWorkflowControllerDeleteNodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute arbitrary workflow
     * @param {WorkflowApiWorkflowControllerExecuteArbitraryWorkflowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerExecuteArbitraryWorkflow(requestParameters: WorkflowApiWorkflowControllerExecuteArbitraryWorkflowRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowControllerPostRequest>;
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute workflow
     * @param {WorkflowApiWorkflowControllerExecuteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerExecuteWorkflow(requestParameters: WorkflowApiWorkflowControllerExecuteWorkflowRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowControllerPostRequest>;
    /**
     * List all workflows Resource: commands Authorized roles: administrator
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetAll(options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetViews200Response>;
    /**
     * List all group nodes Resource: commands Authorized roles: administrator
     * @summary Get all nodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetAllNodes(options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetViews200Response>;
    /**
     * Get a workflow history Resource: commands Authorized roles: administrator
     * @summary Get execution history
     * @param {WorkflowApiWorkflowControllerGetExecutionHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetExecutionHistory(requestParameters: WorkflowApiWorkflowControllerGetExecutionHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowControllerPostRequest>;
    /**
     * Get a workflow Resource: commands Authorized roles: administrator
     * @summary Get one
     * @param {WorkflowApiWorkflowControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetOne(requestParameters: WorkflowApiWorkflowControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowControllerPostRequest>;
    /**
     * Get a group node Resource: commands Authorized roles: administrator
     * @summary Get one node
     * @param {WorkflowApiWorkflowControllerGetOneNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerGetOneNode(requestParameters: WorkflowApiWorkflowControllerGetOneNodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowControllerPostNodeRequest>;
    /**
     * Update a workflow Resource: commands Authorized roles: administrator
     * @summary Patch
     * @param {WorkflowApiWorkflowControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPatch(requestParameters: WorkflowApiWorkflowControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowControllerPostRequest>;
    /**
     * Update a group node Resource: commands Authorized roles: administrator
     * @summary Patch node
     * @param {WorkflowApiWorkflowControllerPatchNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPatchNode(requestParameters: WorkflowApiWorkflowControllerPatchNodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowControllerPostNodeRequest>;
    /**
     * Create a workflow Resource: commands Authorized roles: administrator
     * @summary Post
     * @param {WorkflowApiWorkflowControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPost(requestParameters: WorkflowApiWorkflowControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowControllerPostRequest>;
    /**
     * Create a group node Resource: commands Authorized roles: administrator
     * @summary Post node
     * @param {WorkflowApiWorkflowControllerPostNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowControllerPostNode(requestParameters: WorkflowApiWorkflowControllerPostNodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowControllerPostNodeRequest>;
};
/**
 * Request parameters for workflowControllerDelete operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerDeleteRequest
 */
export interface WorkflowApiWorkflowControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof WorkflowApiWorkflowControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for workflowControllerDeleteNode operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerDeleteNodeRequest
 */
export interface WorkflowApiWorkflowControllerDeleteNodeRequest {
    /**
     *
     * @type {string}
     * @memberof WorkflowApiWorkflowControllerDeleteNode
     */
    readonly id: string;
}
/**
 * Request parameters for workflowControllerExecuteArbitraryWorkflow operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerExecuteArbitraryWorkflowRequest
 */
export interface WorkflowApiWorkflowControllerExecuteArbitraryWorkflowRequest {
    /**
     *
     * @type {any}
     * @memberof WorkflowApiWorkflowControllerExecuteArbitraryWorkflow
     */
    readonly body: any;
}
/**
 * Request parameters for workflowControllerExecuteWorkflow operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerExecuteWorkflowRequest
 */
export interface WorkflowApiWorkflowControllerExecuteWorkflowRequest {
    /**
     *
     * @type {string}
     * @memberof WorkflowApiWorkflowControllerExecuteWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {any}
     * @memberof WorkflowApiWorkflowControllerExecuteWorkflow
     */
    readonly body: any;
}
/**
 * Request parameters for workflowControllerGetExecutionHistory operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerGetExecutionHistoryRequest
 */
export interface WorkflowApiWorkflowControllerGetExecutionHistoryRequest {
    /**
     *
     * @type {string}
     * @memberof WorkflowApiWorkflowControllerGetExecutionHistory
     */
    readonly id: string;
    /**
     *
     * @type {any}
     * @memberof WorkflowApiWorkflowControllerGetExecutionHistory
     */
    readonly offset?: any;
    /**
     *
     * @type {number}
     * @memberof WorkflowApiWorkflowControllerGetExecutionHistory
     */
    readonly limit?: number;
}
/**
 * Request parameters for workflowControllerGetOne operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerGetOneRequest
 */
export interface WorkflowApiWorkflowControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof WorkflowApiWorkflowControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for workflowControllerGetOneNode operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerGetOneNodeRequest
 */
export interface WorkflowApiWorkflowControllerGetOneNodeRequest {
    /**
     *
     * @type {string}
     * @memberof WorkflowApiWorkflowControllerGetOneNode
     */
    readonly id: string;
}
/**
 * Request parameters for workflowControllerPatch operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerPatchRequest
 */
export interface WorkflowApiWorkflowControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof WorkflowApiWorkflowControllerPatch
     */
    readonly id: string;
    /**
     * PartialWorkflow
     * @type {WorkflowControllerPatchRequest}
     * @memberof WorkflowApiWorkflowControllerPatch
     */
    readonly workflowControllerPatchRequest: WorkflowControllerPatchRequest;
}
/**
 * Request parameters for workflowControllerPatchNode operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerPatchNodeRequest
 */
export interface WorkflowApiWorkflowControllerPatchNodeRequest {
    /**
     *
     * @type {string}
     * @memberof WorkflowApiWorkflowControllerPatchNode
     */
    readonly id: string;
    /**
     * PartialWorkflowGroupNode
     * @type {WorkflowControllerPatchNodeRequest}
     * @memberof WorkflowApiWorkflowControllerPatchNode
     */
    readonly workflowControllerPatchNodeRequest: WorkflowControllerPatchNodeRequest;
}
/**
 * Request parameters for workflowControllerPost operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerPostRequest
 */
export interface WorkflowApiWorkflowControllerPostRequest {
    /**
     * Workflow
     * @type {WorkflowControllerPostRequest}
     * @memberof WorkflowApiWorkflowControllerPost
     */
    readonly workflowControllerPostRequest: WorkflowControllerPostRequest;
}
/**
 * Request parameters for workflowControllerPostNode operation in WorkflowApi.
 * @export
 * @interface WorkflowApiWorkflowControllerPostNodeRequest
 */
export interface WorkflowApiWorkflowControllerPostNodeRequest {
    /**
     * WorkflowGroupNode
     * @type {WorkflowControllerPostNodeRequest}
     * @memberof WorkflowApiWorkflowControllerPostNode
     */
    readonly workflowControllerPostNodeRequest: WorkflowControllerPostNodeRequest;
}
/**
 * WorkflowApi - object-oriented interface
 * @export
 * @class WorkflowApi
 * @extends {BaseAPI}
 */
export declare class WorkflowApi extends BaseAPI {
    /**
     * Delete a workflow Resource: commands Authorized roles: administrator
     * @summary Delete
     * @param {WorkflowApiWorkflowControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerDelete(requestParameters: WorkflowApiWorkflowControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a group node Resource: commands Authorized roles: administrator
     * @summary Delete node
     * @param {WorkflowApiWorkflowControllerDeleteNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerDeleteNode(requestParameters: WorkflowApiWorkflowControllerDeleteNodeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute arbitrary workflow
     * @param {WorkflowApiWorkflowControllerExecuteArbitraryWorkflowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerExecuteArbitraryWorkflow(requestParameters: WorkflowApiWorkflowControllerExecuteArbitraryWorkflowRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowControllerPostRequest, any>>;
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute workflow
     * @param {WorkflowApiWorkflowControllerExecuteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerExecuteWorkflow(requestParameters: WorkflowApiWorkflowControllerExecuteWorkflowRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowControllerPostRequest, any>>;
    /**
     * List all workflows Resource: commands Authorized roles: administrator
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerGetAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetViews200Response, any>>;
    /**
     * List all group nodes Resource: commands Authorized roles: administrator
     * @summary Get all nodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerGetAllNodes(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetViews200Response, any>>;
    /**
     * Get a workflow history Resource: commands Authorized roles: administrator
     * @summary Get execution history
     * @param {WorkflowApiWorkflowControllerGetExecutionHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerGetExecutionHistory(requestParameters: WorkflowApiWorkflowControllerGetExecutionHistoryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowControllerPostRequest, any>>;
    /**
     * Get a workflow Resource: commands Authorized roles: administrator
     * @summary Get one
     * @param {WorkflowApiWorkflowControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerGetOne(requestParameters: WorkflowApiWorkflowControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowControllerPostRequest, any>>;
    /**
     * Get a group node Resource: commands Authorized roles: administrator
     * @summary Get one node
     * @param {WorkflowApiWorkflowControllerGetOneNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerGetOneNode(requestParameters: WorkflowApiWorkflowControllerGetOneNodeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowControllerPostNodeRequest, any>>;
    /**
     * Update a workflow Resource: commands Authorized roles: administrator
     * @summary Patch
     * @param {WorkflowApiWorkflowControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerPatch(requestParameters: WorkflowApiWorkflowControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowControllerPostRequest, any>>;
    /**
     * Update a group node Resource: commands Authorized roles: administrator
     * @summary Patch node
     * @param {WorkflowApiWorkflowControllerPatchNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerPatchNode(requestParameters: WorkflowApiWorkflowControllerPatchNodeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowControllerPostNodeRequest, any>>;
    /**
     * Create a workflow Resource: commands Authorized roles: administrator
     * @summary Post
     * @param {WorkflowApiWorkflowControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerPost(requestParameters: WorkflowApiWorkflowControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowControllerPostRequest, any>>;
    /**
     * Create a group node Resource: commands Authorized roles: administrator
     * @summary Post node
     * @param {WorkflowApiWorkflowControllerPostNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    workflowControllerPostNode(requestParameters: WorkflowApiWorkflowControllerPostNodeRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowControllerPostNodeRequest, any>>;
}
