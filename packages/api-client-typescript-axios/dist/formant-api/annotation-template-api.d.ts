/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AnnotationTemplateControllerInspectSpreadsheet200Response } from '../formant-models';
import { AnnotationTemplateControllerInspectSpreadsheetRequest } from '../formant-models';
import { AnnotationTemplateControllerList200Response } from '../formant-models';
import { AnnotationTemplateControllerPatchRequest } from '../formant-models';
import { AnnotationTemplateControllerPostRequest } from '../formant-models';
import { AnnotationTemplateControllerQueryAnnotationFieldValues200Response } from '../formant-models';
import { AnnotationTemplateControllerQueryAnnotationFieldValuesRequest } from '../formant-models';
/**
 * AnnotationTemplateApi - axios parameter creator
 * @export
 */
export declare const AnnotationTemplateApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an annotation template. Resource: annotations Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an existing annotation template. Resource: annotations Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns information about the Spreadsheet and its content Resource: annotations Authorized roles: viewer
     * @summary Inspect spreadsheet
     * @param {AnnotationTemplateControllerInspectSpreadsheetRequest} annotationTemplateControllerInspectSpreadsheetRequest InspectSpreadsheetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerInspectSpreadsheet: (annotationTemplateControllerInspectSpreadsheetRequest: AnnotationTemplateControllerInspectSpreadsheetRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List annotation templates in your organization. Resource: annotations Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing annotation template. Resource: annotations Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {AnnotationTemplateControllerPatchRequest} annotationTemplateControllerPatchRequest PartialAnnotationTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerPatch: (id: string, annotationTemplateControllerPatchRequest: AnnotationTemplateControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new annotation template. Resource: annotations Authorized roles: administrator
     * @summary Post
     * @param {AnnotationTemplateControllerPostRequest} annotationTemplateControllerPostRequest AnnotationTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerPost: (annotationTemplateControllerPostRequest: AnnotationTemplateControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Query annotation template field values Resource: annotations Authorized roles: viewer
     * @summary Query annotation field values
     * @param {AnnotationTemplateControllerQueryAnnotationFieldValuesRequest} annotationTemplateControllerQueryAnnotationFieldValuesRequest AnnotationFieldValuesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerQueryAnnotationFieldValues: (annotationTemplateControllerQueryAnnotationFieldValuesRequest: AnnotationTemplateControllerQueryAnnotationFieldValuesRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AnnotationTemplateApi - functional programming interface
 * @export
 */
export declare const AnnotationTemplateApiFp: (configuration?: Configuration) => {
    /**
     * Delete an annotation template. Resource: annotations Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get an existing annotation template. Resource: annotations Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationTemplateControllerPostRequest>>;
    /**
     * Returns information about the Spreadsheet and its content Resource: annotations Authorized roles: viewer
     * @summary Inspect spreadsheet
     * @param {AnnotationTemplateControllerInspectSpreadsheetRequest} annotationTemplateControllerInspectSpreadsheetRequest InspectSpreadsheetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerInspectSpreadsheet(annotationTemplateControllerInspectSpreadsheetRequest: AnnotationTemplateControllerInspectSpreadsheetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationTemplateControllerInspectSpreadsheet200Response>>;
    /**
     * List annotation templates in your organization. Resource: annotations Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationTemplateControllerList200Response>>;
    /**
     * Update an existing annotation template. Resource: annotations Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {AnnotationTemplateControllerPatchRequest} annotationTemplateControllerPatchRequest PartialAnnotationTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerPatch(id: string, annotationTemplateControllerPatchRequest: AnnotationTemplateControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationTemplateControllerPostRequest>>;
    /**
     * Create a new annotation template. Resource: annotations Authorized roles: administrator
     * @summary Post
     * @param {AnnotationTemplateControllerPostRequest} annotationTemplateControllerPostRequest AnnotationTemplate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerPost(annotationTemplateControllerPostRequest: AnnotationTemplateControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationTemplateControllerPostRequest>>;
    /**
     * Query annotation template field values Resource: annotations Authorized roles: viewer
     * @summary Query annotation field values
     * @param {AnnotationTemplateControllerQueryAnnotationFieldValuesRequest} annotationTemplateControllerQueryAnnotationFieldValuesRequest AnnotationFieldValuesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerQueryAnnotationFieldValues(annotationTemplateControllerQueryAnnotationFieldValuesRequest: AnnotationTemplateControllerQueryAnnotationFieldValuesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationTemplateControllerQueryAnnotationFieldValues200Response>>;
};
/**
 * AnnotationTemplateApi - factory interface
 * @export
 */
export declare const AnnotationTemplateApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an annotation template. Resource: annotations Authorized roles: administrator
     * @summary Delete
     * @param {AnnotationTemplateApiAnnotationTemplateControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerDelete(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get an existing annotation template. Resource: annotations Authorized roles: viewer
     * @summary Get one
     * @param {AnnotationTemplateApiAnnotationTemplateControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerGetOne(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationTemplateControllerPostRequest>;
    /**
     * Returns information about the Spreadsheet and its content Resource: annotations Authorized roles: viewer
     * @summary Inspect spreadsheet
     * @param {AnnotationTemplateApiAnnotationTemplateControllerInspectSpreadsheetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerInspectSpreadsheet(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerInspectSpreadsheetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationTemplateControllerInspectSpreadsheet200Response>;
    /**
     * List annotation templates in your organization. Resource: annotations Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerList(options?: RawAxiosRequestConfig): AxiosPromise<AnnotationTemplateControllerList200Response>;
    /**
     * Update an existing annotation template. Resource: annotations Authorized roles: administrator
     * @summary Patch
     * @param {AnnotationTemplateApiAnnotationTemplateControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerPatch(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationTemplateControllerPostRequest>;
    /**
     * Create a new annotation template. Resource: annotations Authorized roles: administrator
     * @summary Post
     * @param {AnnotationTemplateApiAnnotationTemplateControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerPost(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationTemplateControllerPostRequest>;
    /**
     * Query annotation template field values Resource: annotations Authorized roles: viewer
     * @summary Query annotation field values
     * @param {AnnotationTemplateApiAnnotationTemplateControllerQueryAnnotationFieldValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annotationTemplateControllerQueryAnnotationFieldValues(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerQueryAnnotationFieldValuesRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationTemplateControllerQueryAnnotationFieldValues200Response>;
};
/**
 * Request parameters for annotationTemplateControllerDelete operation in AnnotationTemplateApi.
 * @export
 * @interface AnnotationTemplateApiAnnotationTemplateControllerDeleteRequest
 */
export interface AnnotationTemplateApiAnnotationTemplateControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof AnnotationTemplateApiAnnotationTemplateControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for annotationTemplateControllerGetOne operation in AnnotationTemplateApi.
 * @export
 * @interface AnnotationTemplateApiAnnotationTemplateControllerGetOneRequest
 */
export interface AnnotationTemplateApiAnnotationTemplateControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof AnnotationTemplateApiAnnotationTemplateControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for annotationTemplateControllerInspectSpreadsheet operation in AnnotationTemplateApi.
 * @export
 * @interface AnnotationTemplateApiAnnotationTemplateControllerInspectSpreadsheetRequest
 */
export interface AnnotationTemplateApiAnnotationTemplateControllerInspectSpreadsheetRequest {
    /**
     * InspectSpreadsheetRequest
     * @type {AnnotationTemplateControllerInspectSpreadsheetRequest}
     * @memberof AnnotationTemplateApiAnnotationTemplateControllerInspectSpreadsheet
     */
    readonly annotationTemplateControllerInspectSpreadsheetRequest: AnnotationTemplateControllerInspectSpreadsheetRequest;
}
/**
 * Request parameters for annotationTemplateControllerPatch operation in AnnotationTemplateApi.
 * @export
 * @interface AnnotationTemplateApiAnnotationTemplateControllerPatchRequest
 */
export interface AnnotationTemplateApiAnnotationTemplateControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof AnnotationTemplateApiAnnotationTemplateControllerPatch
     */
    readonly id: string;
    /**
     * PartialAnnotationTemplate
     * @type {AnnotationTemplateControllerPatchRequest}
     * @memberof AnnotationTemplateApiAnnotationTemplateControllerPatch
     */
    readonly annotationTemplateControllerPatchRequest: AnnotationTemplateControllerPatchRequest;
}
/**
 * Request parameters for annotationTemplateControllerPost operation in AnnotationTemplateApi.
 * @export
 * @interface AnnotationTemplateApiAnnotationTemplateControllerPostRequest
 */
export interface AnnotationTemplateApiAnnotationTemplateControllerPostRequest {
    /**
     * AnnotationTemplate
     * @type {AnnotationTemplateControllerPostRequest}
     * @memberof AnnotationTemplateApiAnnotationTemplateControllerPost
     */
    readonly annotationTemplateControllerPostRequest: AnnotationTemplateControllerPostRequest;
}
/**
 * Request parameters for annotationTemplateControllerQueryAnnotationFieldValues operation in AnnotationTemplateApi.
 * @export
 * @interface AnnotationTemplateApiAnnotationTemplateControllerQueryAnnotationFieldValuesRequest
 */
export interface AnnotationTemplateApiAnnotationTemplateControllerQueryAnnotationFieldValuesRequest {
    /**
     * AnnotationFieldValuesRequest
     * @type {AnnotationTemplateControllerQueryAnnotationFieldValuesRequest}
     * @memberof AnnotationTemplateApiAnnotationTemplateControllerQueryAnnotationFieldValues
     */
    readonly annotationTemplateControllerQueryAnnotationFieldValuesRequest: AnnotationTemplateControllerQueryAnnotationFieldValuesRequest;
}
/**
 * AnnotationTemplateApi - object-oriented interface
 * @export
 * @class AnnotationTemplateApi
 * @extends {BaseAPI}
 */
export declare class AnnotationTemplateApi extends BaseAPI {
    /**
     * Delete an annotation template. Resource: annotations Authorized roles: administrator
     * @summary Delete
     * @param {AnnotationTemplateApiAnnotationTemplateControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationTemplateApi
     */
    annotationTemplateControllerDelete(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get an existing annotation template. Resource: annotations Authorized roles: viewer
     * @summary Get one
     * @param {AnnotationTemplateApiAnnotationTemplateControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationTemplateApi
     */
    annotationTemplateControllerGetOne(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationTemplateControllerPostRequest, any>>;
    /**
     * Returns information about the Spreadsheet and its content Resource: annotations Authorized roles: viewer
     * @summary Inspect spreadsheet
     * @param {AnnotationTemplateApiAnnotationTemplateControllerInspectSpreadsheetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationTemplateApi
     */
    annotationTemplateControllerInspectSpreadsheet(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerInspectSpreadsheetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationTemplateControllerInspectSpreadsheet200Response, any>>;
    /**
     * List annotation templates in your organization. Resource: annotations Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationTemplateApi
     */
    annotationTemplateControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationTemplateControllerList200Response, any>>;
    /**
     * Update an existing annotation template. Resource: annotations Authorized roles: administrator
     * @summary Patch
     * @param {AnnotationTemplateApiAnnotationTemplateControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationTemplateApi
     */
    annotationTemplateControllerPatch(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationTemplateControllerPostRequest, any>>;
    /**
     * Create a new annotation template. Resource: annotations Authorized roles: administrator
     * @summary Post
     * @param {AnnotationTemplateApiAnnotationTemplateControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationTemplateApi
     */
    annotationTemplateControllerPost(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationTemplateControllerPostRequest, any>>;
    /**
     * Query annotation template field values Resource: annotations Authorized roles: viewer
     * @summary Query annotation field values
     * @param {AnnotationTemplateApiAnnotationTemplateControllerQueryAnnotationFieldValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationTemplateApi
     */
    annotationTemplateControllerQueryAnnotationFieldValues(requestParameters: AnnotationTemplateApiAnnotationTemplateControllerQueryAnnotationFieldValuesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationTemplateControllerQueryAnnotationFieldValues200Response, any>>;
}
