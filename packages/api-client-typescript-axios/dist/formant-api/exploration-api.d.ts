/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ExplorationControllerGetAll200Response } from '../formant-models';
import { ExplorationControllerGetAll200ResponseItemsInner } from '../formant-models';
import { ExplorationControllerGetExplorationChat200Response } from '../formant-models';
import { ExplorationControllerPostChatRequest } from '../formant-models';
/**
 * ExplorationApi - axios parameter creator
 * @export
 */
export declare const ExplorationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an exploration Resource: commands Authorized roles: viewer
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an exploration message Resource: commands Authorized roles: viewer
     * @summary Delete message
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerDeleteMessage: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create some speech Resource: commands Authorized roles: viewer
     * @summary Generate speech
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGenerateSpeech: (body: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all explorations Resource: commands Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get context for an exploration Resource: commands Authorized roles: viewer
     * @summary Get context
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetContext: (body: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an exploration Resource: commands Authorized roles: viewer
     * @summary Get exploration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetExploration: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the chat for an exploration Resource: commands Authorized roles: viewer
     * @summary Get exploration chat
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetExplorationChat: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an exploration Resource: commands Authorized roles: viewer
     * @summary Post
     * @param {ExplorationControllerGetAll200ResponseItemsInner} explorationControllerGetAll200ResponseItemsInner Exploration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerPost: (explorationControllerGetAll200ResponseItemsInner: ExplorationControllerGetAll200ResponseItemsInner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a chat message Resource: commands Authorized roles: viewer
     * @summary Post chat
     * @param {string} id
     * @param {ExplorationControllerPostChatRequest} explorationControllerPostChatRequest ChatMessageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerPostChat: (id: string, explorationControllerPostChatRequest: ExplorationControllerPostChatRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create some speech Resource: commands Authorized roles: viewer
     * @summary Transcribe speech
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerTranscribeSpeech: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ExplorationApi - functional programming interface
 * @export
 */
export declare const ExplorationApiFp: (configuration?: Configuration) => {
    /**
     * Delete an exploration Resource: commands Authorized roles: viewer
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete an exploration message Resource: commands Authorized roles: viewer
     * @summary Delete message
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerDeleteMessage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create some speech Resource: commands Authorized roles: viewer
     * @summary Generate speech
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGenerateSpeech(body: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List all explorations Resource: commands Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExplorationControllerGetAll200Response>>;
    /**
     * Get context for an exploration Resource: commands Authorized roles: viewer
     * @summary Get context
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetContext(body: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExplorationControllerGetAll200Response>>;
    /**
     * Get an exploration Resource: commands Authorized roles: viewer
     * @summary Get exploration
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetExploration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExplorationControllerGetAll200ResponseItemsInner>>;
    /**
     * Get the chat for an exploration Resource: commands Authorized roles: viewer
     * @summary Get exploration chat
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetExplorationChat(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExplorationControllerGetExplorationChat200Response>>;
    /**
     * Create an exploration Resource: commands Authorized roles: viewer
     * @summary Post
     * @param {ExplorationControllerGetAll200ResponseItemsInner} explorationControllerGetAll200ResponseItemsInner Exploration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerPost(explorationControllerGetAll200ResponseItemsInner: ExplorationControllerGetAll200ResponseItemsInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExplorationControllerGetAll200ResponseItemsInner>>;
    /**
     * Create a chat message Resource: commands Authorized roles: viewer
     * @summary Post chat
     * @param {string} id
     * @param {ExplorationControllerPostChatRequest} explorationControllerPostChatRequest ChatMessageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerPostChat(id: string, explorationControllerPostChatRequest: ExplorationControllerPostChatRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExplorationControllerGetExplorationChat200Response>>;
    /**
     * Create some speech Resource: commands Authorized roles: viewer
     * @summary Transcribe speech
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerTranscribeSpeech(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ExplorationApi - factory interface
 * @export
 */
export declare const ExplorationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an exploration Resource: commands Authorized roles: viewer
     * @summary Delete
     * @param {ExplorationApiExplorationControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerDelete(requestParameters: ExplorationApiExplorationControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete an exploration message Resource: commands Authorized roles: viewer
     * @summary Delete message
     * @param {ExplorationApiExplorationControllerDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerDeleteMessage(requestParameters: ExplorationApiExplorationControllerDeleteMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Create some speech Resource: commands Authorized roles: viewer
     * @summary Generate speech
     * @param {ExplorationApiExplorationControllerGenerateSpeechRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGenerateSpeech(requestParameters: ExplorationApiExplorationControllerGenerateSpeechRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * List all explorations Resource: commands Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetAll(options?: RawAxiosRequestConfig): AxiosPromise<ExplorationControllerGetAll200Response>;
    /**
     * Get context for an exploration Resource: commands Authorized roles: viewer
     * @summary Get context
     * @param {ExplorationApiExplorationControllerGetContextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetContext(requestParameters: ExplorationApiExplorationControllerGetContextRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExplorationControllerGetAll200Response>;
    /**
     * Get an exploration Resource: commands Authorized roles: viewer
     * @summary Get exploration
     * @param {ExplorationApiExplorationControllerGetExplorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetExploration(requestParameters: ExplorationApiExplorationControllerGetExplorationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExplorationControllerGetAll200ResponseItemsInner>;
    /**
     * Get the chat for an exploration Resource: commands Authorized roles: viewer
     * @summary Get exploration chat
     * @param {ExplorationApiExplorationControllerGetExplorationChatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerGetExplorationChat(requestParameters: ExplorationApiExplorationControllerGetExplorationChatRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExplorationControllerGetExplorationChat200Response>;
    /**
     * Create an exploration Resource: commands Authorized roles: viewer
     * @summary Post
     * @param {ExplorationApiExplorationControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerPost(requestParameters: ExplorationApiExplorationControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExplorationControllerGetAll200ResponseItemsInner>;
    /**
     * Create a chat message Resource: commands Authorized roles: viewer
     * @summary Post chat
     * @param {ExplorationApiExplorationControllerPostChatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerPostChat(requestParameters: ExplorationApiExplorationControllerPostChatRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExplorationControllerGetExplorationChat200Response>;
    /**
     * Create some speech Resource: commands Authorized roles: viewer
     * @summary Transcribe speech
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorationControllerTranscribeSpeech(options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for explorationControllerDelete operation in ExplorationApi.
 * @export
 * @interface ExplorationApiExplorationControllerDeleteRequest
 */
export interface ExplorationApiExplorationControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof ExplorationApiExplorationControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for explorationControllerDeleteMessage operation in ExplorationApi.
 * @export
 * @interface ExplorationApiExplorationControllerDeleteMessageRequest
 */
export interface ExplorationApiExplorationControllerDeleteMessageRequest {
    /**
     *
     * @type {string}
     * @memberof ExplorationApiExplorationControllerDeleteMessage
     */
    readonly id: string;
}
/**
 * Request parameters for explorationControllerGenerateSpeech operation in ExplorationApi.
 * @export
 * @interface ExplorationApiExplorationControllerGenerateSpeechRequest
 */
export interface ExplorationApiExplorationControllerGenerateSpeechRequest {
    /**
     *
     * @type {any}
     * @memberof ExplorationApiExplorationControllerGenerateSpeech
     */
    readonly body: any;
}
/**
 * Request parameters for explorationControllerGetContext operation in ExplorationApi.
 * @export
 * @interface ExplorationApiExplorationControllerGetContextRequest
 */
export interface ExplorationApiExplorationControllerGetContextRequest {
    /**
     *
     * @type {any}
     * @memberof ExplorationApiExplorationControllerGetContext
     */
    readonly body: any;
}
/**
 * Request parameters for explorationControllerGetExploration operation in ExplorationApi.
 * @export
 * @interface ExplorationApiExplorationControllerGetExplorationRequest
 */
export interface ExplorationApiExplorationControllerGetExplorationRequest {
    /**
     *
     * @type {string}
     * @memberof ExplorationApiExplorationControllerGetExploration
     */
    readonly id: string;
}
/**
 * Request parameters for explorationControllerGetExplorationChat operation in ExplorationApi.
 * @export
 * @interface ExplorationApiExplorationControllerGetExplorationChatRequest
 */
export interface ExplorationApiExplorationControllerGetExplorationChatRequest {
    /**
     *
     * @type {string}
     * @memberof ExplorationApiExplorationControllerGetExplorationChat
     */
    readonly id: string;
}
/**
 * Request parameters for explorationControllerPost operation in ExplorationApi.
 * @export
 * @interface ExplorationApiExplorationControllerPostRequest
 */
export interface ExplorationApiExplorationControllerPostRequest {
    /**
     * Exploration
     * @type {ExplorationControllerGetAll200ResponseItemsInner}
     * @memberof ExplorationApiExplorationControllerPost
     */
    readonly explorationControllerGetAll200ResponseItemsInner: ExplorationControllerGetAll200ResponseItemsInner;
}
/**
 * Request parameters for explorationControllerPostChat operation in ExplorationApi.
 * @export
 * @interface ExplorationApiExplorationControllerPostChatRequest
 */
export interface ExplorationApiExplorationControllerPostChatRequest {
    /**
     *
     * @type {string}
     * @memberof ExplorationApiExplorationControllerPostChat
     */
    readonly id: string;
    /**
     * ChatMessageRequest
     * @type {ExplorationControllerPostChatRequest}
     * @memberof ExplorationApiExplorationControllerPostChat
     */
    readonly explorationControllerPostChatRequest: ExplorationControllerPostChatRequest;
}
/**
 * ExplorationApi - object-oriented interface
 * @export
 * @class ExplorationApi
 * @extends {BaseAPI}
 */
export declare class ExplorationApi extends BaseAPI {
    /**
     * Delete an exploration Resource: commands Authorized roles: viewer
     * @summary Delete
     * @param {ExplorationApiExplorationControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerDelete(requestParameters: ExplorationApiExplorationControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete an exploration message Resource: commands Authorized roles: viewer
     * @summary Delete message
     * @param {ExplorationApiExplorationControllerDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerDeleteMessage(requestParameters: ExplorationApiExplorationControllerDeleteMessageRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create some speech Resource: commands Authorized roles: viewer
     * @summary Generate speech
     * @param {ExplorationApiExplorationControllerGenerateSpeechRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerGenerateSpeech(requestParameters: ExplorationApiExplorationControllerGenerateSpeechRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List all explorations Resource: commands Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerGetAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExplorationControllerGetAll200Response, any>>;
    /**
     * Get context for an exploration Resource: commands Authorized roles: viewer
     * @summary Get context
     * @param {ExplorationApiExplorationControllerGetContextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerGetContext(requestParameters: ExplorationApiExplorationControllerGetContextRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExplorationControllerGetAll200Response, any>>;
    /**
     * Get an exploration Resource: commands Authorized roles: viewer
     * @summary Get exploration
     * @param {ExplorationApiExplorationControllerGetExplorationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerGetExploration(requestParameters: ExplorationApiExplorationControllerGetExplorationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExplorationControllerGetAll200ResponseItemsInner, any>>;
    /**
     * Get the chat for an exploration Resource: commands Authorized roles: viewer
     * @summary Get exploration chat
     * @param {ExplorationApiExplorationControllerGetExplorationChatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerGetExplorationChat(requestParameters: ExplorationApiExplorationControllerGetExplorationChatRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExplorationControllerGetExplorationChat200Response, any>>;
    /**
     * Create an exploration Resource: commands Authorized roles: viewer
     * @summary Post
     * @param {ExplorationApiExplorationControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerPost(requestParameters: ExplorationApiExplorationControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExplorationControllerGetAll200ResponseItemsInner, any>>;
    /**
     * Create a chat message Resource: commands Authorized roles: viewer
     * @summary Post chat
     * @param {ExplorationApiExplorationControllerPostChatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerPostChat(requestParameters: ExplorationApiExplorationControllerPostChatRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExplorationControllerGetExplorationChat200Response, any>>;
    /**
     * Create some speech Resource: commands Authorized roles: viewer
     * @summary Transcribe speech
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    explorationControllerTranscribeSpeech(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
