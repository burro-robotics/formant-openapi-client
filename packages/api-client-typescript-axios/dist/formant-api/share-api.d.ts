/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ShareControllerAuthenticate200Response } from '../formant-models';
import { ShareControllerGetAll200Response } from '../formant-models';
import { ShareControllerGetAll200ResponseItemsInner } from '../formant-models';
/**
 * ShareApi - axios parameter creator
 * @export
 */
export declare const ShareApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Authenticate
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerAuthenticate: (code: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke a share Resource: share Authorized roles: operator
     * @summary Delete
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerDelete: (code: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List shares Resource: share Authorized roles: operator
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerGetAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a share
     * @summary Get one
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerGetOne: (code: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ShareApi - functional programming interface
 * @export
 */
export declare const ShareApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Authenticate
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerAuthenticate(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareControllerAuthenticate200Response>>;
    /**
     * Revoke a share Resource: share Authorized roles: operator
     * @summary Delete
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerDelete(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List shares Resource: share Authorized roles: operator
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareControllerGetAll200Response>>;
    /**
     * Get a share
     * @summary Get one
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerGetOne(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareControllerGetAll200ResponseItemsInner>>;
};
/**
 * ShareApi - factory interface
 * @export
 */
export declare const ShareApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Authenticate
     * @param {ShareApiShareControllerAuthenticateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerAuthenticate(requestParameters: ShareApiShareControllerAuthenticateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShareControllerAuthenticate200Response>;
    /**
     * Revoke a share Resource: share Authorized roles: operator
     * @summary Delete
     * @param {ShareApiShareControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerDelete(requestParameters: ShareApiShareControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * List shares Resource: share Authorized roles: operator
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerGetAll(options?: RawAxiosRequestConfig): AxiosPromise<ShareControllerGetAll200Response>;
    /**
     * Get a share
     * @summary Get one
     * @param {ShareApiShareControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareControllerGetOne(requestParameters: ShareApiShareControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShareControllerGetAll200ResponseItemsInner>;
};
/**
 * Request parameters for shareControllerAuthenticate operation in ShareApi.
 * @export
 * @interface ShareApiShareControllerAuthenticateRequest
 */
export interface ShareApiShareControllerAuthenticateRequest {
    /**
     *
     * @type {string}
     * @memberof ShareApiShareControllerAuthenticate
     */
    readonly code: string;
}
/**
 * Request parameters for shareControllerDelete operation in ShareApi.
 * @export
 * @interface ShareApiShareControllerDeleteRequest
 */
export interface ShareApiShareControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof ShareApiShareControllerDelete
     */
    readonly code: string;
}
/**
 * Request parameters for shareControllerGetOne operation in ShareApi.
 * @export
 * @interface ShareApiShareControllerGetOneRequest
 */
export interface ShareApiShareControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof ShareApiShareControllerGetOne
     */
    readonly code: string;
}
/**
 * ShareApi - object-oriented interface
 * @export
 * @class ShareApi
 * @extends {BaseAPI}
 */
export declare class ShareApi extends BaseAPI {
    /**
     *
     * @summary Authenticate
     * @param {ShareApiShareControllerAuthenticateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    shareControllerAuthenticate(requestParameters: ShareApiShareControllerAuthenticateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ShareControllerAuthenticate200Response, any>>;
    /**
     * Revoke a share Resource: share Authorized roles: operator
     * @summary Delete
     * @param {ShareApiShareControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    shareControllerDelete(requestParameters: ShareApiShareControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List shares Resource: share Authorized roles: operator
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    shareControllerGetAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ShareControllerGetAll200Response, any>>;
    /**
     * Get a share
     * @summary Get one
     * @param {ShareApiShareControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    shareControllerGetOne(requestParameters: ShareApiShareControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ShareControllerGetAll200ResponseItemsInner, any>>;
}
