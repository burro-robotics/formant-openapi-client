"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowApi = exports.WorkflowApiFactory = exports.WorkflowApiFp = exports.WorkflowApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * WorkflowApi - axios parameter creator
 * @export
 */
var WorkflowApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Delete a workflow Resource: commands Authorized roles: administrator
         * @summary Delete
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerDelete: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerDelete', 'id', id);
                            localVarPath = "/workflows/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a group node Resource: commands Authorized roles: administrator
         * @summary Delete node
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerDeleteNode: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerDeleteNode', 'id', id);
                            localVarPath = "/workflowsnodes/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
         * @summary Execute arbitrary workflow
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerExecuteArbitraryWorkflow: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'body' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerExecuteArbitraryWorkflow', 'body', body);
                            localVarPath = "/workflows/execute";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
         * @summary Execute workflow
         * @param {string} id
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerExecuteWorkflow: function (id, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerExecuteWorkflow', 'id', id);
                            // verify required parameter 'body' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerExecuteWorkflow', 'body', body);
                            localVarPath = "/workflows/{id}/execute"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all workflows Resource: commands Authorized roles: administrator
         * @summary Get all
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetAll: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/workflows";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all group nodes Resource: commands Authorized roles: administrator
         * @summary Get all nodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetAllNodes: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/workflows/nodes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a workflow history Resource: commands Authorized roles: administrator
         * @summary Get execution history
         * @param {string} id
         * @param {any} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetExecutionHistory: function (id, offset, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _i, _a, _b, key, value, headersFromBaseOptions;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerGetExecutionHistory', 'id', id);
                            localVarPath = "/workflows/{id}/history"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _c.sent();
                            if (offset !== undefined) {
                                for (_i = 0, _a = Object.entries(offset); _i < _a.length; _i++) {
                                    _b = _a[_i], key = _b[0], value = _b[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a workflow Resource: commands Authorized roles: administrator
         * @summary Get one
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetOne: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerGetOne', 'id', id);
                            localVarPath = "/workflows/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a group node Resource: commands Authorized roles: administrator
         * @summary Get one node
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetOneNode: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerGetOneNode', 'id', id);
                            localVarPath = "/workflows/nodes/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a workflow Resource: commands Authorized roles: administrator
         * @summary Patch
         * @param {string} id
         * @param {WorkflowControllerPatchRequest} workflowControllerPatchRequest PartialWorkflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPatch: function (id, workflowControllerPatchRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerPatch', 'id', id);
                            // verify required parameter 'workflowControllerPatchRequest' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerPatch', 'workflowControllerPatchRequest', workflowControllerPatchRequest);
                            localVarPath = "/workflows/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workflowControllerPatchRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a group node Resource: commands Authorized roles: administrator
         * @summary Patch node
         * @param {string} id
         * @param {WorkflowControllerPatchNodeRequest} workflowControllerPatchNodeRequest PartialWorkflowGroupNode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPatchNode: function (id, workflowControllerPatchNodeRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerPatchNode', 'id', id);
                            // verify required parameter 'workflowControllerPatchNodeRequest' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerPatchNode', 'workflowControllerPatchNodeRequest', workflowControllerPatchNodeRequest);
                            localVarPath = "/workflowsnodes/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workflowControllerPatchNodeRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a workflow Resource: commands Authorized roles: administrator
         * @summary Post
         * @param {WorkflowControllerPostRequest} workflowControllerPostRequest Workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPost: function (workflowControllerPostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workflowControllerPostRequest' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerPost', 'workflowControllerPostRequest', workflowControllerPostRequest);
                            localVarPath = "/workflows";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workflowControllerPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a group node Resource: commands Authorized roles: administrator
         * @summary Post node
         * @param {WorkflowControllerPostNodeRequest} workflowControllerPostNodeRequest WorkflowGroupNode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPostNode: function (workflowControllerPostNodeRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workflowControllerPostNodeRequest' is not null or undefined
                            (0, common_1.assertParamExists)('workflowControllerPostNode', 'workflowControllerPostNodeRequest', workflowControllerPostNodeRequest);
                            localVarPath = "/workflows/nodes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workflowControllerPostNodeRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.WorkflowApiAxiosParamCreator = WorkflowApiAxiosParamCreator;
/**
 * WorkflowApi - functional programming interface
 * @export
 */
var WorkflowApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkflowApiAxiosParamCreator)(configuration);
    return {
        /**
         * Delete a workflow Resource: commands Authorized roles: administrator
         * @summary Delete
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerDelete: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete a group node Resource: commands Authorized roles: administrator
         * @summary Delete node
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerDeleteNode: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerDeleteNode(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerDeleteNode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
         * @summary Execute arbitrary workflow
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerExecuteArbitraryWorkflow: function (body, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerExecuteArbitraryWorkflow(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerExecuteArbitraryWorkflow']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
         * @summary Execute workflow
         * @param {string} id
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerExecuteWorkflow: function (id, body, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerExecuteWorkflow(id, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerExecuteWorkflow']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List all workflows Resource: commands Authorized roles: administrator
         * @summary Get all
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetAll: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerGetAll(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerGetAll']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List all group nodes Resource: commands Authorized roles: administrator
         * @summary Get all nodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetAllNodes: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerGetAllNodes(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerGetAllNodes']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a workflow history Resource: commands Authorized roles: administrator
         * @summary Get execution history
         * @param {string} id
         * @param {any} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetExecutionHistory: function (id, offset, limit, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerGetExecutionHistory(id, offset, limit, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerGetExecutionHistory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a workflow Resource: commands Authorized roles: administrator
         * @summary Get one
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetOne: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerGetOne(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerGetOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a group node Resource: commands Authorized roles: administrator
         * @summary Get one node
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetOneNode: function (id, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerGetOneNode(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerGetOneNode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a workflow Resource: commands Authorized roles: administrator
         * @summary Patch
         * @param {string} id
         * @param {WorkflowControllerPatchRequest} workflowControllerPatchRequest PartialWorkflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPatch: function (id, workflowControllerPatchRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerPatch(id, workflowControllerPatchRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerPatch']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a group node Resource: commands Authorized roles: administrator
         * @summary Patch node
         * @param {string} id
         * @param {WorkflowControllerPatchNodeRequest} workflowControllerPatchNodeRequest PartialWorkflowGroupNode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPatchNode: function (id, workflowControllerPatchNodeRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerPatchNode(id, workflowControllerPatchNodeRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerPatchNode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a workflow Resource: commands Authorized roles: administrator
         * @summary Post
         * @param {WorkflowControllerPostRequest} workflowControllerPostRequest Workflow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPost: function (workflowControllerPostRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerPost(workflowControllerPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a group node Resource: commands Authorized roles: administrator
         * @summary Post node
         * @param {WorkflowControllerPostNodeRequest} workflowControllerPostNodeRequest WorkflowGroupNode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPostNode: function (workflowControllerPostNodeRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workflowControllerPostNode(workflowControllerPostNodeRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowApi.workflowControllerPostNode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.WorkflowApiFp = WorkflowApiFp;
/**
 * WorkflowApi - factory interface
 * @export
 */
var WorkflowApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkflowApiFp)(configuration);
    return {
        /**
         * Delete a workflow Resource: commands Authorized roles: administrator
         * @summary Delete
         * @param {WorkflowApiWorkflowControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerDelete: function (requestParameters, options) {
            return localVarFp.workflowControllerDelete(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a group node Resource: commands Authorized roles: administrator
         * @summary Delete node
         * @param {WorkflowApiWorkflowControllerDeleteNodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerDeleteNode: function (requestParameters, options) {
            return localVarFp.workflowControllerDeleteNode(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
         * @summary Execute arbitrary workflow
         * @param {WorkflowApiWorkflowControllerExecuteArbitraryWorkflowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerExecuteArbitraryWorkflow: function (requestParameters, options) {
            return localVarFp.workflowControllerExecuteArbitraryWorkflow(requestParameters.body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
         * @summary Execute workflow
         * @param {WorkflowApiWorkflowControllerExecuteWorkflowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerExecuteWorkflow: function (requestParameters, options) {
            return localVarFp.workflowControllerExecuteWorkflow(requestParameters.id, requestParameters.body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all workflows Resource: commands Authorized roles: administrator
         * @summary Get all
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetAll: function (options) {
            return localVarFp.workflowControllerGetAll(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all group nodes Resource: commands Authorized roles: administrator
         * @summary Get all nodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetAllNodes: function (options) {
            return localVarFp.workflowControllerGetAllNodes(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a workflow history Resource: commands Authorized roles: administrator
         * @summary Get execution history
         * @param {WorkflowApiWorkflowControllerGetExecutionHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetExecutionHistory: function (requestParameters, options) {
            return localVarFp.workflowControllerGetExecutionHistory(requestParameters.id, requestParameters.offset, requestParameters.limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a workflow Resource: commands Authorized roles: administrator
         * @summary Get one
         * @param {WorkflowApiWorkflowControllerGetOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetOne: function (requestParameters, options) {
            return localVarFp.workflowControllerGetOne(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a group node Resource: commands Authorized roles: administrator
         * @summary Get one node
         * @param {WorkflowApiWorkflowControllerGetOneNodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerGetOneNode: function (requestParameters, options) {
            return localVarFp.workflowControllerGetOneNode(requestParameters.id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a workflow Resource: commands Authorized roles: administrator
         * @summary Patch
         * @param {WorkflowApiWorkflowControllerPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPatch: function (requestParameters, options) {
            return localVarFp.workflowControllerPatch(requestParameters.id, requestParameters.workflowControllerPatchRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a group node Resource: commands Authorized roles: administrator
         * @summary Patch node
         * @param {WorkflowApiWorkflowControllerPatchNodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPatchNode: function (requestParameters, options) {
            return localVarFp.workflowControllerPatchNode(requestParameters.id, requestParameters.workflowControllerPatchNodeRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a workflow Resource: commands Authorized roles: administrator
         * @summary Post
         * @param {WorkflowApiWorkflowControllerPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPost: function (requestParameters, options) {
            return localVarFp.workflowControllerPost(requestParameters.workflowControllerPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a group node Resource: commands Authorized roles: administrator
         * @summary Post node
         * @param {WorkflowApiWorkflowControllerPostNodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workflowControllerPostNode: function (requestParameters, options) {
            return localVarFp.workflowControllerPostNode(requestParameters.workflowControllerPostNodeRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkflowApiFactory = WorkflowApiFactory;
/**
 * WorkflowApi - object-oriented interface
 * @export
 * @class WorkflowApi
 * @extends {BaseAPI}
 */
var WorkflowApi = /** @class */ (function (_super) {
    __extends(WorkflowApi, _super);
    function WorkflowApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a workflow Resource: commands Authorized roles: administrator
     * @summary Delete
     * @param {WorkflowApiWorkflowControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerDelete = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerDelete(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a group node Resource: commands Authorized roles: administrator
     * @summary Delete node
     * @param {WorkflowApiWorkflowControllerDeleteNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerDeleteNode = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerDeleteNode(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute arbitrary workflow
     * @param {WorkflowApiWorkflowControllerExecuteArbitraryWorkflowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerExecuteArbitraryWorkflow = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerExecuteArbitraryWorkflow(requestParameters.body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Execute a workflow with its currently stored intelligence graph Resource: commands Authorized roles: administrator
     * @summary Execute workflow
     * @param {WorkflowApiWorkflowControllerExecuteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerExecuteWorkflow = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerExecuteWorkflow(requestParameters.id, requestParameters.body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all workflows Resource: commands Authorized roles: administrator
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerGetAll = function (options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerGetAll(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all group nodes Resource: commands Authorized roles: administrator
     * @summary Get all nodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerGetAllNodes = function (options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerGetAllNodes(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a workflow history Resource: commands Authorized roles: administrator
     * @summary Get execution history
     * @param {WorkflowApiWorkflowControllerGetExecutionHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerGetExecutionHistory = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerGetExecutionHistory(requestParameters.id, requestParameters.offset, requestParameters.limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a workflow Resource: commands Authorized roles: administrator
     * @summary Get one
     * @param {WorkflowApiWorkflowControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerGetOne = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerGetOne(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a group node Resource: commands Authorized roles: administrator
     * @summary Get one node
     * @param {WorkflowApiWorkflowControllerGetOneNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerGetOneNode = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerGetOneNode(requestParameters.id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a workflow Resource: commands Authorized roles: administrator
     * @summary Patch
     * @param {WorkflowApiWorkflowControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerPatch = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerPatch(requestParameters.id, requestParameters.workflowControllerPatchRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a group node Resource: commands Authorized roles: administrator
     * @summary Patch node
     * @param {WorkflowApiWorkflowControllerPatchNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerPatchNode = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerPatchNode(requestParameters.id, requestParameters.workflowControllerPatchNodeRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a workflow Resource: commands Authorized roles: administrator
     * @summary Post
     * @param {WorkflowApiWorkflowControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerPost = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerPost(requestParameters.workflowControllerPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a group node Resource: commands Authorized roles: administrator
     * @summary Post node
     * @param {WorkflowApiWorkflowControllerPostNodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.workflowControllerPostNode = function (requestParameters, options) {
        var _this = this;
        return (0, exports.WorkflowApiFp)(this.configuration).workflowControllerPostNode(requestParameters.workflowControllerPostNodeRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkflowApi;
}(base_1.BaseAPI));
exports.WorkflowApi = WorkflowApi;
