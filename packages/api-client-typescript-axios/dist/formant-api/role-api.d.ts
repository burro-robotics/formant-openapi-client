/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { RoleControllerList200Response } from '../formant-models';
import { RoleControllerPatchRequest } from '../formant-models';
import { RoleControllerPostRequest } from '../formant-models';
/**
 * RoleApi - axios parameter creator
 * @export
 */
export declare const RoleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a role. Resource: roles Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a role name by role ID. Resource: roles Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all roles in your organization. Resource: roles Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing role. Resource: roles Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {RoleControllerPatchRequest} roleControllerPatchRequest PartialRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerPatch: (id: string, roleControllerPatchRequest: RoleControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new role. Resource: roles Authorized roles: administrator
     * @summary Post
     * @param {RoleControllerPostRequest} roleControllerPostRequest Role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerPost: (roleControllerPostRequest: RoleControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoleApi - functional programming interface
 * @export
 */
export declare const RoleApiFp: (configuration?: Configuration) => {
    /**
     * Delete a role. Resource: roles Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a role name by role ID. Resource: roles Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleControllerPostRequest>>;
    /**
     * List all roles in your organization. Resource: roles Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleControllerList200Response>>;
    /**
     * Update an existing role. Resource: roles Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {RoleControllerPatchRequest} roleControllerPatchRequest PartialRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerPatch(id: string, roleControllerPatchRequest: RoleControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleControllerPostRequest>>;
    /**
     * Create a new role. Resource: roles Authorized roles: administrator
     * @summary Post
     * @param {RoleControllerPostRequest} roleControllerPostRequest Role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerPost(roleControllerPostRequest: RoleControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleControllerPostRequest>>;
};
/**
 * RoleApi - factory interface
 * @export
 */
export declare const RoleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a role. Resource: roles Authorized roles: administrator
     * @summary Delete
     * @param {RoleApiRoleControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerDelete(requestParameters: RoleApiRoleControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a role name by role ID. Resource: roles Authorized roles: viewer
     * @summary Get one
     * @param {RoleApiRoleControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerGetOne(requestParameters: RoleApiRoleControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoleControllerPostRequest>;
    /**
     * List all roles in your organization. Resource: roles Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerList(options?: RawAxiosRequestConfig): AxiosPromise<RoleControllerList200Response>;
    /**
     * Update an existing role. Resource: roles Authorized roles: administrator
     * @summary Patch
     * @param {RoleApiRoleControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerPatch(requestParameters: RoleApiRoleControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoleControllerPostRequest>;
    /**
     * Create a new role. Resource: roles Authorized roles: administrator
     * @summary Post
     * @param {RoleApiRoleControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerPost(requestParameters: RoleApiRoleControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoleControllerPostRequest>;
};
/**
 * Request parameters for roleControllerDelete operation in RoleApi.
 * @export
 * @interface RoleApiRoleControllerDeleteRequest
 */
export interface RoleApiRoleControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof RoleApiRoleControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for roleControllerGetOne operation in RoleApi.
 * @export
 * @interface RoleApiRoleControllerGetOneRequest
 */
export interface RoleApiRoleControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof RoleApiRoleControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for roleControllerPatch operation in RoleApi.
 * @export
 * @interface RoleApiRoleControllerPatchRequest
 */
export interface RoleApiRoleControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof RoleApiRoleControllerPatch
     */
    readonly id: string;
    /**
     * PartialRole
     * @type {RoleControllerPatchRequest}
     * @memberof RoleApiRoleControllerPatch
     */
    readonly roleControllerPatchRequest: RoleControllerPatchRequest;
}
/**
 * Request parameters for roleControllerPost operation in RoleApi.
 * @export
 * @interface RoleApiRoleControllerPostRequest
 */
export interface RoleApiRoleControllerPostRequest {
    /**
     * Role
     * @type {RoleControllerPostRequest}
     * @memberof RoleApiRoleControllerPost
     */
    readonly roleControllerPostRequest: RoleControllerPostRequest;
}
/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export declare class RoleApi extends BaseAPI {
    /**
     * Delete a role. Resource: roles Authorized roles: administrator
     * @summary Delete
     * @param {RoleApiRoleControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    roleControllerDelete(requestParameters: RoleApiRoleControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a role name by role ID. Resource: roles Authorized roles: viewer
     * @summary Get one
     * @param {RoleApiRoleControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    roleControllerGetOne(requestParameters: RoleApiRoleControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleControllerPostRequest, any>>;
    /**
     * List all roles in your organization. Resource: roles Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    roleControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleControllerList200Response, any>>;
    /**
     * Update an existing role. Resource: roles Authorized roles: administrator
     * @summary Patch
     * @param {RoleApiRoleControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    roleControllerPatch(requestParameters: RoleApiRoleControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleControllerPostRequest, any>>;
    /**
     * Create a new role. Resource: roles Authorized roles: administrator
     * @summary Post
     * @param {RoleApiRoleControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    roleControllerPost(requestParameters: RoleApiRoleControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleControllerPostRequest, any>>;
}
