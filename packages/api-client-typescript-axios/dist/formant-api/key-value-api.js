"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyValueApi = exports.KeyValueApiFactory = exports.KeyValueApiFp = exports.KeyValueApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * KeyValueApi - axios parameter creator
 * @export
 */
var KeyValueApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * List all keys in your organization. Resource: keyValueStorage Authorized roles: viewer
         * @summary List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerList: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/key-value/";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List key-value pairs, optionally filtering by key. Resource: keyValueStorage Authorized roles: viewer
         * @summary Query
         * @param {KeyValueControllerQueryRequest} [keyValueControllerQueryRequest] KeyValueQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerQuery: function (keyValueControllerQueryRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/key-value/query";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(keyValueControllerQueryRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a key-value pair. Resource: keyValueStorage Authorized roles: operator
         * @summary Remove item
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerRemoveItem: function (key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)('keyValueControllerRemoveItem', 'key', key);
                            localVarPath = "/key-value/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a new key-value pair. Resource: keyValueStorage Authorized roles: operator
         * @summary Store item
         * @param {KeyValueControllerList200Response} keyValueControllerList200Response KeyValue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerStoreItem: function (keyValueControllerList200Response, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'keyValueControllerList200Response' is not null or undefined
                            (0, common_1.assertParamExists)('keyValueControllerStoreItem', 'keyValueControllerList200Response', keyValueControllerList200Response);
                            localVarPath = "/key-value/";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(keyValueControllerList200Response, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.KeyValueApiAxiosParamCreator = KeyValueApiAxiosParamCreator;
/**
 * KeyValueApi - functional programming interface
 * @export
 */
var KeyValueApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.KeyValueApiAxiosParamCreator)(configuration);
    return {
        /**
         * List all keys in your organization. Resource: keyValueStorage Authorized roles: viewer
         * @summary List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerList: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.keyValueControllerList(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['KeyValueApi.keyValueControllerList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List key-value pairs, optionally filtering by key. Resource: keyValueStorage Authorized roles: viewer
         * @summary Query
         * @param {KeyValueControllerQueryRequest} [keyValueControllerQueryRequest] KeyValueQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerQuery: function (keyValueControllerQueryRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.keyValueControllerQuery(keyValueControllerQueryRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['KeyValueApi.keyValueControllerQuery']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete a key-value pair. Resource: keyValueStorage Authorized roles: operator
         * @summary Remove item
         * @param {string} key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerRemoveItem: function (key, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.keyValueControllerRemoveItem(key, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['KeyValueApi.keyValueControllerRemoveItem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a new key-value pair. Resource: keyValueStorage Authorized roles: operator
         * @summary Store item
         * @param {KeyValueControllerList200Response} keyValueControllerList200Response KeyValue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerStoreItem: function (keyValueControllerList200Response, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.keyValueControllerStoreItem(keyValueControllerList200Response, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['KeyValueApi.keyValueControllerStoreItem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.KeyValueApiFp = KeyValueApiFp;
/**
 * KeyValueApi - factory interface
 * @export
 */
var KeyValueApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.KeyValueApiFp)(configuration);
    return {
        /**
         * List all keys in your organization. Resource: keyValueStorage Authorized roles: viewer
         * @summary List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerList: function (options) {
            return localVarFp.keyValueControllerList(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List key-value pairs, optionally filtering by key. Resource: keyValueStorage Authorized roles: viewer
         * @summary Query
         * @param {KeyValueApiKeyValueControllerQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerQuery: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.keyValueControllerQuery(requestParameters.keyValueControllerQueryRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a key-value pair. Resource: keyValueStorage Authorized roles: operator
         * @summary Remove item
         * @param {KeyValueApiKeyValueControllerRemoveItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerRemoveItem: function (requestParameters, options) {
            return localVarFp.keyValueControllerRemoveItem(requestParameters.key, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a new key-value pair. Resource: keyValueStorage Authorized roles: operator
         * @summary Store item
         * @param {KeyValueApiKeyValueControllerStoreItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyValueControllerStoreItem: function (requestParameters, options) {
            return localVarFp.keyValueControllerStoreItem(requestParameters.keyValueControllerList200Response, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.KeyValueApiFactory = KeyValueApiFactory;
/**
 * KeyValueApi - object-oriented interface
 * @export
 * @class KeyValueApi
 * @extends {BaseAPI}
 */
var KeyValueApi = /** @class */ (function (_super) {
    __extends(KeyValueApi, _super);
    function KeyValueApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List all keys in your organization. Resource: keyValueStorage Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    KeyValueApi.prototype.keyValueControllerList = function (options) {
        var _this = this;
        return (0, exports.KeyValueApiFp)(this.configuration).keyValueControllerList(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List key-value pairs, optionally filtering by key. Resource: keyValueStorage Authorized roles: viewer
     * @summary Query
     * @param {KeyValueApiKeyValueControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    KeyValueApi.prototype.keyValueControllerQuery = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.KeyValueApiFp)(this.configuration).keyValueControllerQuery(requestParameters.keyValueControllerQueryRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Remove item
     * @param {KeyValueApiKeyValueControllerRemoveItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    KeyValueApi.prototype.keyValueControllerRemoveItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.KeyValueApiFp)(this.configuration).keyValueControllerRemoveItem(requestParameters.key, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a new key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Store item
     * @param {KeyValueApiKeyValueControllerStoreItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    KeyValueApi.prototype.keyValueControllerStoreItem = function (requestParameters, options) {
        var _this = this;
        return (0, exports.KeyValueApiFp)(this.configuration).keyValueControllerStoreItem(requestParameters.keyValueControllerList200Response, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return KeyValueApi;
}(base_1.BaseAPI));
exports.KeyValueApi = KeyValueApi;
