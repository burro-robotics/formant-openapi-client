/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { KeyValueControllerList200Response } from '../formant-models';
import { KeyValueControllerQueryRequest } from '../formant-models';
/**
 * KeyValueApi - axios parameter creator
 * @export
 */
export declare const KeyValueApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List all keys in your organization. Resource: keyValueStorage Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List key-value pairs, optionally filtering by key. Resource: keyValueStorage Authorized roles: viewer
     * @summary Query
     * @param {KeyValueControllerQueryRequest} [keyValueControllerQueryRequest] KeyValueQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerQuery: (keyValueControllerQueryRequest?: KeyValueControllerQueryRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Remove item
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerRemoveItem: (key: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Store item
     * @param {KeyValueControllerList200Response} keyValueControllerList200Response KeyValue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerStoreItem: (keyValueControllerList200Response: KeyValueControllerList200Response, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * KeyValueApi - functional programming interface
 * @export
 */
export declare const KeyValueApiFp: (configuration?: Configuration) => {
    /**
     * List all keys in your organization. Resource: keyValueStorage Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyValueControllerList200Response>>;
    /**
     * List key-value pairs, optionally filtering by key. Resource: keyValueStorage Authorized roles: viewer
     * @summary Query
     * @param {KeyValueControllerQueryRequest} [keyValueControllerQueryRequest] KeyValueQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerQuery(keyValueControllerQueryRequest?: KeyValueControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyValueControllerList200Response>>;
    /**
     * Delete a key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Remove item
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerRemoveItem(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a new key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Store item
     * @param {KeyValueControllerList200Response} keyValueControllerList200Response KeyValue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerStoreItem(keyValueControllerList200Response: KeyValueControllerList200Response, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyValueControllerList200Response>>;
};
/**
 * KeyValueApi - factory interface
 * @export
 */
export declare const KeyValueApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List all keys in your organization. Resource: keyValueStorage Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerList(options?: RawAxiosRequestConfig): AxiosPromise<KeyValueControllerList200Response>;
    /**
     * List key-value pairs, optionally filtering by key. Resource: keyValueStorage Authorized roles: viewer
     * @summary Query
     * @param {KeyValueApiKeyValueControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerQuery(requestParameters?: KeyValueApiKeyValueControllerQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<KeyValueControllerList200Response>;
    /**
     * Delete a key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Remove item
     * @param {KeyValueApiKeyValueControllerRemoveItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerRemoveItem(requestParameters: KeyValueApiKeyValueControllerRemoveItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Create a new key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Store item
     * @param {KeyValueApiKeyValueControllerStoreItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    keyValueControllerStoreItem(requestParameters: KeyValueApiKeyValueControllerStoreItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<KeyValueControllerList200Response>;
};
/**
 * Request parameters for keyValueControllerQuery operation in KeyValueApi.
 * @export
 * @interface KeyValueApiKeyValueControllerQueryRequest
 */
export interface KeyValueApiKeyValueControllerQueryRequest {
    /**
     * KeyValueQuery
     * @type {KeyValueControllerQueryRequest}
     * @memberof KeyValueApiKeyValueControllerQuery
     */
    readonly keyValueControllerQueryRequest?: KeyValueControllerQueryRequest;
}
/**
 * Request parameters for keyValueControllerRemoveItem operation in KeyValueApi.
 * @export
 * @interface KeyValueApiKeyValueControllerRemoveItemRequest
 */
export interface KeyValueApiKeyValueControllerRemoveItemRequest {
    /**
     *
     * @type {string}
     * @memberof KeyValueApiKeyValueControllerRemoveItem
     */
    readonly key: string;
}
/**
 * Request parameters for keyValueControllerStoreItem operation in KeyValueApi.
 * @export
 * @interface KeyValueApiKeyValueControllerStoreItemRequest
 */
export interface KeyValueApiKeyValueControllerStoreItemRequest {
    /**
     * KeyValue
     * @type {KeyValueControllerList200Response}
     * @memberof KeyValueApiKeyValueControllerStoreItem
     */
    readonly keyValueControllerList200Response: KeyValueControllerList200Response;
}
/**
 * KeyValueApi - object-oriented interface
 * @export
 * @class KeyValueApi
 * @extends {BaseAPI}
 */
export declare class KeyValueApi extends BaseAPI {
    /**
     * List all keys in your organization. Resource: keyValueStorage Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    keyValueControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<KeyValueControllerList200Response, any>>;
    /**
     * List key-value pairs, optionally filtering by key. Resource: keyValueStorage Authorized roles: viewer
     * @summary Query
     * @param {KeyValueApiKeyValueControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    keyValueControllerQuery(requestParameters?: KeyValueApiKeyValueControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<KeyValueControllerList200Response, any>>;
    /**
     * Delete a key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Remove item
     * @param {KeyValueApiKeyValueControllerRemoveItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    keyValueControllerRemoveItem(requestParameters: KeyValueApiKeyValueControllerRemoveItemRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a new key-value pair. Resource: keyValueStorage Authorized roles: operator
     * @summary Store item
     * @param {KeyValueApiKeyValueControllerStoreItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    keyValueControllerStoreItem(requestParameters: KeyValueApiKeyValueControllerStoreItemRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<KeyValueControllerList200Response, any>>;
}
