/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AuthControllerCreateServiceAccount201ResponseUser } from '../formant-models';
import { TeamControllerGetUsers200Response } from '../formant-models';
import { UserControllerGetUserCountPerAccountId200Response } from '../formant-models';
import { UserControllerPatchRequest } from '../formant-models';
import { UserControllerPostRequest } from '../formant-models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List all users in your organization. Resource: users Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a user by ID. Resource: users Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a strategy breakdown of a user. Resource: users Authorized roles: viewer
     * @summary Get strategy
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetStrategy: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get User Count per Account Resource: users Authorized roles: viewer
     * @summary Get user count per account id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetUserCountPerAccountId: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing user. Resource: users Authorized roles: viewer
     * @summary Patch
     * @param {string} id
     * @param {UserControllerPatchRequest} userControllerPatchRequest PartialUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerPatch: (id: string, userControllerPatchRequest: UserControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new user. Resource: users Authorized roles: administrator
     * @summary Post
     * @param {UserControllerPostRequest} userControllerPostRequest CreateUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerPost: (userControllerPostRequest: UserControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Query users Resource: users Authorized roles: viewer
     * @summary Query
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerQuery: (body: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * List all users in your organization. Resource: users Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamControllerGetUsers200Response>>;
    /**
     * Get a user by ID. Resource: users Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerCreateServiceAccount201ResponseUser>>;
    /**
     * Get a strategy breakdown of a user. Resource: users Authorized roles: viewer
     * @summary Get strategy
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetStrategy(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerCreateServiceAccount201ResponseUser>>;
    /**
     * Get User Count per Account Resource: users Authorized roles: viewer
     * @summary Get user count per account id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetUserCountPerAccountId(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserControllerGetUserCountPerAccountId200Response>>;
    /**
     * Update an existing user. Resource: users Authorized roles: viewer
     * @summary Patch
     * @param {string} id
     * @param {UserControllerPatchRequest} userControllerPatchRequest PartialUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerPatch(id: string, userControllerPatchRequest: UserControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerCreateServiceAccount201ResponseUser>>;
    /**
     * Create a new user. Resource: users Authorized roles: administrator
     * @summary Post
     * @param {UserControllerPostRequest} userControllerPostRequest CreateUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerPost(userControllerPostRequest: UserControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserControllerPostRequest>>;
    /**
     * Query users Resource: users Authorized roles: viewer
     * @summary Query
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerQuery(body: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamControllerGetUsers200Response>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List all users in your organization. Resource: users Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetAll(options?: RawAxiosRequestConfig): AxiosPromise<TeamControllerGetUsers200Response>;
    /**
     * Get a user by ID. Resource: users Authorized roles: viewer
     * @summary Get one
     * @param {UserApiUserControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetOne(requestParameters: UserApiUserControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerCreateServiceAccount201ResponseUser>;
    /**
     * Get a strategy breakdown of a user. Resource: users Authorized roles: viewer
     * @summary Get strategy
     * @param {UserApiUserControllerGetStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetStrategy(requestParameters: UserApiUserControllerGetStrategyRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerCreateServiceAccount201ResponseUser>;
    /**
     * Get User Count per Account Resource: users Authorized roles: viewer
     * @summary Get user count per account id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetUserCountPerAccountId(options?: RawAxiosRequestConfig): AxiosPromise<UserControllerGetUserCountPerAccountId200Response>;
    /**
     * Update an existing user. Resource: users Authorized roles: viewer
     * @summary Patch
     * @param {UserApiUserControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerPatch(requestParameters: UserApiUserControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerCreateServiceAccount201ResponseUser>;
    /**
     * Create a new user. Resource: users Authorized roles: administrator
     * @summary Post
     * @param {UserApiUserControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerPost(requestParameters: UserApiUserControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserControllerPostRequest>;
    /**
     * Query users Resource: users Authorized roles: viewer
     * @summary Query
     * @param {UserApiUserControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerQuery(requestParameters: UserApiUserControllerQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<TeamControllerGetUsers200Response>;
};
/**
 * Request parameters for userControllerGetOne operation in UserApi.
 * @export
 * @interface UserApiUserControllerGetOneRequest
 */
export interface UserApiUserControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof UserApiUserControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for userControllerGetStrategy operation in UserApi.
 * @export
 * @interface UserApiUserControllerGetStrategyRequest
 */
export interface UserApiUserControllerGetStrategyRequest {
    /**
     *
     * @type {string}
     * @memberof UserApiUserControllerGetStrategy
     */
    readonly id: string;
}
/**
 * Request parameters for userControllerPatch operation in UserApi.
 * @export
 * @interface UserApiUserControllerPatchRequest
 */
export interface UserApiUserControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof UserApiUserControllerPatch
     */
    readonly id: string;
    /**
     * PartialUser
     * @type {UserControllerPatchRequest}
     * @memberof UserApiUserControllerPatch
     */
    readonly userControllerPatchRequest: UserControllerPatchRequest;
}
/**
 * Request parameters for userControllerPost operation in UserApi.
 * @export
 * @interface UserApiUserControllerPostRequest
 */
export interface UserApiUserControllerPostRequest {
    /**
     * CreateUserRequest
     * @type {UserControllerPostRequest}
     * @memberof UserApiUserControllerPost
     */
    readonly userControllerPostRequest: UserControllerPostRequest;
}
/**
 * Request parameters for userControllerQuery operation in UserApi.
 * @export
 * @interface UserApiUserControllerQueryRequest
 */
export interface UserApiUserControllerQueryRequest {
    /**
     *
     * @type {any}
     * @memberof UserApiUserControllerQuery
     */
    readonly body: any;
}
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * List all users in your organization. Resource: users Authorized roles: viewer
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userControllerGetAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamControllerGetUsers200Response, any>>;
    /**
     * Get a user by ID. Resource: users Authorized roles: viewer
     * @summary Get one
     * @param {UserApiUserControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userControllerGetOne(requestParameters: UserApiUserControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerCreateServiceAccount201ResponseUser, any>>;
    /**
     * Get a strategy breakdown of a user. Resource: users Authorized roles: viewer
     * @summary Get strategy
     * @param {UserApiUserControllerGetStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userControllerGetStrategy(requestParameters: UserApiUserControllerGetStrategyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerCreateServiceAccount201ResponseUser, any>>;
    /**
     * Get User Count per Account Resource: users Authorized roles: viewer
     * @summary Get user count per account id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userControllerGetUserCountPerAccountId(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserControllerGetUserCountPerAccountId200Response, any>>;
    /**
     * Update an existing user. Resource: users Authorized roles: viewer
     * @summary Patch
     * @param {UserApiUserControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userControllerPatch(requestParameters: UserApiUserControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthControllerCreateServiceAccount201ResponseUser, any>>;
    /**
     * Create a new user. Resource: users Authorized roles: administrator
     * @summary Post
     * @param {UserApiUserControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userControllerPost(requestParameters: UserApiUserControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserControllerPostRequest, any>>;
    /**
     * Query users Resource: users Authorized roles: viewer
     * @summary Query
     * @param {UserApiUserControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userControllerQuery(requestParameters: UserApiUserControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TeamControllerGetUsers200Response, any>>;
}
