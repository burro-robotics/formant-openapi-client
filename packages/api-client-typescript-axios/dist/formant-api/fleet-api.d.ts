/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { DeviceControllerFilter200Response } from '../formant-models';
import { FleetControllerList200Response } from '../formant-models';
import { FleetControllerPatchRequest } from '../formant-models';
import { FleetControllerPostRequest } from '../formant-models';
/**
 * FleetApi - axios parameter creator
 * @export
 */
export declare const FleetApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a fleet. You cannot delete a fleet that contains devices. Resource: users Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all devices in a fleet. Resource: devices Authorized roles: viewer
     * @summary Get devices
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerGetDevices: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a fleet by fleet ID. Resource: users Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all fleets in your organization. Resource: users Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing fleet. Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {FleetControllerPatchRequest} fleetControllerPatchRequest PartialFleet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerPatch: (id: string, fleetControllerPatchRequest: FleetControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new fleet. Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {FleetControllerPostRequest} fleetControllerPostRequest Fleet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerPost: (fleetControllerPostRequest: FleetControllerPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FleetApi - functional programming interface
 * @export
 */
export declare const FleetApiFp: (configuration?: Configuration) => {
    /**
     * Delete a fleet. You cannot delete a fleet that contains devices. Resource: users Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List all devices in a fleet. Resource: devices Authorized roles: viewer
     * @summary Get devices
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerGetDevices(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerFilter200Response>>;
    /**
     * Get a fleet by fleet ID. Resource: users Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FleetControllerPostRequest>>;
    /**
     * List all fleets in your organization. Resource: users Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FleetControllerList200Response>>;
    /**
     * Update an existing fleet. Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {FleetControllerPatchRequest} fleetControllerPatchRequest PartialFleet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerPatch(id: string, fleetControllerPatchRequest: FleetControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FleetControllerPostRequest>>;
    /**
     * Create a new fleet. Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {FleetControllerPostRequest} fleetControllerPostRequest Fleet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerPost(fleetControllerPostRequest: FleetControllerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FleetControllerPostRequest>>;
};
/**
 * FleetApi - factory interface
 * @export
 */
export declare const FleetApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a fleet. You cannot delete a fleet that contains devices. Resource: users Authorized roles: administrator
     * @summary Delete
     * @param {FleetApiFleetControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerDelete(requestParameters: FleetApiFleetControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * List all devices in a fleet. Resource: devices Authorized roles: viewer
     * @summary Get devices
     * @param {FleetApiFleetControllerGetDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerGetDevices(requestParameters: FleetApiFleetControllerGetDevicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerFilter200Response>;
    /**
     * Get a fleet by fleet ID. Resource: users Authorized roles: viewer
     * @summary Get one
     * @param {FleetApiFleetControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerGetOne(requestParameters: FleetApiFleetControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<FleetControllerPostRequest>;
    /**
     * List all fleets in your organization. Resource: users Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerList(options?: RawAxiosRequestConfig): AxiosPromise<FleetControllerList200Response>;
    /**
     * Update an existing fleet. Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {FleetApiFleetControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerPatch(requestParameters: FleetApiFleetControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<FleetControllerPostRequest>;
    /**
     * Create a new fleet. Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {FleetApiFleetControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fleetControllerPost(requestParameters: FleetApiFleetControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<FleetControllerPostRequest>;
};
/**
 * Request parameters for fleetControllerDelete operation in FleetApi.
 * @export
 * @interface FleetApiFleetControllerDeleteRequest
 */
export interface FleetApiFleetControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof FleetApiFleetControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for fleetControllerGetDevices operation in FleetApi.
 * @export
 * @interface FleetApiFleetControllerGetDevicesRequest
 */
export interface FleetApiFleetControllerGetDevicesRequest {
    /**
     *
     * @type {string}
     * @memberof FleetApiFleetControllerGetDevices
     */
    readonly id: string;
}
/**
 * Request parameters for fleetControllerGetOne operation in FleetApi.
 * @export
 * @interface FleetApiFleetControllerGetOneRequest
 */
export interface FleetApiFleetControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof FleetApiFleetControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for fleetControllerPatch operation in FleetApi.
 * @export
 * @interface FleetApiFleetControllerPatchRequest
 */
export interface FleetApiFleetControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof FleetApiFleetControllerPatch
     */
    readonly id: string;
    /**
     * PartialFleet
     * @type {FleetControllerPatchRequest}
     * @memberof FleetApiFleetControllerPatch
     */
    readonly fleetControllerPatchRequest: FleetControllerPatchRequest;
}
/**
 * Request parameters for fleetControllerPost operation in FleetApi.
 * @export
 * @interface FleetApiFleetControllerPostRequest
 */
export interface FleetApiFleetControllerPostRequest {
    /**
     * Fleet
     * @type {FleetControllerPostRequest}
     * @memberof FleetApiFleetControllerPost
     */
    readonly fleetControllerPostRequest: FleetControllerPostRequest;
}
/**
 * FleetApi - object-oriented interface
 * @export
 * @class FleetApi
 * @extends {BaseAPI}
 */
export declare class FleetApi extends BaseAPI {
    /**
     * Delete a fleet. You cannot delete a fleet that contains devices. Resource: users Authorized roles: administrator
     * @summary Delete
     * @param {FleetApiFleetControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    fleetControllerDelete(requestParameters: FleetApiFleetControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List all devices in a fleet. Resource: devices Authorized roles: viewer
     * @summary Get devices
     * @param {FleetApiFleetControllerGetDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    fleetControllerGetDevices(requestParameters: FleetApiFleetControllerGetDevicesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerFilter200Response, any>>;
    /**
     * Get a fleet by fleet ID. Resource: users Authorized roles: viewer
     * @summary Get one
     * @param {FleetApiFleetControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    fleetControllerGetOne(requestParameters: FleetApiFleetControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FleetControllerPostRequest, any>>;
    /**
     * List all fleets in your organization. Resource: users Authorized roles: viewer
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    fleetControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FleetControllerList200Response, any>>;
    /**
     * Update an existing fleet. Resource: devices Authorized roles: administrator
     * @summary Patch
     * @param {FleetApiFleetControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    fleetControllerPatch(requestParameters: FleetApiFleetControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FleetControllerPostRequest, any>>;
    /**
     * Create a new fleet. Resource: devices Authorized roles: administrator
     * @summary Post
     * @param {FleetApiFleetControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    fleetControllerPost(requestParameters: FleetApiFleetControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FleetControllerPostRequest, any>>;
}
