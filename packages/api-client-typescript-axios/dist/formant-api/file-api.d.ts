/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { FileControllerBeginUpload200Response } from '../formant-models';
import { FileControllerBeginUploadRequest } from '../formant-models';
import { FileControllerCompleteUploadRequest } from '../formant-models';
import { FileControllerList200Response } from '../formant-models';
import { FileControllerList200ResponseItemsInner } from '../formant-models';
import { FileControllerPatchRequest } from '../formant-models';
import { FileControllerQuery200Response } from '../formant-models';
import { FileControllerQueryRequest } from '../formant-models';
/**
 * FileApi - axios parameter creator
 * @export
 */
export declare const FileApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Initiate a file upload. Must be followed by Complete Upload endpoint call. Resource: fileStorage Authorized roles: administrator
     * @summary Begin upload
     * @param {FileControllerBeginUploadRequest} fileControllerBeginUploadRequest BeginUploadRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerBeginUpload: (fileControllerBeginUploadRequest: FileControllerBeginUploadRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Complete a file upload. Must be preceded by Begin Upload endpoint call. Resource: fileStorage Authorized roles: administrator
     * @summary Complete upload
     * @param {FileControllerCompleteUploadRequest} fileControllerCompleteUploadRequest CompleteUploadRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerCompleteUpload: (fileControllerCompleteUploadRequest: FileControllerCompleteUploadRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a file. Resource: fileStorage Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a file by file ID. Resource: fileStorage Authorized roles: administrator
     * @summary Get
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerGet: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the signed S3 URL for a file by file ID. Resource: fileStorage Authorized roles: administrator
     * @summary Get url
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerGetUrl: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all files in your organizaiton. Resource: fileStorage Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a filename or tags for an existing file. Resource: fileStorage Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {FileControllerPatchRequest} fileControllerPatchRequest PartialCloudFile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerPatch: (id: string, fileControllerPatchRequest: FileControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Query files Resource: fileStorage Authorized roles: operator, device
     * @summary Query
     * @param {FileControllerQueryRequest} fileControllerQueryRequest QueryFilesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerQuery: (fileControllerQueryRequest: FileControllerQueryRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FileApi - functional programming interface
 * @export
 */
export declare const FileApiFp: (configuration?: Configuration) => {
    /**
     * Initiate a file upload. Must be followed by Complete Upload endpoint call. Resource: fileStorage Authorized roles: administrator
     * @summary Begin upload
     * @param {FileControllerBeginUploadRequest} fileControllerBeginUploadRequest BeginUploadRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerBeginUpload(fileControllerBeginUploadRequest: FileControllerBeginUploadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileControllerBeginUpload200Response>>;
    /**
     * Complete a file upload. Must be preceded by Begin Upload endpoint call. Resource: fileStorage Authorized roles: administrator
     * @summary Complete upload
     * @param {FileControllerCompleteUploadRequest} fileControllerCompleteUploadRequest CompleteUploadRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerCompleteUpload(fileControllerCompleteUploadRequest: FileControllerCompleteUploadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a file. Resource: fileStorage Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a file by file ID. Resource: fileStorage Authorized roles: administrator
     * @summary Get
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileControllerList200ResponseItemsInner>>;
    /**
     * Get the signed S3 URL for a file by file ID. Resource: fileStorage Authorized roles: administrator
     * @summary Get url
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerGetUrl(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List all files in your organizaiton. Resource: fileStorage Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileControllerList200Response>>;
    /**
     * Update a filename or tags for an existing file. Resource: fileStorage Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {FileControllerPatchRequest} fileControllerPatchRequest PartialCloudFile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerPatch(id: string, fileControllerPatchRequest: FileControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileControllerList200ResponseItemsInner>>;
    /**
     * Query files Resource: fileStorage Authorized roles: operator, device
     * @summary Query
     * @param {FileControllerQueryRequest} fileControllerQueryRequest QueryFilesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerQuery(fileControllerQueryRequest: FileControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileControllerQuery200Response>>;
};
/**
 * FileApi - factory interface
 * @export
 */
export declare const FileApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Initiate a file upload. Must be followed by Complete Upload endpoint call. Resource: fileStorage Authorized roles: administrator
     * @summary Begin upload
     * @param {FileApiFileControllerBeginUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerBeginUpload(requestParameters: FileApiFileControllerBeginUploadRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileControllerBeginUpload200Response>;
    /**
     * Complete a file upload. Must be preceded by Begin Upload endpoint call. Resource: fileStorage Authorized roles: administrator
     * @summary Complete upload
     * @param {FileApiFileControllerCompleteUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerCompleteUpload(requestParameters: FileApiFileControllerCompleteUploadRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a file. Resource: fileStorage Authorized roles: administrator
     * @summary Delete
     * @param {FileApiFileControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerDelete(requestParameters: FileApiFileControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a file by file ID. Resource: fileStorage Authorized roles: administrator
     * @summary Get
     * @param {FileApiFileControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerGet(requestParameters: FileApiFileControllerGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileControllerList200ResponseItemsInner>;
    /**
     * Get the signed S3 URL for a file by file ID. Resource: fileStorage Authorized roles: administrator
     * @summary Get url
     * @param {FileApiFileControllerGetUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerGetUrl(requestParameters: FileApiFileControllerGetUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * List all files in your organizaiton. Resource: fileStorage Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerList(options?: RawAxiosRequestConfig): AxiosPromise<FileControllerList200Response>;
    /**
     * Update a filename or tags for an existing file. Resource: fileStorage Authorized roles: administrator
     * @summary Patch
     * @param {FileApiFileControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerPatch(requestParameters: FileApiFileControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileControllerList200ResponseItemsInner>;
    /**
     * Query files Resource: fileStorage Authorized roles: operator, device
     * @summary Query
     * @param {FileApiFileControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fileControllerQuery(requestParameters: FileApiFileControllerQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileControllerQuery200Response>;
};
/**
 * Request parameters for fileControllerBeginUpload operation in FileApi.
 * @export
 * @interface FileApiFileControllerBeginUploadRequest
 */
export interface FileApiFileControllerBeginUploadRequest {
    /**
     * BeginUploadRequest
     * @type {FileControllerBeginUploadRequest}
     * @memberof FileApiFileControllerBeginUpload
     */
    readonly fileControllerBeginUploadRequest: FileControllerBeginUploadRequest;
}
/**
 * Request parameters for fileControllerCompleteUpload operation in FileApi.
 * @export
 * @interface FileApiFileControllerCompleteUploadRequest
 */
export interface FileApiFileControllerCompleteUploadRequest {
    /**
     * CompleteUploadRequest
     * @type {FileControllerCompleteUploadRequest}
     * @memberof FileApiFileControllerCompleteUpload
     */
    readonly fileControllerCompleteUploadRequest: FileControllerCompleteUploadRequest;
}
/**
 * Request parameters for fileControllerDelete operation in FileApi.
 * @export
 * @interface FileApiFileControllerDeleteRequest
 */
export interface FileApiFileControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof FileApiFileControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for fileControllerGet operation in FileApi.
 * @export
 * @interface FileApiFileControllerGetRequest
 */
export interface FileApiFileControllerGetRequest {
    /**
     *
     * @type {string}
     * @memberof FileApiFileControllerGet
     */
    readonly id: string;
}
/**
 * Request parameters for fileControllerGetUrl operation in FileApi.
 * @export
 * @interface FileApiFileControllerGetUrlRequest
 */
export interface FileApiFileControllerGetUrlRequest {
    /**
     *
     * @type {string}
     * @memberof FileApiFileControllerGetUrl
     */
    readonly id: string;
}
/**
 * Request parameters for fileControllerPatch operation in FileApi.
 * @export
 * @interface FileApiFileControllerPatchRequest
 */
export interface FileApiFileControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof FileApiFileControllerPatch
     */
    readonly id: string;
    /**
     * PartialCloudFile
     * @type {FileControllerPatchRequest}
     * @memberof FileApiFileControllerPatch
     */
    readonly fileControllerPatchRequest: FileControllerPatchRequest;
}
/**
 * Request parameters for fileControllerQuery operation in FileApi.
 * @export
 * @interface FileApiFileControllerQueryRequest
 */
export interface FileApiFileControllerQueryRequest {
    /**
     * QueryFilesRequest
     * @type {FileControllerQueryRequest}
     * @memberof FileApiFileControllerQuery
     */
    readonly fileControllerQueryRequest: FileControllerQueryRequest;
}
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export declare class FileApi extends BaseAPI {
    /**
     * Initiate a file upload. Must be followed by Complete Upload endpoint call. Resource: fileStorage Authorized roles: administrator
     * @summary Begin upload
     * @param {FileApiFileControllerBeginUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    fileControllerBeginUpload(requestParameters: FileApiFileControllerBeginUploadRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FileControllerBeginUpload200Response, any>>;
    /**
     * Complete a file upload. Must be preceded by Begin Upload endpoint call. Resource: fileStorage Authorized roles: administrator
     * @summary Complete upload
     * @param {FileApiFileControllerCompleteUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    fileControllerCompleteUpload(requestParameters: FileApiFileControllerCompleteUploadRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a file. Resource: fileStorage Authorized roles: administrator
     * @summary Delete
     * @param {FileApiFileControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    fileControllerDelete(requestParameters: FileApiFileControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a file by file ID. Resource: fileStorage Authorized roles: administrator
     * @summary Get
     * @param {FileApiFileControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    fileControllerGet(requestParameters: FileApiFileControllerGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FileControllerList200ResponseItemsInner, any>>;
    /**
     * Get the signed S3 URL for a file by file ID. Resource: fileStorage Authorized roles: administrator
     * @summary Get url
     * @param {FileApiFileControllerGetUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    fileControllerGetUrl(requestParameters: FileApiFileControllerGetUrlRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List all files in your organizaiton. Resource: fileStorage Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    fileControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FileControllerList200Response, any>>;
    /**
     * Update a filename or tags for an existing file. Resource: fileStorage Authorized roles: administrator
     * @summary Patch
     * @param {FileApiFileControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    fileControllerPatch(requestParameters: FileApiFileControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FileControllerList200ResponseItemsInner, any>>;
    /**
     * Query files Resource: fileStorage Authorized roles: operator, device
     * @summary Query
     * @param {FileApiFileControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    fileControllerQuery(requestParameters: FileApiFileControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FileControllerQuery200Response, any>>;
}
