/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { EmailConfigurationControllerList200Response } from '../formant-models';
import { EmailConfigurationControllerList200ResponseItemsInner } from '../formant-models';
import { EmailConfigurationControllerPatchRequest } from '../formant-models';
/**
 * EmailConfigurationApi - axios parameter creator
 * @export
 */
export declare const EmailConfigurationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete an email Configuration Resource: organization Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch an email configuration by id Resource: organization Authorized roles: administrator
     * @summary Get
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerGet: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all email configurations for the organization Resource: organization Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an email configuration Resource: organization Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {EmailConfigurationControllerPatchRequest} emailConfigurationControllerPatchRequest PartialEmailConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerPatch: (id: string, emailConfigurationControllerPatchRequest: EmailConfigurationControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a custom email configuration for the organization Resource: organization Authorized roles: administrator
     * @summary Post
     * @param {EmailConfigurationControllerList200ResponseItemsInner} emailConfigurationControllerList200ResponseItemsInner EmailConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerPost: (emailConfigurationControllerList200ResponseItemsInner: EmailConfigurationControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EmailConfigurationApi - functional programming interface
 * @export
 */
export declare const EmailConfigurationApiFp: (configuration?: Configuration) => {
    /**
     * Delete an email Configuration Resource: organization Authorized roles: administrator
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Fetch an email configuration by id Resource: organization Authorized roles: administrator
     * @summary Get
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailConfigurationControllerList200ResponseItemsInner>>;
    /**
     * List all email configurations for the organization Resource: organization Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailConfigurationControllerList200Response>>;
    /**
     * Update an email configuration Resource: organization Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {EmailConfigurationControllerPatchRequest} emailConfigurationControllerPatchRequest PartialEmailConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerPatch(id: string, emailConfigurationControllerPatchRequest: EmailConfigurationControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailConfigurationControllerList200ResponseItemsInner>>;
    /**
     * Create a custom email configuration for the organization Resource: organization Authorized roles: administrator
     * @summary Post
     * @param {EmailConfigurationControllerList200ResponseItemsInner} emailConfigurationControllerList200ResponseItemsInner EmailConfiguration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerPost(emailConfigurationControllerList200ResponseItemsInner: EmailConfigurationControllerList200ResponseItemsInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailConfigurationControllerList200ResponseItemsInner>>;
};
/**
 * EmailConfigurationApi - factory interface
 * @export
 */
export declare const EmailConfigurationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete an email Configuration Resource: organization Authorized roles: administrator
     * @summary Delete
     * @param {EmailConfigurationApiEmailConfigurationControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerDelete(requestParameters: EmailConfigurationApiEmailConfigurationControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Fetch an email configuration by id Resource: organization Authorized roles: administrator
     * @summary Get
     * @param {EmailConfigurationApiEmailConfigurationControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerGet(requestParameters: EmailConfigurationApiEmailConfigurationControllerGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailConfigurationControllerList200ResponseItemsInner>;
    /**
     * List all email configurations for the organization Resource: organization Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerList(options?: RawAxiosRequestConfig): AxiosPromise<EmailConfigurationControllerList200Response>;
    /**
     * Update an email configuration Resource: organization Authorized roles: administrator
     * @summary Patch
     * @param {EmailConfigurationApiEmailConfigurationControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerPatch(requestParameters: EmailConfigurationApiEmailConfigurationControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailConfigurationControllerList200ResponseItemsInner>;
    /**
     * Create a custom email configuration for the organization Resource: organization Authorized roles: administrator
     * @summary Post
     * @param {EmailConfigurationApiEmailConfigurationControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailConfigurationControllerPost(requestParameters: EmailConfigurationApiEmailConfigurationControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailConfigurationControllerList200ResponseItemsInner>;
};
/**
 * Request parameters for emailConfigurationControllerDelete operation in EmailConfigurationApi.
 * @export
 * @interface EmailConfigurationApiEmailConfigurationControllerDeleteRequest
 */
export interface EmailConfigurationApiEmailConfigurationControllerDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof EmailConfigurationApiEmailConfigurationControllerDelete
     */
    readonly id: string;
}
/**
 * Request parameters for emailConfigurationControllerGet operation in EmailConfigurationApi.
 * @export
 * @interface EmailConfigurationApiEmailConfigurationControllerGetRequest
 */
export interface EmailConfigurationApiEmailConfigurationControllerGetRequest {
    /**
     *
     * @type {string}
     * @memberof EmailConfigurationApiEmailConfigurationControllerGet
     */
    readonly id: string;
}
/**
 * Request parameters for emailConfigurationControllerPatch operation in EmailConfigurationApi.
 * @export
 * @interface EmailConfigurationApiEmailConfigurationControllerPatchRequest
 */
export interface EmailConfigurationApiEmailConfigurationControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof EmailConfigurationApiEmailConfigurationControllerPatch
     */
    readonly id: string;
    /**
     * PartialEmailConfiguration
     * @type {EmailConfigurationControllerPatchRequest}
     * @memberof EmailConfigurationApiEmailConfigurationControllerPatch
     */
    readonly emailConfigurationControllerPatchRequest: EmailConfigurationControllerPatchRequest;
}
/**
 * Request parameters for emailConfigurationControllerPost operation in EmailConfigurationApi.
 * @export
 * @interface EmailConfigurationApiEmailConfigurationControllerPostRequest
 */
export interface EmailConfigurationApiEmailConfigurationControllerPostRequest {
    /**
     * EmailConfiguration
     * @type {EmailConfigurationControllerList200ResponseItemsInner}
     * @memberof EmailConfigurationApiEmailConfigurationControllerPost
     */
    readonly emailConfigurationControllerList200ResponseItemsInner: EmailConfigurationControllerList200ResponseItemsInner;
}
/**
 * EmailConfigurationApi - object-oriented interface
 * @export
 * @class EmailConfigurationApi
 * @extends {BaseAPI}
 */
export declare class EmailConfigurationApi extends BaseAPI {
    /**
     * Delete an email Configuration Resource: organization Authorized roles: administrator
     * @summary Delete
     * @param {EmailConfigurationApiEmailConfigurationControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailConfigurationApi
     */
    emailConfigurationControllerDelete(requestParameters: EmailConfigurationApiEmailConfigurationControllerDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Fetch an email configuration by id Resource: organization Authorized roles: administrator
     * @summary Get
     * @param {EmailConfigurationApiEmailConfigurationControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailConfigurationApi
     */
    emailConfigurationControllerGet(requestParameters: EmailConfigurationApiEmailConfigurationControllerGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailConfigurationControllerList200ResponseItemsInner, any>>;
    /**
     * List all email configurations for the organization Resource: organization Authorized roles: administrator
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailConfigurationApi
     */
    emailConfigurationControllerList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailConfigurationControllerList200Response, any>>;
    /**
     * Update an email configuration Resource: organization Authorized roles: administrator
     * @summary Patch
     * @param {EmailConfigurationApiEmailConfigurationControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailConfigurationApi
     */
    emailConfigurationControllerPatch(requestParameters: EmailConfigurationApiEmailConfigurationControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailConfigurationControllerList200ResponseItemsInner, any>>;
    /**
     * Create a custom email configuration for the organization Resource: organization Authorized roles: administrator
     * @summary Post
     * @param {EmailConfigurationApiEmailConfigurationControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailConfigurationApi
     */
    emailConfigurationControllerPost(requestParameters: EmailConfigurationApiEmailConfigurationControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailConfigurationControllerList200ResponseItemsInner, any>>;
}
