/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { EventTriggerControllerGetAll200Response } from '../formant-models';
import { EventTriggerControllerGetAll200ResponseItemsInner } from '../formant-models';
import { EventTriggerControllerPatchRequest } from '../formant-models';
import { EventTriggerControllerQuery201Response } from '../formant-models';
import { EventTriggerControllerQueryRequest } from '../formant-models';
/**
 * EventTriggerApi - axios parameter creator
 * @export
 */
export declare const EventTriggerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List all event triggers Resource: events Authorized roles: viewer, device
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerGetAll: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an event trigger Resource: events Authorized roles: viewer, device
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update event trigger Resource: events Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {EventTriggerControllerPatchRequest} eventTriggerControllerPatchRequest PartialEventTrigger
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerPatch: (id: string, eventTriggerControllerPatchRequest: EventTriggerControllerPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create event trigger Resource: events Authorized roles: administrator
     * @summary Post
     * @param {EventTriggerControllerGetAll200ResponseItemsInner} eventTriggerControllerGetAll200ResponseItemsInner EventTrigger
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerPost: (eventTriggerControllerGetAll200ResponseItemsInner: EventTriggerControllerGetAll200ResponseItemsInner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get updated event trigger configuration Resource: events Authorized roles: device
     * @summary Query
     * @param {EventTriggerControllerQueryRequest} eventTriggerControllerQueryRequest UpdatedEventTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerQuery: (eventTriggerControllerQueryRequest: EventTriggerControllerQueryRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventTriggerApi - functional programming interface
 * @export
 */
export declare const EventTriggerApiFp: (configuration?: Configuration) => {
    /**
     * List all event triggers Resource: events Authorized roles: viewer, device
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerControllerGetAll200Response>>;
    /**
     * Get an event trigger Resource: events Authorized roles: viewer, device
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerControllerGetAll200ResponseItemsInner>>;
    /**
     * Update event trigger Resource: events Authorized roles: administrator
     * @summary Patch
     * @param {string} id
     * @param {EventTriggerControllerPatchRequest} eventTriggerControllerPatchRequest PartialEventTrigger
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerPatch(id: string, eventTriggerControllerPatchRequest: EventTriggerControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerControllerGetAll200ResponseItemsInner>>;
    /**
     * Create event trigger Resource: events Authorized roles: administrator
     * @summary Post
     * @param {EventTriggerControllerGetAll200ResponseItemsInner} eventTriggerControllerGetAll200ResponseItemsInner EventTrigger
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerPost(eventTriggerControllerGetAll200ResponseItemsInner: EventTriggerControllerGetAll200ResponseItemsInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerControllerGetAll200ResponseItemsInner>>;
    /**
     * Get updated event trigger configuration Resource: events Authorized roles: device
     * @summary Query
     * @param {EventTriggerControllerQueryRequest} eventTriggerControllerQueryRequest UpdatedEventTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerQuery(eventTriggerControllerQueryRequest: EventTriggerControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTriggerControllerQuery201Response>>;
};
/**
 * EventTriggerApi - factory interface
 * @export
 */
export declare const EventTriggerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List all event triggers Resource: events Authorized roles: viewer, device
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerGetAll(options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerControllerGetAll200Response>;
    /**
     * Get an event trigger Resource: events Authorized roles: viewer, device
     * @summary Get one
     * @param {EventTriggerApiEventTriggerControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerGetOne(requestParameters: EventTriggerApiEventTriggerControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerControllerGetAll200ResponseItemsInner>;
    /**
     * Update event trigger Resource: events Authorized roles: administrator
     * @summary Patch
     * @param {EventTriggerApiEventTriggerControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerPatch(requestParameters: EventTriggerApiEventTriggerControllerPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerControllerGetAll200ResponseItemsInner>;
    /**
     * Create event trigger Resource: events Authorized roles: administrator
     * @summary Post
     * @param {EventTriggerApiEventTriggerControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerPost(requestParameters: EventTriggerApiEventTriggerControllerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerControllerGetAll200ResponseItemsInner>;
    /**
     * Get updated event trigger configuration Resource: events Authorized roles: device
     * @summary Query
     * @param {EventTriggerApiEventTriggerControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventTriggerControllerQuery(requestParameters: EventTriggerApiEventTriggerControllerQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventTriggerControllerQuery201Response>;
};
/**
 * Request parameters for eventTriggerControllerGetOne operation in EventTriggerApi.
 * @export
 * @interface EventTriggerApiEventTriggerControllerGetOneRequest
 */
export interface EventTriggerApiEventTriggerControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof EventTriggerApiEventTriggerControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for eventTriggerControllerPatch operation in EventTriggerApi.
 * @export
 * @interface EventTriggerApiEventTriggerControllerPatchRequest
 */
export interface EventTriggerApiEventTriggerControllerPatchRequest {
    /**
     *
     * @type {string}
     * @memberof EventTriggerApiEventTriggerControllerPatch
     */
    readonly id: string;
    /**
     * PartialEventTrigger
     * @type {EventTriggerControllerPatchRequest}
     * @memberof EventTriggerApiEventTriggerControllerPatch
     */
    readonly eventTriggerControllerPatchRequest: EventTriggerControllerPatchRequest;
}
/**
 * Request parameters for eventTriggerControllerPost operation in EventTriggerApi.
 * @export
 * @interface EventTriggerApiEventTriggerControllerPostRequest
 */
export interface EventTriggerApiEventTriggerControllerPostRequest {
    /**
     * EventTrigger
     * @type {EventTriggerControllerGetAll200ResponseItemsInner}
     * @memberof EventTriggerApiEventTriggerControllerPost
     */
    readonly eventTriggerControllerGetAll200ResponseItemsInner: EventTriggerControllerGetAll200ResponseItemsInner;
}
/**
 * Request parameters for eventTriggerControllerQuery operation in EventTriggerApi.
 * @export
 * @interface EventTriggerApiEventTriggerControllerQueryRequest
 */
export interface EventTriggerApiEventTriggerControllerQueryRequest {
    /**
     * UpdatedEventTriggerRequest
     * @type {EventTriggerControllerQueryRequest}
     * @memberof EventTriggerApiEventTriggerControllerQuery
     */
    readonly eventTriggerControllerQueryRequest: EventTriggerControllerQueryRequest;
}
/**
 * EventTriggerApi - object-oriented interface
 * @export
 * @class EventTriggerApi
 * @extends {BaseAPI}
 */
export declare class EventTriggerApi extends BaseAPI {
    /**
     * List all event triggers Resource: events Authorized roles: viewer, device
     * @summary Get all
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerApi
     */
    eventTriggerControllerGetAll(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerControllerGetAll200Response, any>>;
    /**
     * Get an event trigger Resource: events Authorized roles: viewer, device
     * @summary Get one
     * @param {EventTriggerApiEventTriggerControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerApi
     */
    eventTriggerControllerGetOne(requestParameters: EventTriggerApiEventTriggerControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerControllerGetAll200ResponseItemsInner, any>>;
    /**
     * Update event trigger Resource: events Authorized roles: administrator
     * @summary Patch
     * @param {EventTriggerApiEventTriggerControllerPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerApi
     */
    eventTriggerControllerPatch(requestParameters: EventTriggerApiEventTriggerControllerPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerControllerGetAll200ResponseItemsInner, any>>;
    /**
     * Create event trigger Resource: events Authorized roles: administrator
     * @summary Post
     * @param {EventTriggerApiEventTriggerControllerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerApi
     */
    eventTriggerControllerPost(requestParameters: EventTriggerApiEventTriggerControllerPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerControllerGetAll200ResponseItemsInner, any>>;
    /**
     * Get updated event trigger configuration Resource: events Authorized roles: device
     * @summary Query
     * @param {EventTriggerApiEventTriggerControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTriggerApi
     */
    eventTriggerControllerQuery(requestParameters: EventTriggerApiEventTriggerControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventTriggerControllerQuery201Response, any>>;
}
