/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AnnotationTemplateControllerInspectSpreadsheetRequest } from '../formant-models';
import { DeviceControllerGetTags200Response } from '../formant-models';
import { EventControllerCountRequest } from '../formant-models';
import { EventControllerCounts200Response } from '../formant-models';
import { EventControllerCountsByDevice200Response } from '../formant-models';
import { EventControllerEventTypes200Response } from '../formant-models';
import { EventControllerExportSheetRequest } from '../formant-models';
import { EventControllerGetOne200Response } from '../formant-models';
import { EventControllerHistogram200Response } from '../formant-models';
import { EventControllerHistogramRequest } from '../formant-models';
import { EventControllerQuery200Response } from '../formant-models';
import { EventControllerQueryRequest } from '../formant-models';
import { EventControllerSeekRequest } from '../formant-models';
import { EventControllerUsers200Response } from '../formant-models';
/**
 * EventApi - axios parameter creator
 * @export
 */
export declare const EventApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Distinct values of event annotation templates Resource: events Authorized roles: viewer, device
     * @summary Annotation templates
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerAnnotationTemplates: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Count events Resource: events Authorized roles: viewer, device
     * @summary Count
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerCount: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Count events Resource: events Authorized roles: viewer, device
     * @summary Counts
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerCounts: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Count events by device Resource: events Authorized roles: viewer, device
     * @summary Counts by device
     * @param {EventControllerCountRequest} eventControllerCountRequest EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerCountsByDevice: (eventControllerCountRequest: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Distinct values of event devices Resource: events Authorized roles: viewer, device
     * @summary Devices
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerDevices: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Distinct values of event types Resource: events Authorized roles: viewer, device
     * @summary Event types
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerEventTypes: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Export events as Google Sheet Resource: events Authorized roles: viewer
     * @summary Export sheet
     * @param {EventControllerExportSheetRequest} eventControllerExportSheetRequest EventExportSheetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerExportSheet: (eventControllerExportSheetRequest: EventControllerExportSheetRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an event Resource: events Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Event histogram Resource: events Authorized roles: viewer
     * @summary Histogram
     * @param {EventControllerHistogramRequest} eventControllerHistogramRequest IntervalEventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerHistogram: (eventControllerHistogramRequest: EventControllerHistogramRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Query events Resource: events Authorized roles: viewer
     * @summary Query
     * @param {string} [appId]
     * @param {EventControllerQueryRequest} [eventControllerQueryRequest] EventQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerQuery: (appId?: string, eventControllerQueryRequest?: EventControllerQueryRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Seek event Resource: events Authorized roles: viewer
     * @summary Seek
     * @param {EventControllerSeekRequest} eventControllerSeekRequest EventSeekQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerSeek: (eventControllerSeekRequest: EventControllerSeekRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Distinct values of event severities Resource: events Authorized roles: viewer
     * @summary Severities
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerSeverities: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Distinct values of event stream names Resource: events Authorized roles: viewer
     * @summary Stream names
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerStreamNames: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Distinct values of event stream types Resource: events Authorized roles: viewer
     * @summary Stream types
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerStreamTypes: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Distinct values of event tags Resource: events Authorized roles: viewer
     * @summary Tags
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerTags: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Distinct values of event users Resource: events Authorized roles: viewer, device
     * @summary Users
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerUsers: (eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Mark events as read Resource: events Authorized roles: viewer
     * @summary View
     * @param {EventControllerCountRequest} eventControllerCountRequest EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerView: (eventControllerCountRequest: EventControllerCountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventApi - functional programming interface
 * @export
 */
export declare const EventApiFp: (configuration?: Configuration) => {
    /**
     * Distinct values of event annotation templates Resource: events Authorized roles: viewer, device
     * @summary Annotation templates
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerAnnotationTemplates(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerUsers200Response>>;
    /**
     * Count events Resource: events Authorized roles: viewer, device
     * @summary Count
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerCount(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Count events Resource: events Authorized roles: viewer, device
     * @summary Counts
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerCounts(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerCounts200Response>>;
    /**
     * Count events by device Resource: events Authorized roles: viewer, device
     * @summary Counts by device
     * @param {EventControllerCountRequest} eventControllerCountRequest EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerCountsByDevice(eventControllerCountRequest: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerCountsByDevice200Response>>;
    /**
     * Distinct values of event devices Resource: events Authorized roles: viewer, device
     * @summary Devices
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerDevices(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerUsers200Response>>;
    /**
     * Distinct values of event types Resource: events Authorized roles: viewer, device
     * @summary Event types
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerEventTypes(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerEventTypes200Response>>;
    /**
     * Export events as Google Sheet Resource: events Authorized roles: viewer
     * @summary Export sheet
     * @param {EventControllerExportSheetRequest} eventControllerExportSheetRequest EventExportSheetRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerExportSheet(eventControllerExportSheetRequest: EventControllerExportSheetRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationTemplateControllerInspectSpreadsheetRequest>>;
    /**
     * Get an event Resource: events Authorized roles: viewer
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerGetOne200Response>>;
    /**
     * Event histogram Resource: events Authorized roles: viewer
     * @summary Histogram
     * @param {EventControllerHistogramRequest} eventControllerHistogramRequest IntervalEventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerHistogram(eventControllerHistogramRequest: EventControllerHistogramRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerHistogram200Response>>;
    /**
     * Query events Resource: events Authorized roles: viewer
     * @summary Query
     * @param {string} [appId]
     * @param {EventControllerQueryRequest} [eventControllerQueryRequest] EventQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerQuery(appId?: string, eventControllerQueryRequest?: EventControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerQuery200Response>>;
    /**
     * Seek event Resource: events Authorized roles: viewer
     * @summary Seek
     * @param {EventControllerSeekRequest} eventControllerSeekRequest EventSeekQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerSeek(eventControllerSeekRequest: EventControllerSeekRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Distinct values of event severities Resource: events Authorized roles: viewer
     * @summary Severities
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerSeverities(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerEventTypes200Response>>;
    /**
     * Distinct values of event stream names Resource: events Authorized roles: viewer
     * @summary Stream names
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerStreamNames(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerEventTypes200Response>>;
    /**
     * Distinct values of event stream types Resource: events Authorized roles: viewer
     * @summary Stream types
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerStreamTypes(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerEventTypes200Response>>;
    /**
     * Distinct values of event tags Resource: events Authorized roles: viewer
     * @summary Tags
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerTags(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceControllerGetTags200Response>>;
    /**
     * Distinct values of event users Resource: events Authorized roles: viewer, device
     * @summary Users
     * @param {EventControllerCountRequest} [eventControllerCountRequest] EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerUsers(eventControllerCountRequest?: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventControllerUsers200Response>>;
    /**
     * Mark events as read Resource: events Authorized roles: viewer
     * @summary View
     * @param {EventControllerCountRequest} eventControllerCountRequest EventFilter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerView(eventControllerCountRequest: EventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * EventApi - factory interface
 * @export
 */
export declare const EventApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Distinct values of event annotation templates Resource: events Authorized roles: viewer, device
     * @summary Annotation templates
     * @param {EventApiEventControllerAnnotationTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerAnnotationTemplates(requestParameters?: EventApiEventControllerAnnotationTemplatesRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerUsers200Response>;
    /**
     * Count events Resource: events Authorized roles: viewer, device
     * @summary Count
     * @param {EventApiEventControllerCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerCount(requestParameters?: EventApiEventControllerCountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Count events Resource: events Authorized roles: viewer, device
     * @summary Counts
     * @param {EventApiEventControllerCountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerCounts(requestParameters?: EventApiEventControllerCountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerCounts200Response>;
    /**
     * Count events by device Resource: events Authorized roles: viewer, device
     * @summary Counts by device
     * @param {EventApiEventControllerCountsByDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerCountsByDevice(requestParameters: EventApiEventControllerCountsByDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerCountsByDevice200Response>;
    /**
     * Distinct values of event devices Resource: events Authorized roles: viewer, device
     * @summary Devices
     * @param {EventApiEventControllerDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerDevices(requestParameters?: EventApiEventControllerDevicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerUsers200Response>;
    /**
     * Distinct values of event types Resource: events Authorized roles: viewer, device
     * @summary Event types
     * @param {EventApiEventControllerEventTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerEventTypes(requestParameters?: EventApiEventControllerEventTypesRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerEventTypes200Response>;
    /**
     * Export events as Google Sheet Resource: events Authorized roles: viewer
     * @summary Export sheet
     * @param {EventApiEventControllerExportSheetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerExportSheet(requestParameters: EventApiEventControllerExportSheetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnnotationTemplateControllerInspectSpreadsheetRequest>;
    /**
     * Get an event Resource: events Authorized roles: viewer
     * @summary Get one
     * @param {EventApiEventControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerGetOne(requestParameters: EventApiEventControllerGetOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerGetOne200Response>;
    /**
     * Event histogram Resource: events Authorized roles: viewer
     * @summary Histogram
     * @param {EventApiEventControllerHistogramRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerHistogram(requestParameters: EventApiEventControllerHistogramRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerHistogram200Response>;
    /**
     * Query events Resource: events Authorized roles: viewer
     * @summary Query
     * @param {EventApiEventControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerQuery(requestParameters?: EventApiEventControllerQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerQuery200Response>;
    /**
     * Seek event Resource: events Authorized roles: viewer
     * @summary Seek
     * @param {EventApiEventControllerSeekRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerSeek(requestParameters: EventApiEventControllerSeekRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Distinct values of event severities Resource: events Authorized roles: viewer
     * @summary Severities
     * @param {EventApiEventControllerSeveritiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerSeverities(requestParameters?: EventApiEventControllerSeveritiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerEventTypes200Response>;
    /**
     * Distinct values of event stream names Resource: events Authorized roles: viewer
     * @summary Stream names
     * @param {EventApiEventControllerStreamNamesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerStreamNames(requestParameters?: EventApiEventControllerStreamNamesRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerEventTypes200Response>;
    /**
     * Distinct values of event stream types Resource: events Authorized roles: viewer
     * @summary Stream types
     * @param {EventApiEventControllerStreamTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerStreamTypes(requestParameters?: EventApiEventControllerStreamTypesRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerEventTypes200Response>;
    /**
     * Distinct values of event tags Resource: events Authorized roles: viewer
     * @summary Tags
     * @param {EventApiEventControllerTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerTags(requestParameters?: EventApiEventControllerTagsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceControllerGetTags200Response>;
    /**
     * Distinct values of event users Resource: events Authorized roles: viewer, device
     * @summary Users
     * @param {EventApiEventControllerUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerUsers(requestParameters?: EventApiEventControllerUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventControllerUsers200Response>;
    /**
     * Mark events as read Resource: events Authorized roles: viewer
     * @summary View
     * @param {EventApiEventControllerViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eventControllerView(requestParameters: EventApiEventControllerViewRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for eventControllerAnnotationTemplates operation in EventApi.
 * @export
 * @interface EventApiEventControllerAnnotationTemplatesRequest
 */
export interface EventApiEventControllerAnnotationTemplatesRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerAnnotationTemplates
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerCount operation in EventApi.
 * @export
 * @interface EventApiEventControllerCountRequest
 */
export interface EventApiEventControllerCountRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerCount
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerCounts operation in EventApi.
 * @export
 * @interface EventApiEventControllerCountsRequest
 */
export interface EventApiEventControllerCountsRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerCounts
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerCountsByDevice operation in EventApi.
 * @export
 * @interface EventApiEventControllerCountsByDeviceRequest
 */
export interface EventApiEventControllerCountsByDeviceRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerCountsByDevice
     */
    readonly eventControllerCountRequest: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerDevices operation in EventApi.
 * @export
 * @interface EventApiEventControllerDevicesRequest
 */
export interface EventApiEventControllerDevicesRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerDevices
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerEventTypes operation in EventApi.
 * @export
 * @interface EventApiEventControllerEventTypesRequest
 */
export interface EventApiEventControllerEventTypesRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerEventTypes
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerExportSheet operation in EventApi.
 * @export
 * @interface EventApiEventControllerExportSheetRequest
 */
export interface EventApiEventControllerExportSheetRequest {
    /**
     * EventExportSheetRequest
     * @type {EventControllerExportSheetRequest}
     * @memberof EventApiEventControllerExportSheet
     */
    readonly eventControllerExportSheetRequest: EventControllerExportSheetRequest;
}
/**
 * Request parameters for eventControllerGetOne operation in EventApi.
 * @export
 * @interface EventApiEventControllerGetOneRequest
 */
export interface EventApiEventControllerGetOneRequest {
    /**
     *
     * @type {string}
     * @memberof EventApiEventControllerGetOne
     */
    readonly id: string;
}
/**
 * Request parameters for eventControllerHistogram operation in EventApi.
 * @export
 * @interface EventApiEventControllerHistogramRequest
 */
export interface EventApiEventControllerHistogramRequest {
    /**
     * IntervalEventFilter
     * @type {EventControllerHistogramRequest}
     * @memberof EventApiEventControllerHistogram
     */
    readonly eventControllerHistogramRequest: EventControllerHistogramRequest;
}
/**
 * Request parameters for eventControllerQuery operation in EventApi.
 * @export
 * @interface EventApiEventControllerQueryRequest
 */
export interface EventApiEventControllerQueryRequest {
    /**
     *
     * @type {string}
     * @memberof EventApiEventControllerQuery
     */
    readonly appId?: string;
    /**
     * EventQuery
     * @type {EventControllerQueryRequest}
     * @memberof EventApiEventControllerQuery
     */
    readonly eventControllerQueryRequest?: EventControllerQueryRequest;
}
/**
 * Request parameters for eventControllerSeek operation in EventApi.
 * @export
 * @interface EventApiEventControllerSeekRequest
 */
export interface EventApiEventControllerSeekRequest {
    /**
     * EventSeekQuery
     * @type {EventControllerSeekRequest}
     * @memberof EventApiEventControllerSeek
     */
    readonly eventControllerSeekRequest: EventControllerSeekRequest;
}
/**
 * Request parameters for eventControllerSeverities operation in EventApi.
 * @export
 * @interface EventApiEventControllerSeveritiesRequest
 */
export interface EventApiEventControllerSeveritiesRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerSeverities
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerStreamNames operation in EventApi.
 * @export
 * @interface EventApiEventControllerStreamNamesRequest
 */
export interface EventApiEventControllerStreamNamesRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerStreamNames
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerStreamTypes operation in EventApi.
 * @export
 * @interface EventApiEventControllerStreamTypesRequest
 */
export interface EventApiEventControllerStreamTypesRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerStreamTypes
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerTags operation in EventApi.
 * @export
 * @interface EventApiEventControllerTagsRequest
 */
export interface EventApiEventControllerTagsRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerTags
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerUsers operation in EventApi.
 * @export
 * @interface EventApiEventControllerUsersRequest
 */
export interface EventApiEventControllerUsersRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerUsers
     */
    readonly eventControllerCountRequest?: EventControllerCountRequest;
}
/**
 * Request parameters for eventControllerView operation in EventApi.
 * @export
 * @interface EventApiEventControllerViewRequest
 */
export interface EventApiEventControllerViewRequest {
    /**
     * EventFilter
     * @type {EventControllerCountRequest}
     * @memberof EventApiEventControllerView
     */
    readonly eventControllerCountRequest: EventControllerCountRequest;
}
/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export declare class EventApi extends BaseAPI {
    /**
     * Distinct values of event annotation templates Resource: events Authorized roles: viewer, device
     * @summary Annotation templates
     * @param {EventApiEventControllerAnnotationTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerAnnotationTemplates(requestParameters?: EventApiEventControllerAnnotationTemplatesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerUsers200Response, any>>;
    /**
     * Count events Resource: events Authorized roles: viewer, device
     * @summary Count
     * @param {EventApiEventControllerCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerCount(requestParameters?: EventApiEventControllerCountRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Count events Resource: events Authorized roles: viewer, device
     * @summary Counts
     * @param {EventApiEventControllerCountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerCounts(requestParameters?: EventApiEventControllerCountsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerCounts200Response, any>>;
    /**
     * Count events by device Resource: events Authorized roles: viewer, device
     * @summary Counts by device
     * @param {EventApiEventControllerCountsByDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerCountsByDevice(requestParameters: EventApiEventControllerCountsByDeviceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerCountsByDevice200Response, any>>;
    /**
     * Distinct values of event devices Resource: events Authorized roles: viewer, device
     * @summary Devices
     * @param {EventApiEventControllerDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerDevices(requestParameters?: EventApiEventControllerDevicesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerUsers200Response, any>>;
    /**
     * Distinct values of event types Resource: events Authorized roles: viewer, device
     * @summary Event types
     * @param {EventApiEventControllerEventTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerEventTypes(requestParameters?: EventApiEventControllerEventTypesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerEventTypes200Response, any>>;
    /**
     * Export events as Google Sheet Resource: events Authorized roles: viewer
     * @summary Export sheet
     * @param {EventApiEventControllerExportSheetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerExportSheet(requestParameters: EventApiEventControllerExportSheetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnnotationTemplateControllerInspectSpreadsheetRequest, any>>;
    /**
     * Get an event Resource: events Authorized roles: viewer
     * @summary Get one
     * @param {EventApiEventControllerGetOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerGetOne(requestParameters: EventApiEventControllerGetOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerGetOne200Response, any>>;
    /**
     * Event histogram Resource: events Authorized roles: viewer
     * @summary Histogram
     * @param {EventApiEventControllerHistogramRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerHistogram(requestParameters: EventApiEventControllerHistogramRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerHistogram200Response, any>>;
    /**
     * Query events Resource: events Authorized roles: viewer
     * @summary Query
     * @param {EventApiEventControllerQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerQuery(requestParameters?: EventApiEventControllerQueryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerQuery200Response, any>>;
    /**
     * Seek event Resource: events Authorized roles: viewer
     * @summary Seek
     * @param {EventApiEventControllerSeekRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerSeek(requestParameters: EventApiEventControllerSeekRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Distinct values of event severities Resource: events Authorized roles: viewer
     * @summary Severities
     * @param {EventApiEventControllerSeveritiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerSeverities(requestParameters?: EventApiEventControllerSeveritiesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerEventTypes200Response, any>>;
    /**
     * Distinct values of event stream names Resource: events Authorized roles: viewer
     * @summary Stream names
     * @param {EventApiEventControllerStreamNamesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerStreamNames(requestParameters?: EventApiEventControllerStreamNamesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerEventTypes200Response, any>>;
    /**
     * Distinct values of event stream types Resource: events Authorized roles: viewer
     * @summary Stream types
     * @param {EventApiEventControllerStreamTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerStreamTypes(requestParameters?: EventApiEventControllerStreamTypesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerEventTypes200Response, any>>;
    /**
     * Distinct values of event tags Resource: events Authorized roles: viewer
     * @summary Tags
     * @param {EventApiEventControllerTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerTags(requestParameters?: EventApiEventControllerTagsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceControllerGetTags200Response, any>>;
    /**
     * Distinct values of event users Resource: events Authorized roles: viewer, device
     * @summary Users
     * @param {EventApiEventControllerUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerUsers(requestParameters?: EventApiEventControllerUsersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventControllerUsers200Response, any>>;
    /**
     * Mark events as read Resource: events Authorized roles: viewer
     * @summary View
     * @param {EventApiEventControllerViewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    eventControllerView(requestParameters: EventApiEventControllerViewRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
