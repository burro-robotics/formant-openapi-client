/**
 * Formant admin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.193.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface DeviceOfflineEvent
 */
export interface DeviceOfflineEvent {
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'type'?: DeviceOfflineEventTypeEnum;
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'createdAt'?: string;
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'updatedAt'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof DeviceOfflineEvent
     */
    'tags'?: {
        [key: string]: string;
    };
    /**
     * ID of the organization in which to create this new event.
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'organizationId'?: string;
    /**
     * Start time of the data range relevant to this event.
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'time': string;
    /**
     * End time of the data range relevant to this event.
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'endTime'?: string | null;
    /**
     * If this custom event is related to another event, you can add the ID of that parent event here.
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'parentId'?: string;
    /**
     * User-customizable metadata associated with this event in key-value pair format.
     * @type {{ [key: string]: string; }}
     * @memberof DeviceOfflineEvent
     */
    'metadata'?: {
        [key: string]: string;
    };
    /**
     * Message of this event. Must match the `message` field in the Formant UI when configuring a custom event.
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'message'?: string;
    /**
     *
     * @type {boolean}
     * @memberof DeviceOfflineEvent
     */
    'viewed'?: boolean;
    /**
     * ID of the device relevant to this event.
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'deviceId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'streamName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'streamType'?: DeviceOfflineEventStreamTypeEnum | null;
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'eventTriggerId'?: string | null;
    /**
     * Set this to `true` to enable notifications for this event.
     * @type {boolean}
     * @memberof DeviceOfflineEvent
     */
    'notificationEnabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'deletedAt'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'severity': DeviceOfflineEventSeverityEnum;
    /**
     *
     * @type {number}
     * @memberof DeviceOfflineEvent
     */
    'interval': number;
    /**
     *
     * @type {string}
     * @memberof DeviceOfflineEvent
     */
    'intervalStart'?: string;
}
export declare const DeviceOfflineEventTypeEnum: {
    readonly TriggeredEvent: "triggered-event";
    readonly DatapointEvent: "datapoint-event";
    readonly DeviceOnline: "device-online";
    readonly DeviceOffline: "device-offline";
    readonly InterventionRequest: "intervention-request";
    readonly InterventionResponse: "intervention-response";
    readonly TeleopSessionRecord: "teleop-session-record";
    readonly PortForwardingSessionRecord: "port-forwarding-session-record";
    readonly CommandRequest: "command-request";
    readonly CommandResponse: "command-response";
    readonly CommandDelivery: "command-delivery";
    readonly Custom: "custom";
    readonly Comment: "comment";
    readonly System: "system";
    readonly Annotation: "annotation";
    readonly TaskSummary: "task-summary";
    readonly Stateful: "stateful";
};
export type DeviceOfflineEventTypeEnum = typeof DeviceOfflineEventTypeEnum[keyof typeof DeviceOfflineEventTypeEnum];
export declare const DeviceOfflineEventStreamTypeEnum: {
    readonly Bitset: "bitset";
    readonly Localization: "localization";
    readonly PointCloud: "point cloud";
    readonly Location: "location";
    readonly File: "file";
    readonly Health: "health";
    readonly TransformTree: "transform tree";
    readonly Battery: "battery";
    readonly Video: "video";
    readonly NumericSet: "numeric set";
    readonly Json: "json";
    readonly Image: "image";
    readonly Numeric: "numeric";
    readonly Text: "text";
};
export type DeviceOfflineEventStreamTypeEnum = typeof DeviceOfflineEventStreamTypeEnum[keyof typeof DeviceOfflineEventStreamTypeEnum];
export declare const DeviceOfflineEventSeverityEnum: {
    readonly Info: "info";
    readonly Warning: "warning";
    readonly Error: "error";
    readonly Critical: "critical";
};
export type DeviceOfflineEventSeverityEnum = typeof DeviceOfflineEventSeverityEnum[keyof typeof DeviceOfflineEventSeverityEnum];
